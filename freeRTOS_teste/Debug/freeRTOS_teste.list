
freeRTOS_teste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08005000  08005000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006174  08005190  08005190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800b304  0800b304  00007304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b394  0800b394  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  0800b394  0800b394  00007394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b39c  0800b39c  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b39c  0800b39c  0000739c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b3a0  0800b3a0  000073a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800b3a4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a00  20000010  0800b3b4  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a10  0800b3b4  00008a10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a83  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000353c  00000000  00000000  00021ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  00025000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001171  00000000  00000000  00026668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003120  00000000  00000000  000277d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e3f  00000000  00000000  0002a8f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc333  00000000  00000000  00043738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0013fa6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ecc  00000000  00000000  0013faf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001459c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08005190 <__do_global_dtors_aux>:
 8005190:	b510      	push	{r4, lr}
 8005192:	4c05      	ldr	r4, [pc, #20]	@ (80051a8 <__do_global_dtors_aux+0x18>)
 8005194:	7823      	ldrb	r3, [r4, #0]
 8005196:	b933      	cbnz	r3, 80051a6 <__do_global_dtors_aux+0x16>
 8005198:	4b04      	ldr	r3, [pc, #16]	@ (80051ac <__do_global_dtors_aux+0x1c>)
 800519a:	b113      	cbz	r3, 80051a2 <__do_global_dtors_aux+0x12>
 800519c:	4804      	ldr	r0, [pc, #16]	@ (80051b0 <__do_global_dtors_aux+0x20>)
 800519e:	f3af 8000 	nop.w
 80051a2:	2301      	movs	r3, #1
 80051a4:	7023      	strb	r3, [r4, #0]
 80051a6:	bd10      	pop	{r4, pc}
 80051a8:	20000010 	.word	0x20000010
 80051ac:	00000000 	.word	0x00000000
 80051b0:	0800b2ec 	.word	0x0800b2ec

080051b4 <frame_dummy>:
 80051b4:	b508      	push	{r3, lr}
 80051b6:	4b03      	ldr	r3, [pc, #12]	@ (80051c4 <frame_dummy+0x10>)
 80051b8:	b11b      	cbz	r3, 80051c2 <frame_dummy+0xe>
 80051ba:	4903      	ldr	r1, [pc, #12]	@ (80051c8 <frame_dummy+0x14>)
 80051bc:	4803      	ldr	r0, [pc, #12]	@ (80051cc <frame_dummy+0x18>)
 80051be:	f3af 8000 	nop.w
 80051c2:	bd08      	pop	{r3, pc}
 80051c4:	00000000 	.word	0x00000000
 80051c8:	20000014 	.word	0x20000014
 80051cc:	0800b2ec 	.word	0x0800b2ec

080051d0 <__aeabi_uldivmod>:
 80051d0:	b953      	cbnz	r3, 80051e8 <__aeabi_uldivmod+0x18>
 80051d2:	b94a      	cbnz	r2, 80051e8 <__aeabi_uldivmod+0x18>
 80051d4:	2900      	cmp	r1, #0
 80051d6:	bf08      	it	eq
 80051d8:	2800      	cmpeq	r0, #0
 80051da:	bf1c      	itt	ne
 80051dc:	f04f 31ff 	movne.w	r1, #4294967295
 80051e0:	f04f 30ff 	movne.w	r0, #4294967295
 80051e4:	f000 b96a 	b.w	80054bc <__aeabi_idiv0>
 80051e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80051ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80051f0:	f000 f806 	bl	8005200 <__udivmoddi4>
 80051f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80051f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051fc:	b004      	add	sp, #16
 80051fe:	4770      	bx	lr

08005200 <__udivmoddi4>:
 8005200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005204:	9d08      	ldr	r5, [sp, #32]
 8005206:	460c      	mov	r4, r1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d14e      	bne.n	80052aa <__udivmoddi4+0xaa>
 800520c:	4694      	mov	ip, r2
 800520e:	458c      	cmp	ip, r1
 8005210:	4686      	mov	lr, r0
 8005212:	fab2 f282 	clz	r2, r2
 8005216:	d962      	bls.n	80052de <__udivmoddi4+0xde>
 8005218:	b14a      	cbz	r2, 800522e <__udivmoddi4+0x2e>
 800521a:	f1c2 0320 	rsb	r3, r2, #32
 800521e:	4091      	lsls	r1, r2
 8005220:	fa20 f303 	lsr.w	r3, r0, r3
 8005224:	fa0c fc02 	lsl.w	ip, ip, r2
 8005228:	4319      	orrs	r1, r3
 800522a:	fa00 fe02 	lsl.w	lr, r0, r2
 800522e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8005232:	fa1f f68c 	uxth.w	r6, ip
 8005236:	fbb1 f4f7 	udiv	r4, r1, r7
 800523a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800523e:	fb07 1114 	mls	r1, r7, r4, r1
 8005242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005246:	fb04 f106 	mul.w	r1, r4, r6
 800524a:	4299      	cmp	r1, r3
 800524c:	d90a      	bls.n	8005264 <__udivmoddi4+0x64>
 800524e:	eb1c 0303 	adds.w	r3, ip, r3
 8005252:	f104 30ff 	add.w	r0, r4, #4294967295
 8005256:	f080 8112 	bcs.w	800547e <__udivmoddi4+0x27e>
 800525a:	4299      	cmp	r1, r3
 800525c:	f240 810f 	bls.w	800547e <__udivmoddi4+0x27e>
 8005260:	3c02      	subs	r4, #2
 8005262:	4463      	add	r3, ip
 8005264:	1a59      	subs	r1, r3, r1
 8005266:	fa1f f38e 	uxth.w	r3, lr
 800526a:	fbb1 f0f7 	udiv	r0, r1, r7
 800526e:	fb07 1110 	mls	r1, r7, r0, r1
 8005272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005276:	fb00 f606 	mul.w	r6, r0, r6
 800527a:	429e      	cmp	r6, r3
 800527c:	d90a      	bls.n	8005294 <__udivmoddi4+0x94>
 800527e:	eb1c 0303 	adds.w	r3, ip, r3
 8005282:	f100 31ff 	add.w	r1, r0, #4294967295
 8005286:	f080 80fc 	bcs.w	8005482 <__udivmoddi4+0x282>
 800528a:	429e      	cmp	r6, r3
 800528c:	f240 80f9 	bls.w	8005482 <__udivmoddi4+0x282>
 8005290:	4463      	add	r3, ip
 8005292:	3802      	subs	r0, #2
 8005294:	1b9b      	subs	r3, r3, r6
 8005296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800529a:	2100      	movs	r1, #0
 800529c:	b11d      	cbz	r5, 80052a6 <__udivmoddi4+0xa6>
 800529e:	40d3      	lsrs	r3, r2
 80052a0:	2200      	movs	r2, #0
 80052a2:	e9c5 3200 	strd	r3, r2, [r5]
 80052a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052aa:	428b      	cmp	r3, r1
 80052ac:	d905      	bls.n	80052ba <__udivmoddi4+0xba>
 80052ae:	b10d      	cbz	r5, 80052b4 <__udivmoddi4+0xb4>
 80052b0:	e9c5 0100 	strd	r0, r1, [r5]
 80052b4:	2100      	movs	r1, #0
 80052b6:	4608      	mov	r0, r1
 80052b8:	e7f5      	b.n	80052a6 <__udivmoddi4+0xa6>
 80052ba:	fab3 f183 	clz	r1, r3
 80052be:	2900      	cmp	r1, #0
 80052c0:	d146      	bne.n	8005350 <__udivmoddi4+0x150>
 80052c2:	42a3      	cmp	r3, r4
 80052c4:	d302      	bcc.n	80052cc <__udivmoddi4+0xcc>
 80052c6:	4290      	cmp	r0, r2
 80052c8:	f0c0 80f0 	bcc.w	80054ac <__udivmoddi4+0x2ac>
 80052cc:	1a86      	subs	r6, r0, r2
 80052ce:	eb64 0303 	sbc.w	r3, r4, r3
 80052d2:	2001      	movs	r0, #1
 80052d4:	2d00      	cmp	r5, #0
 80052d6:	d0e6      	beq.n	80052a6 <__udivmoddi4+0xa6>
 80052d8:	e9c5 6300 	strd	r6, r3, [r5]
 80052dc:	e7e3      	b.n	80052a6 <__udivmoddi4+0xa6>
 80052de:	2a00      	cmp	r2, #0
 80052e0:	f040 8090 	bne.w	8005404 <__udivmoddi4+0x204>
 80052e4:	eba1 040c 	sub.w	r4, r1, ip
 80052e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80052ec:	fa1f f78c 	uxth.w	r7, ip
 80052f0:	2101      	movs	r1, #1
 80052f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80052f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80052fa:	fb08 4416 	mls	r4, r8, r6, r4
 80052fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005302:	fb07 f006 	mul.w	r0, r7, r6
 8005306:	4298      	cmp	r0, r3
 8005308:	d908      	bls.n	800531c <__udivmoddi4+0x11c>
 800530a:	eb1c 0303 	adds.w	r3, ip, r3
 800530e:	f106 34ff 	add.w	r4, r6, #4294967295
 8005312:	d202      	bcs.n	800531a <__udivmoddi4+0x11a>
 8005314:	4298      	cmp	r0, r3
 8005316:	f200 80cd 	bhi.w	80054b4 <__udivmoddi4+0x2b4>
 800531a:	4626      	mov	r6, r4
 800531c:	1a1c      	subs	r4, r3, r0
 800531e:	fa1f f38e 	uxth.w	r3, lr
 8005322:	fbb4 f0f8 	udiv	r0, r4, r8
 8005326:	fb08 4410 	mls	r4, r8, r0, r4
 800532a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800532e:	fb00 f707 	mul.w	r7, r0, r7
 8005332:	429f      	cmp	r7, r3
 8005334:	d908      	bls.n	8005348 <__udivmoddi4+0x148>
 8005336:	eb1c 0303 	adds.w	r3, ip, r3
 800533a:	f100 34ff 	add.w	r4, r0, #4294967295
 800533e:	d202      	bcs.n	8005346 <__udivmoddi4+0x146>
 8005340:	429f      	cmp	r7, r3
 8005342:	f200 80b0 	bhi.w	80054a6 <__udivmoddi4+0x2a6>
 8005346:	4620      	mov	r0, r4
 8005348:	1bdb      	subs	r3, r3, r7
 800534a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800534e:	e7a5      	b.n	800529c <__udivmoddi4+0x9c>
 8005350:	f1c1 0620 	rsb	r6, r1, #32
 8005354:	408b      	lsls	r3, r1
 8005356:	fa22 f706 	lsr.w	r7, r2, r6
 800535a:	431f      	orrs	r7, r3
 800535c:	fa20 fc06 	lsr.w	ip, r0, r6
 8005360:	fa04 f301 	lsl.w	r3, r4, r1
 8005364:	ea43 030c 	orr.w	r3, r3, ip
 8005368:	40f4      	lsrs	r4, r6
 800536a:	fa00 f801 	lsl.w	r8, r0, r1
 800536e:	0c38      	lsrs	r0, r7, #16
 8005370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8005374:	fbb4 fef0 	udiv	lr, r4, r0
 8005378:	fa1f fc87 	uxth.w	ip, r7
 800537c:	fb00 441e 	mls	r4, r0, lr, r4
 8005380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8005384:	fb0e f90c 	mul.w	r9, lr, ip
 8005388:	45a1      	cmp	r9, r4
 800538a:	fa02 f201 	lsl.w	r2, r2, r1
 800538e:	d90a      	bls.n	80053a6 <__udivmoddi4+0x1a6>
 8005390:	193c      	adds	r4, r7, r4
 8005392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8005396:	f080 8084 	bcs.w	80054a2 <__udivmoddi4+0x2a2>
 800539a:	45a1      	cmp	r9, r4
 800539c:	f240 8081 	bls.w	80054a2 <__udivmoddi4+0x2a2>
 80053a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80053a4:	443c      	add	r4, r7
 80053a6:	eba4 0409 	sub.w	r4, r4, r9
 80053aa:	fa1f f983 	uxth.w	r9, r3
 80053ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80053b2:	fb00 4413 	mls	r4, r0, r3, r4
 80053b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80053ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80053be:	45a4      	cmp	ip, r4
 80053c0:	d907      	bls.n	80053d2 <__udivmoddi4+0x1d2>
 80053c2:	193c      	adds	r4, r7, r4
 80053c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80053c8:	d267      	bcs.n	800549a <__udivmoddi4+0x29a>
 80053ca:	45a4      	cmp	ip, r4
 80053cc:	d965      	bls.n	800549a <__udivmoddi4+0x29a>
 80053ce:	3b02      	subs	r3, #2
 80053d0:	443c      	add	r4, r7
 80053d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80053d6:	fba0 9302 	umull	r9, r3, r0, r2
 80053da:	eba4 040c 	sub.w	r4, r4, ip
 80053de:	429c      	cmp	r4, r3
 80053e0:	46ce      	mov	lr, r9
 80053e2:	469c      	mov	ip, r3
 80053e4:	d351      	bcc.n	800548a <__udivmoddi4+0x28a>
 80053e6:	d04e      	beq.n	8005486 <__udivmoddi4+0x286>
 80053e8:	b155      	cbz	r5, 8005400 <__udivmoddi4+0x200>
 80053ea:	ebb8 030e 	subs.w	r3, r8, lr
 80053ee:	eb64 040c 	sbc.w	r4, r4, ip
 80053f2:	fa04 f606 	lsl.w	r6, r4, r6
 80053f6:	40cb      	lsrs	r3, r1
 80053f8:	431e      	orrs	r6, r3
 80053fa:	40cc      	lsrs	r4, r1
 80053fc:	e9c5 6400 	strd	r6, r4, [r5]
 8005400:	2100      	movs	r1, #0
 8005402:	e750      	b.n	80052a6 <__udivmoddi4+0xa6>
 8005404:	f1c2 0320 	rsb	r3, r2, #32
 8005408:	fa20 f103 	lsr.w	r1, r0, r3
 800540c:	fa0c fc02 	lsl.w	ip, ip, r2
 8005410:	fa24 f303 	lsr.w	r3, r4, r3
 8005414:	4094      	lsls	r4, r2
 8005416:	430c      	orrs	r4, r1
 8005418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800541c:	fa00 fe02 	lsl.w	lr, r0, r2
 8005420:	fa1f f78c 	uxth.w	r7, ip
 8005424:	fbb3 f0f8 	udiv	r0, r3, r8
 8005428:	fb08 3110 	mls	r1, r8, r0, r3
 800542c:	0c23      	lsrs	r3, r4, #16
 800542e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005432:	fb00 f107 	mul.w	r1, r0, r7
 8005436:	4299      	cmp	r1, r3
 8005438:	d908      	bls.n	800544c <__udivmoddi4+0x24c>
 800543a:	eb1c 0303 	adds.w	r3, ip, r3
 800543e:	f100 36ff 	add.w	r6, r0, #4294967295
 8005442:	d22c      	bcs.n	800549e <__udivmoddi4+0x29e>
 8005444:	4299      	cmp	r1, r3
 8005446:	d92a      	bls.n	800549e <__udivmoddi4+0x29e>
 8005448:	3802      	subs	r0, #2
 800544a:	4463      	add	r3, ip
 800544c:	1a5b      	subs	r3, r3, r1
 800544e:	b2a4      	uxth	r4, r4
 8005450:	fbb3 f1f8 	udiv	r1, r3, r8
 8005454:	fb08 3311 	mls	r3, r8, r1, r3
 8005458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800545c:	fb01 f307 	mul.w	r3, r1, r7
 8005460:	42a3      	cmp	r3, r4
 8005462:	d908      	bls.n	8005476 <__udivmoddi4+0x276>
 8005464:	eb1c 0404 	adds.w	r4, ip, r4
 8005468:	f101 36ff 	add.w	r6, r1, #4294967295
 800546c:	d213      	bcs.n	8005496 <__udivmoddi4+0x296>
 800546e:	42a3      	cmp	r3, r4
 8005470:	d911      	bls.n	8005496 <__udivmoddi4+0x296>
 8005472:	3902      	subs	r1, #2
 8005474:	4464      	add	r4, ip
 8005476:	1ae4      	subs	r4, r4, r3
 8005478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800547c:	e739      	b.n	80052f2 <__udivmoddi4+0xf2>
 800547e:	4604      	mov	r4, r0
 8005480:	e6f0      	b.n	8005264 <__udivmoddi4+0x64>
 8005482:	4608      	mov	r0, r1
 8005484:	e706      	b.n	8005294 <__udivmoddi4+0x94>
 8005486:	45c8      	cmp	r8, r9
 8005488:	d2ae      	bcs.n	80053e8 <__udivmoddi4+0x1e8>
 800548a:	ebb9 0e02 	subs.w	lr, r9, r2
 800548e:	eb63 0c07 	sbc.w	ip, r3, r7
 8005492:	3801      	subs	r0, #1
 8005494:	e7a8      	b.n	80053e8 <__udivmoddi4+0x1e8>
 8005496:	4631      	mov	r1, r6
 8005498:	e7ed      	b.n	8005476 <__udivmoddi4+0x276>
 800549a:	4603      	mov	r3, r0
 800549c:	e799      	b.n	80053d2 <__udivmoddi4+0x1d2>
 800549e:	4630      	mov	r0, r6
 80054a0:	e7d4      	b.n	800544c <__udivmoddi4+0x24c>
 80054a2:	46d6      	mov	lr, sl
 80054a4:	e77f      	b.n	80053a6 <__udivmoddi4+0x1a6>
 80054a6:	4463      	add	r3, ip
 80054a8:	3802      	subs	r0, #2
 80054aa:	e74d      	b.n	8005348 <__udivmoddi4+0x148>
 80054ac:	4606      	mov	r6, r0
 80054ae:	4623      	mov	r3, r4
 80054b0:	4608      	mov	r0, r1
 80054b2:	e70f      	b.n	80052d4 <__udivmoddi4+0xd4>
 80054b4:	3e02      	subs	r6, #2
 80054b6:	4463      	add	r3, ip
 80054b8:	e730      	b.n	800531c <__udivmoddi4+0x11c>
 80054ba:	bf00      	nop

080054bc <__aeabi_idiv0>:
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop

080054c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80054c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80054cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d013      	beq.n	8005500 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80054d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80054dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80054e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00b      	beq.n	8005500 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80054e8:	e000      	b.n	80054ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80054ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80054ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0f9      	beq.n	80054ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80054f6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8005500:	687b      	ldr	r3, [r7, #4]
}
 8005502:	4618      	mov	r0, r3
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005514:	f000 fa93 	bl	8005a3e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8005518:	f000 f818 	bl	800554c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800551c:	f000 f88c 	bl	8005638 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8005520:	f000 f85a 	bl	80055d8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8005524:	f003 f924 	bl	8008770 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005528:	4a05      	ldr	r2, [pc, #20]	@ (8005540 <main+0x30>)
 800552a:	2100      	movs	r1, #0
 800552c:	4805      	ldr	r0, [pc, #20]	@ (8005544 <main+0x34>)
 800552e:	f003 f969 	bl	8008804 <osThreadNew>
 8005532:	4603      	mov	r3, r0
 8005534:	4a04      	ldr	r2, [pc, #16]	@ (8005548 <main+0x38>)
 8005536:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8005538:	f003 f93e 	bl	80087b8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800553c:	bf00      	nop
 800553e:	e7fd      	b.n	800553c <main+0x2c>
 8005540:	0800b328 	.word	0x0800b328
 8005544:	0800571d 	.word	0x0800571d
 8005548:	200000b4 	.word	0x200000b4

0800554c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b096      	sub	sp, #88	@ 0x58
 8005550:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005552:	f107 0314 	add.w	r3, r7, #20
 8005556:	2244      	movs	r2, #68	@ 0x44
 8005558:	2100      	movs	r1, #0
 800555a:	4618      	mov	r0, r3
 800555c:	f005 fe8c 	bl	800b278 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005560:	463b      	mov	r3, r7
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	605a      	str	r2, [r3, #4]
 8005568:	609a      	str	r2, [r3, #8]
 800556a:	60da      	str	r2, [r3, #12]
 800556c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800556e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005572:	f000 fd8d 	bl	8006090 <HAL_PWREx_ControlVoltageScaling>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <SystemClock_Config+0x34>
	{
		Error_Handler();
 800557c:	f000 f8f2 	bl	8005764 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005580:	2310      	movs	r3, #16
 8005582:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005584:	2301      	movs	r3, #1
 8005586:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8005588:	2300      	movs	r3, #0
 800558a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800558c:	2360      	movs	r3, #96	@ 0x60
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005590:	2300      	movs	r3, #0
 8005592:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005594:	f107 0314 	add.w	r3, r7, #20
 8005598:	4618      	mov	r0, r3
 800559a:	f000 fdcf 	bl	800613c <HAL_RCC_OscConfig>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <SystemClock_Config+0x5c>
	{
		Error_Handler();
 80055a4:	f000 f8de 	bl	8005764 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80055a8:	230f      	movs	r3, #15
 80055aa:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80055ac:	2300      	movs	r3, #0
 80055ae:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80055b0:	2300      	movs	r3, #0
 80055b2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80055b8:	2300      	movs	r3, #0
 80055ba:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80055bc:	463b      	mov	r3, r7
 80055be:	2100      	movs	r1, #0
 80055c0:	4618      	mov	r0, r3
 80055c2:	f001 f997 	bl	80068f4 <HAL_RCC_ClockConfig>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <SystemClock_Config+0x84>
	{
		Error_Handler();
 80055cc:	f000 f8ca 	bl	8005764 <Error_Handler>
	}
}
 80055d0:	bf00      	nop
 80055d2:	3758      	adds	r7, #88	@ 0x58
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80055dc:	4b14      	ldr	r3, [pc, #80]	@ (8005630 <MX_USART2_UART_Init+0x58>)
 80055de:	4a15      	ldr	r2, [pc, #84]	@ (8005634 <MX_USART2_UART_Init+0x5c>)
 80055e0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80055e2:	4b13      	ldr	r3, [pc, #76]	@ (8005630 <MX_USART2_UART_Init+0x58>)
 80055e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80055e8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80055ea:	4b11      	ldr	r3, [pc, #68]	@ (8005630 <MX_USART2_UART_Init+0x58>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80055f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005630 <MX_USART2_UART_Init+0x58>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80055f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005630 <MX_USART2_UART_Init+0x58>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80055fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005630 <MX_USART2_UART_Init+0x58>)
 80055fe:	220c      	movs	r2, #12
 8005600:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005602:	4b0b      	ldr	r3, [pc, #44]	@ (8005630 <MX_USART2_UART_Init+0x58>)
 8005604:	2200      	movs	r2, #0
 8005606:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005608:	4b09      	ldr	r3, [pc, #36]	@ (8005630 <MX_USART2_UART_Init+0x58>)
 800560a:	2200      	movs	r2, #0
 800560c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800560e:	4b08      	ldr	r3, [pc, #32]	@ (8005630 <MX_USART2_UART_Init+0x58>)
 8005610:	2200      	movs	r2, #0
 8005612:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005614:	4b06      	ldr	r3, [pc, #24]	@ (8005630 <MX_USART2_UART_Init+0x58>)
 8005616:	2200      	movs	r2, #0
 8005618:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800561a:	4805      	ldr	r0, [pc, #20]	@ (8005630 <MX_USART2_UART_Init+0x58>)
 800561c:	f002 fb42 	bl	8007ca4 <HAL_UART_Init>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8005626:	f000 f89d 	bl	8005764 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800562a:	bf00      	nop
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	2000002c 	.word	0x2000002c
 8005634:	40004400 	.word	0x40004400

08005638 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800563e:	f107 030c 	add.w	r3, r7, #12
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	605a      	str	r2, [r3, #4]
 8005648:	609a      	str	r2, [r3, #8]
 800564a:	60da      	str	r2, [r3, #12]
 800564c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800564e:	4b29      	ldr	r3, [pc, #164]	@ (80056f4 <MX_GPIO_Init+0xbc>)
 8005650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005652:	4a28      	ldr	r2, [pc, #160]	@ (80056f4 <MX_GPIO_Init+0xbc>)
 8005654:	f043 0304 	orr.w	r3, r3, #4
 8005658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800565a:	4b26      	ldr	r3, [pc, #152]	@ (80056f4 <MX_GPIO_Init+0xbc>)
 800565c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800565e:	f003 0304 	and.w	r3, r3, #4
 8005662:	60bb      	str	r3, [r7, #8]
 8005664:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005666:	4b23      	ldr	r3, [pc, #140]	@ (80056f4 <MX_GPIO_Init+0xbc>)
 8005668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800566a:	4a22      	ldr	r2, [pc, #136]	@ (80056f4 <MX_GPIO_Init+0xbc>)
 800566c:	f043 0301 	orr.w	r3, r3, #1
 8005670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005672:	4b20      	ldr	r3, [pc, #128]	@ (80056f4 <MX_GPIO_Init+0xbc>)
 8005674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	607b      	str	r3, [r7, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800567e:	4b1d      	ldr	r3, [pc, #116]	@ (80056f4 <MX_GPIO_Init+0xbc>)
 8005680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005682:	4a1c      	ldr	r2, [pc, #112]	@ (80056f4 <MX_GPIO_Init+0xbc>)
 8005684:	f043 0302 	orr.w	r3, r3, #2
 8005688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800568a:	4b1a      	ldr	r3, [pc, #104]	@ (80056f4 <MX_GPIO_Init+0xbc>)
 800568c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8005696:	2200      	movs	r2, #0
 8005698:	2120      	movs	r1, #32
 800569a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800569e:	f000 fc93 	bl	8005fc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BLUE_BUTTON_Pin */
	GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 80056a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80056a6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80056a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80056ac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80056b2:	f107 030c 	add.w	r3, r7, #12
 80056b6:	4619      	mov	r1, r3
 80056b8:	480f      	ldr	r0, [pc, #60]	@ (80056f8 <MX_GPIO_Init+0xc0>)
 80056ba:	f000 fadb 	bl	8005c74 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_GREEN_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80056be:	2320      	movs	r3, #32
 80056c0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056c2:	2301      	movs	r3, #1
 80056c4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80056ce:	f107 030c 	add.w	r3, r7, #12
 80056d2:	4619      	mov	r1, r3
 80056d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80056d8:	f000 facc 	bl	8005c74 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80056dc:	2200      	movs	r2, #0
 80056de:	2105      	movs	r1, #5
 80056e0:	2028      	movs	r0, #40	@ 0x28
 80056e2:	f000 fa9d 	bl	8005c20 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80056e6:	2028      	movs	r0, #40	@ 0x28
 80056e8:	f000 fab6 	bl	8005c58 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80056ec:	bf00      	nop
 80056ee:	3720      	adds	r7, #32
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40021000 	.word	0x40021000
 80056f8:	48000800 	.word	0x48000800

080056fc <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(char message){
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff fed9 	bl	80054c0 <ITM_SendChar>
	ITM_SendChar('\n');
 800570e:	200a      	movs	r0, #10
 8005710:	f7ff fed6 	bl	80054c0 <ITM_SendChar>
}
 8005714:	bf00      	nop
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		Task_action('A');
 8005724:	2041      	movs	r0, #65	@ 0x41
 8005726:	f7ff ffe9 	bl	80056fc <Task_action>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800572a:	2120      	movs	r1, #32
 800572c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005730:	f000 fc62 	bl	8005ff8 <HAL_GPIO_TogglePin>
		osDelay(500);
 8005734:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005738:	f003 f8f6 	bl	8008928 <osDelay>
		Task_action('A');
 800573c:	bf00      	nop
 800573e:	e7f1      	b.n	8005724 <StartDefaultTask+0x8>

08005740 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a04      	ldr	r2, [pc, #16]	@ (8005760 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d101      	bne.n	8005756 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8005752:	f000 f98d 	bl	8005a70 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8005756:	bf00      	nop
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40001000 	.word	0x40001000

08005764 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005768:	b672      	cpsid	i
}
 800576a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800576c:	bf00      	nop
 800576e:	e7fd      	b.n	800576c <Error_Handler+0x8>

08005770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005776:	4b11      	ldr	r3, [pc, #68]	@ (80057bc <HAL_MspInit+0x4c>)
 8005778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800577a:	4a10      	ldr	r2, [pc, #64]	@ (80057bc <HAL_MspInit+0x4c>)
 800577c:	f043 0301 	orr.w	r3, r3, #1
 8005780:	6613      	str	r3, [r2, #96]	@ 0x60
 8005782:	4b0e      	ldr	r3, [pc, #56]	@ (80057bc <HAL_MspInit+0x4c>)
 8005784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	607b      	str	r3, [r7, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800578e:	4b0b      	ldr	r3, [pc, #44]	@ (80057bc <HAL_MspInit+0x4c>)
 8005790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005792:	4a0a      	ldr	r2, [pc, #40]	@ (80057bc <HAL_MspInit+0x4c>)
 8005794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005798:	6593      	str	r3, [r2, #88]	@ 0x58
 800579a:	4b08      	ldr	r3, [pc, #32]	@ (80057bc <HAL_MspInit+0x4c>)
 800579c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800579e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057a2:	603b      	str	r3, [r7, #0]
 80057a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80057a6:	2200      	movs	r2, #0
 80057a8:	210f      	movs	r1, #15
 80057aa:	f06f 0001 	mvn.w	r0, #1
 80057ae:	f000 fa37 	bl	8005c20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057b2:	bf00      	nop
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	40021000 	.word	0x40021000

080057c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b0ac      	sub	sp, #176	@ 0xb0
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	605a      	str	r2, [r3, #4]
 80057d2:	609a      	str	r2, [r3, #8]
 80057d4:	60da      	str	r2, [r3, #12]
 80057d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80057d8:	f107 0314 	add.w	r3, r7, #20
 80057dc:	2288      	movs	r2, #136	@ 0x88
 80057de:	2100      	movs	r1, #0
 80057e0:	4618      	mov	r0, r3
 80057e2:	f005 fd49 	bl	800b278 <memset>
  if(huart->Instance==USART2)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a21      	ldr	r2, [pc, #132]	@ (8005870 <HAL_UART_MspInit+0xb0>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d13b      	bne.n	8005868 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80057f0:	2302      	movs	r3, #2
 80057f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80057f4:	2300      	movs	r3, #0
 80057f6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80057f8:	f107 0314 	add.w	r3, r7, #20
 80057fc:	4618      	mov	r0, r3
 80057fe:	f001 facf 	bl	8006da0 <HAL_RCCEx_PeriphCLKConfig>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005808:	f7ff ffac 	bl	8005764 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800580c:	4b19      	ldr	r3, [pc, #100]	@ (8005874 <HAL_UART_MspInit+0xb4>)
 800580e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005810:	4a18      	ldr	r2, [pc, #96]	@ (8005874 <HAL_UART_MspInit+0xb4>)
 8005812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005816:	6593      	str	r3, [r2, #88]	@ 0x58
 8005818:	4b16      	ldr	r3, [pc, #88]	@ (8005874 <HAL_UART_MspInit+0xb4>)
 800581a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800581c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005820:	613b      	str	r3, [r7, #16]
 8005822:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005824:	4b13      	ldr	r3, [pc, #76]	@ (8005874 <HAL_UART_MspInit+0xb4>)
 8005826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005828:	4a12      	ldr	r2, [pc, #72]	@ (8005874 <HAL_UART_MspInit+0xb4>)
 800582a:	f043 0301 	orr.w	r3, r3, #1
 800582e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005830:	4b10      	ldr	r3, [pc, #64]	@ (8005874 <HAL_UART_MspInit+0xb4>)
 8005832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	60fb      	str	r3, [r7, #12]
 800583a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800583c:	230c      	movs	r3, #12
 800583e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005842:	2302      	movs	r3, #2
 8005844:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005848:	2300      	movs	r3, #0
 800584a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800584e:	2303      	movs	r3, #3
 8005850:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005854:	2307      	movs	r3, #7
 8005856:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800585a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800585e:	4619      	mov	r1, r3
 8005860:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005864:	f000 fa06 	bl	8005c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005868:	bf00      	nop
 800586a:	37b0      	adds	r7, #176	@ 0xb0
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	40004400 	.word	0x40004400
 8005874:	40021000 	.word	0x40021000

08005878 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b08e      	sub	sp, #56	@ 0x38
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005886:	4b34      	ldr	r3, [pc, #208]	@ (8005958 <HAL_InitTick+0xe0>)
 8005888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800588a:	4a33      	ldr	r2, [pc, #204]	@ (8005958 <HAL_InitTick+0xe0>)
 800588c:	f043 0310 	orr.w	r3, r3, #16
 8005890:	6593      	str	r3, [r2, #88]	@ 0x58
 8005892:	4b31      	ldr	r3, [pc, #196]	@ (8005958 <HAL_InitTick+0xe0>)
 8005894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005896:	f003 0310 	and.w	r3, r3, #16
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800589e:	f107 0210 	add.w	r2, r7, #16
 80058a2:	f107 0314 	add.w	r3, r7, #20
 80058a6:	4611      	mov	r1, r2
 80058a8:	4618      	mov	r0, r3
 80058aa:	f001 f9e7 	bl	8006c7c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80058b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d103      	bne.n	80058c0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80058b8:	f001 f9b4 	bl	8006c24 <HAL_RCC_GetPCLK1Freq>
 80058bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80058be:	e004      	b.n	80058ca <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80058c0:	f001 f9b0 	bl	8006c24 <HAL_RCC_GetPCLK1Freq>
 80058c4:	4603      	mov	r3, r0
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80058ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058cc:	4a23      	ldr	r2, [pc, #140]	@ (800595c <HAL_InitTick+0xe4>)
 80058ce:	fba2 2303 	umull	r2, r3, r2, r3
 80058d2:	0c9b      	lsrs	r3, r3, #18
 80058d4:	3b01      	subs	r3, #1
 80058d6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80058d8:	4b21      	ldr	r3, [pc, #132]	@ (8005960 <HAL_InitTick+0xe8>)
 80058da:	4a22      	ldr	r2, [pc, #136]	@ (8005964 <HAL_InitTick+0xec>)
 80058dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80058de:	4b20      	ldr	r3, [pc, #128]	@ (8005960 <HAL_InitTick+0xe8>)
 80058e0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80058e4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80058e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005960 <HAL_InitTick+0xe8>)
 80058e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80058ec:	4b1c      	ldr	r3, [pc, #112]	@ (8005960 <HAL_InitTick+0xe8>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005960 <HAL_InitTick+0xe8>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058f8:	4b19      	ldr	r3, [pc, #100]	@ (8005960 <HAL_InitTick+0xe8>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80058fe:	4818      	ldr	r0, [pc, #96]	@ (8005960 <HAL_InitTick+0xe8>)
 8005900:	f001 ff0a 	bl	8007718 <HAL_TIM_Base_Init>
 8005904:	4603      	mov	r3, r0
 8005906:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800590a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800590e:	2b00      	cmp	r3, #0
 8005910:	d11b      	bne.n	800594a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005912:	4813      	ldr	r0, [pc, #76]	@ (8005960 <HAL_InitTick+0xe8>)
 8005914:	f001 ff62 	bl	80077dc <HAL_TIM_Base_Start_IT>
 8005918:	4603      	mov	r3, r0
 800591a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800591e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005922:	2b00      	cmp	r3, #0
 8005924:	d111      	bne.n	800594a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005926:	2036      	movs	r0, #54	@ 0x36
 8005928:	f000 f996 	bl	8005c58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b0f      	cmp	r3, #15
 8005930:	d808      	bhi.n	8005944 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005932:	2200      	movs	r2, #0
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	2036      	movs	r0, #54	@ 0x36
 8005938:	f000 f972 	bl	8005c20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800593c:	4a0a      	ldr	r2, [pc, #40]	@ (8005968 <HAL_InitTick+0xf0>)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	e002      	b.n	800594a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800594a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800594e:	4618      	mov	r0, r3
 8005950:	3738      	adds	r7, #56	@ 0x38
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	40021000 	.word	0x40021000
 800595c:	431bde83 	.word	0x431bde83
 8005960:	200000b8 	.word	0x200000b8
 8005964:	40001000 	.word	0x40001000
 8005968:	20000004 	.word	0x20000004

0800596c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005970:	bf00      	nop
 8005972:	e7fd      	b.n	8005970 <NMI_Handler+0x4>

08005974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005978:	bf00      	nop
 800597a:	e7fd      	b.n	8005978 <HardFault_Handler+0x4>

0800597c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005980:	bf00      	nop
 8005982:	e7fd      	b.n	8005980 <MemManage_Handler+0x4>

08005984 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005988:	bf00      	nop
 800598a:	e7fd      	b.n	8005988 <BusFault_Handler+0x4>

0800598c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005990:	bf00      	nop
 8005992:	e7fd      	b.n	8005990 <UsageFault_Handler+0x4>

08005994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005998:	bf00      	nop
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 80059a6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80059aa:	f000 fb3f 	bl	800602c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80059ae:	bf00      	nop
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80059b8:	4802      	ldr	r0, [pc, #8]	@ (80059c4 <TIM6_DAC_IRQHandler+0x10>)
 80059ba:	f001 ff7f 	bl	80078bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80059be:	bf00      	nop
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	200000b8 	.word	0x200000b8

080059c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80059cc:	4b06      	ldr	r3, [pc, #24]	@ (80059e8 <SystemInit+0x20>)
 80059ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d2:	4a05      	ldr	r2, [pc, #20]	@ (80059e8 <SystemInit+0x20>)
 80059d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80059dc:	bf00      	nop
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	e000ed00 	.word	0xe000ed00

080059ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80059ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005a24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80059f0:	f7ff ffea 	bl	80059c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80059f4:	480c      	ldr	r0, [pc, #48]	@ (8005a28 <LoopForever+0x6>)
  ldr r1, =_edata
 80059f6:	490d      	ldr	r1, [pc, #52]	@ (8005a2c <LoopForever+0xa>)
  ldr r2, =_sidata
 80059f8:	4a0d      	ldr	r2, [pc, #52]	@ (8005a30 <LoopForever+0xe>)
  movs r3, #0
 80059fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059fc:	e002      	b.n	8005a04 <LoopCopyDataInit>

080059fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a02:	3304      	adds	r3, #4

08005a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a08:	d3f9      	bcc.n	80059fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005a34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005a0c:	4c0a      	ldr	r4, [pc, #40]	@ (8005a38 <LoopForever+0x16>)
  movs r3, #0
 8005a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a10:	e001      	b.n	8005a16 <LoopFillZerobss>

08005a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a14:	3204      	adds	r2, #4

08005a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a18:	d3fb      	bcc.n	8005a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005a1a:	f005 fc35 	bl	800b288 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005a1e:	f7ff fd77 	bl	8005510 <main>

08005a22 <LoopForever>:

LoopForever:
    b LoopForever
 8005a22:	e7fe      	b.n	8005a22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005a24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8005a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a2c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8005a30:	0800b3a4 	.word	0x0800b3a4
  ldr r2, =_sbss
 8005a34:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8005a38:	20001a10 	.word	0x20001a10

08005a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005a3c:	e7fe      	b.n	8005a3c <ADC1_2_IRQHandler>

08005a3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a48:	2003      	movs	r0, #3
 8005a4a:	f000 f8de 	bl	8005c0a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a4e:	200f      	movs	r0, #15
 8005a50:	f7ff ff12 	bl	8005878 <HAL_InitTick>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	71fb      	strb	r3, [r7, #7]
 8005a5e:	e001      	b.n	8005a64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005a60:	f7ff fe86 	bl	8005770 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005a64:	79fb      	ldrb	r3, [r7, #7]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
	...

08005a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005a74:	4b06      	ldr	r3, [pc, #24]	@ (8005a90 <HAL_IncTick+0x20>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4b06      	ldr	r3, [pc, #24]	@ (8005a94 <HAL_IncTick+0x24>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4413      	add	r3, r2
 8005a80:	4a04      	ldr	r2, [pc, #16]	@ (8005a94 <HAL_IncTick+0x24>)
 8005a82:	6013      	str	r3, [r2, #0]
}
 8005a84:	bf00      	nop
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	20000008 	.word	0x20000008
 8005a94:	20000104 	.word	0x20000104

08005a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8005a9c:	4b03      	ldr	r3, [pc, #12]	@ (8005aac <HAL_GetTick+0x14>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	20000104 	.word	0x20000104

08005ab0 <__NVIC_SetPriorityGrouping>:
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8005af4 <__NVIC_SetPriorityGrouping+0x44>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005acc:	4013      	ands	r3, r2
 8005ace:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ad8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ae2:	4a04      	ldr	r2, [pc, #16]	@ (8005af4 <__NVIC_SetPriorityGrouping+0x44>)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	60d3      	str	r3, [r2, #12]
}
 8005ae8:	bf00      	nop
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	e000ed00 	.word	0xe000ed00

08005af8 <__NVIC_GetPriorityGrouping>:
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005afc:	4b04      	ldr	r3, [pc, #16]	@ (8005b10 <__NVIC_GetPriorityGrouping+0x18>)
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	0a1b      	lsrs	r3, r3, #8
 8005b02:	f003 0307 	and.w	r3, r3, #7
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	e000ed00 	.word	0xe000ed00

08005b14 <__NVIC_EnableIRQ>:
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	db0b      	blt.n	8005b3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b26:	79fb      	ldrb	r3, [r7, #7]
 8005b28:	f003 021f 	and.w	r2, r3, #31
 8005b2c:	4907      	ldr	r1, [pc, #28]	@ (8005b4c <__NVIC_EnableIRQ+0x38>)
 8005b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	2001      	movs	r0, #1
 8005b36:	fa00 f202 	lsl.w	r2, r0, r2
 8005b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005b3e:	bf00      	nop
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	e000e100 	.word	0xe000e100

08005b50 <__NVIC_SetPriority>:
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	4603      	mov	r3, r0
 8005b58:	6039      	str	r1, [r7, #0]
 8005b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	db0a      	blt.n	8005b7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	490c      	ldr	r1, [pc, #48]	@ (8005b9c <__NVIC_SetPriority+0x4c>)
 8005b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b6e:	0112      	lsls	r2, r2, #4
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	440b      	add	r3, r1
 8005b74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005b78:	e00a      	b.n	8005b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	4908      	ldr	r1, [pc, #32]	@ (8005ba0 <__NVIC_SetPriority+0x50>)
 8005b80:	79fb      	ldrb	r3, [r7, #7]
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	3b04      	subs	r3, #4
 8005b88:	0112      	lsls	r2, r2, #4
 8005b8a:	b2d2      	uxtb	r2, r2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	761a      	strb	r2, [r3, #24]
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	e000e100 	.word	0xe000e100
 8005ba0:	e000ed00 	.word	0xe000ed00

08005ba4 <NVIC_EncodePriority>:
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b089      	sub	sp, #36	@ 0x24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	f1c3 0307 	rsb	r3, r3, #7
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	bf28      	it	cs
 8005bc2:	2304      	movcs	r3, #4
 8005bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	3304      	adds	r3, #4
 8005bca:	2b06      	cmp	r3, #6
 8005bcc:	d902      	bls.n	8005bd4 <NVIC_EncodePriority+0x30>
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	3b03      	subs	r3, #3
 8005bd2:	e000      	b.n	8005bd6 <NVIC_EncodePriority+0x32>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	43da      	mvns	r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	401a      	ands	r2, r3
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bec:	f04f 31ff 	mov.w	r1, #4294967295
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf6:	43d9      	mvns	r1, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bfc:	4313      	orrs	r3, r2
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3724      	adds	r7, #36	@ 0x24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b082      	sub	sp, #8
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7ff ff4c 	bl	8005ab0 <__NVIC_SetPriorityGrouping>
}
 8005c18:	bf00      	nop
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	4603      	mov	r3, r0
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c32:	f7ff ff61 	bl	8005af8 <__NVIC_GetPriorityGrouping>
 8005c36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	68b9      	ldr	r1, [r7, #8]
 8005c3c:	6978      	ldr	r0, [r7, #20]
 8005c3e:	f7ff ffb1 	bl	8005ba4 <NVIC_EncodePriority>
 8005c42:	4602      	mov	r2, r0
 8005c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c48:	4611      	mov	r1, r2
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff ff80 	bl	8005b50 <__NVIC_SetPriority>
}
 8005c50:	bf00      	nop
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4603      	mov	r3, r0
 8005c60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff ff54 	bl	8005b14 <__NVIC_EnableIRQ>
}
 8005c6c:	bf00      	nop
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c82:	e17f      	b.n	8005f84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	2101      	movs	r1, #1
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c90:	4013      	ands	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 8171 	beq.w	8005f7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d005      	beq.n	8005cb4 <HAL_GPIO_Init+0x40>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f003 0303 	and.w	r3, r3, #3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d130      	bne.n	8005d16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cea:	2201      	movs	r2, #1
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	43db      	mvns	r3, r3
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	091b      	lsrs	r3, r3, #4
 8005d00:	f003 0201 	and.w	r2, r3, #1
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	2b03      	cmp	r3, #3
 8005d20:	d118      	bne.n	8005d54 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005d28:	2201      	movs	r2, #1
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d30:	43db      	mvns	r3, r3
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	4013      	ands	r3, r2
 8005d36:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	08db      	lsrs	r3, r3, #3
 8005d3e:	f003 0201 	and.w	r2, r3, #1
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f003 0303 	and.w	r3, r3, #3
 8005d5c:	2b03      	cmp	r3, #3
 8005d5e:	d017      	beq.n	8005d90 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	2203      	movs	r2, #3
 8005d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d70:	43db      	mvns	r3, r3
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4013      	ands	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f003 0303 	and.w	r3, r3, #3
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d123      	bne.n	8005de4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	08da      	lsrs	r2, r3, #3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3208      	adds	r2, #8
 8005da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f003 0307 	and.w	r3, r3, #7
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	220f      	movs	r2, #15
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	43db      	mvns	r3, r3
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	08da      	lsrs	r2, r3, #3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3208      	adds	r2, #8
 8005dde:	6939      	ldr	r1, [r7, #16]
 8005de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	2203      	movs	r2, #3
 8005df0:	fa02 f303 	lsl.w	r3, r2, r3
 8005df4:	43db      	mvns	r3, r3
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f003 0203 	and.w	r2, r3, #3
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80ac 	beq.w	8005f7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e26:	4b5f      	ldr	r3, [pc, #380]	@ (8005fa4 <HAL_GPIO_Init+0x330>)
 8005e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e2a:	4a5e      	ldr	r2, [pc, #376]	@ (8005fa4 <HAL_GPIO_Init+0x330>)
 8005e2c:	f043 0301 	orr.w	r3, r3, #1
 8005e30:	6613      	str	r3, [r2, #96]	@ 0x60
 8005e32:	4b5c      	ldr	r3, [pc, #368]	@ (8005fa4 <HAL_GPIO_Init+0x330>)
 8005e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	60bb      	str	r3, [r7, #8]
 8005e3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005e3e:	4a5a      	ldr	r2, [pc, #360]	@ (8005fa8 <HAL_GPIO_Init+0x334>)
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	089b      	lsrs	r3, r3, #2
 8005e44:	3302      	adds	r3, #2
 8005e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f003 0303 	and.w	r3, r3, #3
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	220f      	movs	r2, #15
 8005e56:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5a:	43db      	mvns	r3, r3
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005e68:	d025      	beq.n	8005eb6 <HAL_GPIO_Init+0x242>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a4f      	ldr	r2, [pc, #316]	@ (8005fac <HAL_GPIO_Init+0x338>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d01f      	beq.n	8005eb2 <HAL_GPIO_Init+0x23e>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a4e      	ldr	r2, [pc, #312]	@ (8005fb0 <HAL_GPIO_Init+0x33c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d019      	beq.n	8005eae <HAL_GPIO_Init+0x23a>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a4d      	ldr	r2, [pc, #308]	@ (8005fb4 <HAL_GPIO_Init+0x340>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d013      	beq.n	8005eaa <HAL_GPIO_Init+0x236>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a4c      	ldr	r2, [pc, #304]	@ (8005fb8 <HAL_GPIO_Init+0x344>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00d      	beq.n	8005ea6 <HAL_GPIO_Init+0x232>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a4b      	ldr	r2, [pc, #300]	@ (8005fbc <HAL_GPIO_Init+0x348>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d007      	beq.n	8005ea2 <HAL_GPIO_Init+0x22e>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a4a      	ldr	r2, [pc, #296]	@ (8005fc0 <HAL_GPIO_Init+0x34c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d101      	bne.n	8005e9e <HAL_GPIO_Init+0x22a>
 8005e9a:	2306      	movs	r3, #6
 8005e9c:	e00c      	b.n	8005eb8 <HAL_GPIO_Init+0x244>
 8005e9e:	2307      	movs	r3, #7
 8005ea0:	e00a      	b.n	8005eb8 <HAL_GPIO_Init+0x244>
 8005ea2:	2305      	movs	r3, #5
 8005ea4:	e008      	b.n	8005eb8 <HAL_GPIO_Init+0x244>
 8005ea6:	2304      	movs	r3, #4
 8005ea8:	e006      	b.n	8005eb8 <HAL_GPIO_Init+0x244>
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e004      	b.n	8005eb8 <HAL_GPIO_Init+0x244>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e002      	b.n	8005eb8 <HAL_GPIO_Init+0x244>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e000      	b.n	8005eb8 <HAL_GPIO_Init+0x244>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	f002 0203 	and.w	r2, r2, #3
 8005ebe:	0092      	lsls	r2, r2, #2
 8005ec0:	4093      	lsls	r3, r2
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005ec8:	4937      	ldr	r1, [pc, #220]	@ (8005fa8 <HAL_GPIO_Init+0x334>)
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	089b      	lsrs	r3, r3, #2
 8005ece:	3302      	adds	r3, #2
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8005fc4 <HAL_GPIO_Init+0x350>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	43db      	mvns	r3, r3
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005efa:	4a32      	ldr	r2, [pc, #200]	@ (8005fc4 <HAL_GPIO_Init+0x350>)
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f00:	4b30      	ldr	r3, [pc, #192]	@ (8005fc4 <HAL_GPIO_Init+0x350>)
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f24:	4a27      	ldr	r2, [pc, #156]	@ (8005fc4 <HAL_GPIO_Init+0x350>)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005f2a:	4b26      	ldr	r3, [pc, #152]	@ (8005fc4 <HAL_GPIO_Init+0x350>)
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	43db      	mvns	r3, r3
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4013      	ands	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f4e:	4a1d      	ldr	r2, [pc, #116]	@ (8005fc4 <HAL_GPIO_Init+0x350>)
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005f54:	4b1b      	ldr	r3, [pc, #108]	@ (8005fc4 <HAL_GPIO_Init+0x350>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4013      	ands	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f78:	4a12      	ldr	r2, [pc, #72]	@ (8005fc4 <HAL_GPIO_Init+0x350>)
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	3301      	adds	r3, #1
 8005f82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f47f ae78 	bne.w	8005c84 <HAL_GPIO_Init+0x10>
  }
}
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop
 8005f98:	371c      	adds	r7, #28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	40021000 	.word	0x40021000
 8005fa8:	40010000 	.word	0x40010000
 8005fac:	48000400 	.word	0x48000400
 8005fb0:	48000800 	.word	0x48000800
 8005fb4:	48000c00 	.word	0x48000c00
 8005fb8:	48001000 	.word	0x48001000
 8005fbc:	48001400 	.word	0x48001400
 8005fc0:	48001800 	.word	0x48001800
 8005fc4:	40010400 	.word	0x40010400

08005fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	807b      	strh	r3, [r7, #2]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fd8:	787b      	ldrb	r3, [r7, #1]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005fde:	887a      	ldrh	r2, [r7, #2]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005fe4:	e002      	b.n	8005fec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005fe6:	887a      	ldrh	r2, [r7, #2]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800600a:	887a      	ldrh	r2, [r7, #2]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4013      	ands	r3, r2
 8006010:	041a      	lsls	r2, r3, #16
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	43d9      	mvns	r1, r3
 8006016:	887b      	ldrh	r3, [r7, #2]
 8006018:	400b      	ands	r3, r1
 800601a:	431a      	orrs	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	619a      	str	r2, [r3, #24]
}
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	4603      	mov	r3, r0
 8006034:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006036:	4b08      	ldr	r3, [pc, #32]	@ (8006058 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006038:	695a      	ldr	r2, [r3, #20]
 800603a:	88fb      	ldrh	r3, [r7, #6]
 800603c:	4013      	ands	r3, r2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d006      	beq.n	8006050 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006042:	4a05      	ldr	r2, [pc, #20]	@ (8006058 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006044:	88fb      	ldrh	r3, [r7, #6]
 8006046:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006048:	88fb      	ldrh	r3, [r7, #6]
 800604a:	4618      	mov	r0, r3
 800604c:	f000 f806 	bl	800605c <HAL_GPIO_EXTI_Callback>
  }
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	40010400 	.word	0x40010400

0800605c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	4603      	mov	r3, r0
 8006064:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006066:	bf00      	nop
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
	...

08006074 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006074:	b480      	push	{r7}
 8006076:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006078:	4b04      	ldr	r3, [pc, #16]	@ (800608c <HAL_PWREx_GetVoltageRange+0x18>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006080:	4618      	mov	r0, r3
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	40007000 	.word	0x40007000

08006090 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800609e:	d130      	bne.n	8006102 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80060a0:	4b23      	ldr	r3, [pc, #140]	@ (8006130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80060a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060ac:	d038      	beq.n	8006120 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80060ae:	4b20      	ldr	r3, [pc, #128]	@ (8006130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80060b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80060be:	4b1d      	ldr	r3, [pc, #116]	@ (8006134 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2232      	movs	r2, #50	@ 0x32
 80060c4:	fb02 f303 	mul.w	r3, r2, r3
 80060c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006138 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80060ca:	fba2 2303 	umull	r2, r3, r2, r3
 80060ce:	0c9b      	lsrs	r3, r3, #18
 80060d0:	3301      	adds	r3, #1
 80060d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060d4:	e002      	b.n	80060dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	3b01      	subs	r3, #1
 80060da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060dc:	4b14      	ldr	r3, [pc, #80]	@ (8006130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060e8:	d102      	bne.n	80060f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1f2      	bne.n	80060d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80060f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060fc:	d110      	bne.n	8006120 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e00f      	b.n	8006122 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006102:	4b0b      	ldr	r3, [pc, #44]	@ (8006130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800610a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800610e:	d007      	beq.n	8006120 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006110:	4b07      	ldr	r3, [pc, #28]	@ (8006130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006118:	4a05      	ldr	r2, [pc, #20]	@ (8006130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800611a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800611e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	40007000 	.word	0x40007000
 8006134:	20000000 	.word	0x20000000
 8006138:	431bde83 	.word	0x431bde83

0800613c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b088      	sub	sp, #32
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e3ca      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800614e:	4b97      	ldr	r3, [pc, #604]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f003 030c 	and.w	r3, r3, #12
 8006156:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006158:	4b94      	ldr	r3, [pc, #592]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	f003 0303 	and.w	r3, r3, #3
 8006160:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0310 	and.w	r3, r3, #16
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 80e4 	beq.w	8006338 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d007      	beq.n	8006186 <HAL_RCC_OscConfig+0x4a>
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	2b0c      	cmp	r3, #12
 800617a:	f040 808b 	bne.w	8006294 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2b01      	cmp	r3, #1
 8006182:	f040 8087 	bne.w	8006294 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006186:	4b89      	ldr	r3, [pc, #548]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d005      	beq.n	800619e <HAL_RCC_OscConfig+0x62>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e3a2      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1a      	ldr	r2, [r3, #32]
 80061a2:	4b82      	ldr	r3, [pc, #520]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0308 	and.w	r3, r3, #8
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d004      	beq.n	80061b8 <HAL_RCC_OscConfig+0x7c>
 80061ae:	4b7f      	ldr	r3, [pc, #508]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061b6:	e005      	b.n	80061c4 <HAL_RCC_OscConfig+0x88>
 80061b8:	4b7c      	ldr	r3, [pc, #496]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 80061ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061be:	091b      	lsrs	r3, r3, #4
 80061c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d223      	bcs.n	8006210 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 fd87 	bl	8006ce0 <RCC_SetFlashLatencyFromMSIRange>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e383      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061dc:	4b73      	ldr	r3, [pc, #460]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a72      	ldr	r2, [pc, #456]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 80061e2:	f043 0308 	orr.w	r3, r3, #8
 80061e6:	6013      	str	r3, [r2, #0]
 80061e8:	4b70      	ldr	r3, [pc, #448]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	496d      	ldr	r1, [pc, #436]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061fa:	4b6c      	ldr	r3, [pc, #432]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	021b      	lsls	r3, r3, #8
 8006208:	4968      	ldr	r1, [pc, #416]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 800620a:	4313      	orrs	r3, r2
 800620c:	604b      	str	r3, [r1, #4]
 800620e:	e025      	b.n	800625c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006210:	4b66      	ldr	r3, [pc, #408]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a65      	ldr	r2, [pc, #404]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 8006216:	f043 0308 	orr.w	r3, r3, #8
 800621a:	6013      	str	r3, [r2, #0]
 800621c:	4b63      	ldr	r3, [pc, #396]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	4960      	ldr	r1, [pc, #384]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 800622a:	4313      	orrs	r3, r2
 800622c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800622e:	4b5f      	ldr	r3, [pc, #380]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	021b      	lsls	r3, r3, #8
 800623c:	495b      	ldr	r1, [pc, #364]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 800623e:	4313      	orrs	r3, r2
 8006240:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d109      	bne.n	800625c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	4618      	mov	r0, r3
 800624e:	f000 fd47 	bl	8006ce0 <RCC_SetFlashLatencyFromMSIRange>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e343      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800625c:	f000 fc4a 	bl	8006af4 <HAL_RCC_GetSysClockFreq>
 8006260:	4602      	mov	r2, r0
 8006262:	4b52      	ldr	r3, [pc, #328]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	091b      	lsrs	r3, r3, #4
 8006268:	f003 030f 	and.w	r3, r3, #15
 800626c:	4950      	ldr	r1, [pc, #320]	@ (80063b0 <HAL_RCC_OscConfig+0x274>)
 800626e:	5ccb      	ldrb	r3, [r1, r3]
 8006270:	f003 031f 	and.w	r3, r3, #31
 8006274:	fa22 f303 	lsr.w	r3, r2, r3
 8006278:	4a4e      	ldr	r2, [pc, #312]	@ (80063b4 <HAL_RCC_OscConfig+0x278>)
 800627a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800627c:	4b4e      	ldr	r3, [pc, #312]	@ (80063b8 <HAL_RCC_OscConfig+0x27c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4618      	mov	r0, r3
 8006282:	f7ff faf9 	bl	8005878 <HAL_InitTick>
 8006286:	4603      	mov	r3, r0
 8006288:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d052      	beq.n	8006336 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006290:	7bfb      	ldrb	r3, [r7, #15]
 8006292:	e327      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d032      	beq.n	8006302 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800629c:	4b43      	ldr	r3, [pc, #268]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a42      	ldr	r2, [pc, #264]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 80062a2:	f043 0301 	orr.w	r3, r3, #1
 80062a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80062a8:	f7ff fbf6 	bl	8005a98 <HAL_GetTick>
 80062ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062b0:	f7ff fbf2 	bl	8005a98 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e310      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062c2:	4b3a      	ldr	r3, [pc, #232]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0f0      	beq.n	80062b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062ce:	4b37      	ldr	r3, [pc, #220]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a36      	ldr	r2, [pc, #216]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 80062d4:	f043 0308 	orr.w	r3, r3, #8
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	4b34      	ldr	r3, [pc, #208]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	4931      	ldr	r1, [pc, #196]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062ec:	4b2f      	ldr	r3, [pc, #188]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	021b      	lsls	r3, r3, #8
 80062fa:	492c      	ldr	r1, [pc, #176]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	604b      	str	r3, [r1, #4]
 8006300:	e01a      	b.n	8006338 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006302:	4b2a      	ldr	r3, [pc, #168]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a29      	ldr	r2, [pc, #164]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 8006308:	f023 0301 	bic.w	r3, r3, #1
 800630c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800630e:	f7ff fbc3 	bl	8005a98 <HAL_GetTick>
 8006312:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006314:	e008      	b.n	8006328 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006316:	f7ff fbbf 	bl	8005a98 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d901      	bls.n	8006328 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e2dd      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006328:	4b20      	ldr	r3, [pc, #128]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1f0      	bne.n	8006316 <HAL_RCC_OscConfig+0x1da>
 8006334:	e000      	b.n	8006338 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006336:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b00      	cmp	r3, #0
 8006342:	d074      	beq.n	800642e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	2b08      	cmp	r3, #8
 8006348:	d005      	beq.n	8006356 <HAL_RCC_OscConfig+0x21a>
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	2b0c      	cmp	r3, #12
 800634e:	d10e      	bne.n	800636e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	2b03      	cmp	r3, #3
 8006354:	d10b      	bne.n	800636e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006356:	4b15      	ldr	r3, [pc, #84]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d064      	beq.n	800642c <HAL_RCC_OscConfig+0x2f0>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d160      	bne.n	800642c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e2ba      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006376:	d106      	bne.n	8006386 <HAL_RCC_OscConfig+0x24a>
 8006378:	4b0c      	ldr	r3, [pc, #48]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a0b      	ldr	r2, [pc, #44]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 800637e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	e026      	b.n	80063d4 <HAL_RCC_OscConfig+0x298>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800638e:	d115      	bne.n	80063bc <HAL_RCC_OscConfig+0x280>
 8006390:	4b06      	ldr	r3, [pc, #24]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a05      	ldr	r2, [pc, #20]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 8006396:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	4b03      	ldr	r3, [pc, #12]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a02      	ldr	r2, [pc, #8]	@ (80063ac <HAL_RCC_OscConfig+0x270>)
 80063a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	e014      	b.n	80063d4 <HAL_RCC_OscConfig+0x298>
 80063aa:	bf00      	nop
 80063ac:	40021000 	.word	0x40021000
 80063b0:	0800b34c 	.word	0x0800b34c
 80063b4:	20000000 	.word	0x20000000
 80063b8:	20000004 	.word	0x20000004
 80063bc:	4ba0      	ldr	r3, [pc, #640]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a9f      	ldr	r2, [pc, #636]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 80063c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	4b9d      	ldr	r3, [pc, #628]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a9c      	ldr	r2, [pc, #624]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 80063ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d013      	beq.n	8006404 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063dc:	f7ff fb5c 	bl	8005a98 <HAL_GetTick>
 80063e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063e2:	e008      	b.n	80063f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063e4:	f7ff fb58 	bl	8005a98 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b64      	cmp	r3, #100	@ 0x64
 80063f0:	d901      	bls.n	80063f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e276      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063f6:	4b92      	ldr	r3, [pc, #584]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0f0      	beq.n	80063e4 <HAL_RCC_OscConfig+0x2a8>
 8006402:	e014      	b.n	800642e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006404:	f7ff fb48 	bl	8005a98 <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800640a:	e008      	b.n	800641e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800640c:	f7ff fb44 	bl	8005a98 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b64      	cmp	r3, #100	@ 0x64
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e262      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800641e:	4b88      	ldr	r3, [pc, #544]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1f0      	bne.n	800640c <HAL_RCC_OscConfig+0x2d0>
 800642a:	e000      	b.n	800642e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800642c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d060      	beq.n	80064fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	2b04      	cmp	r3, #4
 800643e:	d005      	beq.n	800644c <HAL_RCC_OscConfig+0x310>
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	2b0c      	cmp	r3, #12
 8006444:	d119      	bne.n	800647a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	2b02      	cmp	r3, #2
 800644a:	d116      	bne.n	800647a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800644c:	4b7c      	ldr	r3, [pc, #496]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <HAL_RCC_OscConfig+0x328>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e23f      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006464:	4b76      	ldr	r3, [pc, #472]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	061b      	lsls	r3, r3, #24
 8006472:	4973      	ldr	r1, [pc, #460]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 8006474:	4313      	orrs	r3, r2
 8006476:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006478:	e040      	b.n	80064fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d023      	beq.n	80064ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006482:	4b6f      	ldr	r3, [pc, #444]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a6e      	ldr	r2, [pc, #440]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 8006488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800648c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648e:	f7ff fb03 	bl	8005a98 <HAL_GetTick>
 8006492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006494:	e008      	b.n	80064a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006496:	f7ff faff 	bl	8005a98 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d901      	bls.n	80064a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e21d      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064a8:	4b65      	ldr	r3, [pc, #404]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d0f0      	beq.n	8006496 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064b4:	4b62      	ldr	r3, [pc, #392]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	061b      	lsls	r3, r3, #24
 80064c2:	495f      	ldr	r1, [pc, #380]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	604b      	str	r3, [r1, #4]
 80064c8:	e018      	b.n	80064fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064ca:	4b5d      	ldr	r3, [pc, #372]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a5c      	ldr	r2, [pc, #368]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 80064d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d6:	f7ff fadf 	bl	8005a98 <HAL_GetTick>
 80064da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064dc:	e008      	b.n	80064f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064de:	f7ff fadb 	bl	8005a98 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d901      	bls.n	80064f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e1f9      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064f0:	4b53      	ldr	r3, [pc, #332]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1f0      	bne.n	80064de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0308 	and.w	r3, r3, #8
 8006504:	2b00      	cmp	r3, #0
 8006506:	d03c      	beq.n	8006582 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d01c      	beq.n	800654a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006510:	4b4b      	ldr	r3, [pc, #300]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 8006512:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006516:	4a4a      	ldr	r2, [pc, #296]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 8006518:	f043 0301 	orr.w	r3, r3, #1
 800651c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006520:	f7ff faba 	bl	8005a98 <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006528:	f7ff fab6 	bl	8005a98 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e1d4      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800653a:	4b41      	ldr	r3, [pc, #260]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 800653c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d0ef      	beq.n	8006528 <HAL_RCC_OscConfig+0x3ec>
 8006548:	e01b      	b.n	8006582 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800654a:	4b3d      	ldr	r3, [pc, #244]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 800654c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006550:	4a3b      	ldr	r2, [pc, #236]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 8006552:	f023 0301 	bic.w	r3, r3, #1
 8006556:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800655a:	f7ff fa9d 	bl	8005a98 <HAL_GetTick>
 800655e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006560:	e008      	b.n	8006574 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006562:	f7ff fa99 	bl	8005a98 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d901      	bls.n	8006574 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e1b7      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006574:	4b32      	ldr	r3, [pc, #200]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 8006576:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1ef      	bne.n	8006562 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0304 	and.w	r3, r3, #4
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 80a6 	beq.w	80066dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006590:	2300      	movs	r3, #0
 8006592:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006594:	4b2a      	ldr	r3, [pc, #168]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 8006596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10d      	bne.n	80065bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065a0:	4b27      	ldr	r3, [pc, #156]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 80065a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065a4:	4a26      	ldr	r2, [pc, #152]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 80065a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80065ac:	4b24      	ldr	r3, [pc, #144]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 80065ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065b4:	60bb      	str	r3, [r7, #8]
 80065b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065b8:	2301      	movs	r3, #1
 80065ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065bc:	4b21      	ldr	r3, [pc, #132]	@ (8006644 <HAL_RCC_OscConfig+0x508>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d118      	bne.n	80065fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065c8:	4b1e      	ldr	r3, [pc, #120]	@ (8006644 <HAL_RCC_OscConfig+0x508>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006644 <HAL_RCC_OscConfig+0x508>)
 80065ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065d4:	f7ff fa60 	bl	8005a98 <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065dc:	f7ff fa5c 	bl	8005a98 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e17a      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065ee:	4b15      	ldr	r3, [pc, #84]	@ (8006644 <HAL_RCC_OscConfig+0x508>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0f0      	beq.n	80065dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d108      	bne.n	8006614 <HAL_RCC_OscConfig+0x4d8>
 8006602:	4b0f      	ldr	r3, [pc, #60]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 8006604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006608:	4a0d      	ldr	r2, [pc, #52]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 800660a:	f043 0301 	orr.w	r3, r3, #1
 800660e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006612:	e029      	b.n	8006668 <HAL_RCC_OscConfig+0x52c>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	2b05      	cmp	r3, #5
 800661a:	d115      	bne.n	8006648 <HAL_RCC_OscConfig+0x50c>
 800661c:	4b08      	ldr	r3, [pc, #32]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 800661e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006622:	4a07      	ldr	r2, [pc, #28]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 8006624:	f043 0304 	orr.w	r3, r3, #4
 8006628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800662c:	4b04      	ldr	r3, [pc, #16]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 800662e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006632:	4a03      	ldr	r2, [pc, #12]	@ (8006640 <HAL_RCC_OscConfig+0x504>)
 8006634:	f043 0301 	orr.w	r3, r3, #1
 8006638:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800663c:	e014      	b.n	8006668 <HAL_RCC_OscConfig+0x52c>
 800663e:	bf00      	nop
 8006640:	40021000 	.word	0x40021000
 8006644:	40007000 	.word	0x40007000
 8006648:	4b9c      	ldr	r3, [pc, #624]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 800664a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800664e:	4a9b      	ldr	r2, [pc, #620]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 8006650:	f023 0301 	bic.w	r3, r3, #1
 8006654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006658:	4b98      	ldr	r3, [pc, #608]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 800665a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800665e:	4a97      	ldr	r2, [pc, #604]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 8006660:	f023 0304 	bic.w	r3, r3, #4
 8006664:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d016      	beq.n	800669e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006670:	f7ff fa12 	bl	8005a98 <HAL_GetTick>
 8006674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006676:	e00a      	b.n	800668e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006678:	f7ff fa0e 	bl	8005a98 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006686:	4293      	cmp	r3, r2
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e12a      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800668e:	4b8b      	ldr	r3, [pc, #556]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 8006690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0ed      	beq.n	8006678 <HAL_RCC_OscConfig+0x53c>
 800669c:	e015      	b.n	80066ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800669e:	f7ff f9fb 	bl	8005a98 <HAL_GetTick>
 80066a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066a4:	e00a      	b.n	80066bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066a6:	f7ff f9f7 	bl	8005a98 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d901      	bls.n	80066bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e113      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066bc:	4b7f      	ldr	r3, [pc, #508]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 80066be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1ed      	bne.n	80066a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066ca:	7ffb      	ldrb	r3, [r7, #31]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d105      	bne.n	80066dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066d0:	4b7a      	ldr	r3, [pc, #488]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 80066d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066d4:	4a79      	ldr	r2, [pc, #484]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 80066d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066da:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 80fe 	beq.w	80068e2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	f040 80d0 	bne.w	8006890 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80066f0:	4b72      	ldr	r3, [pc, #456]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f003 0203 	and.w	r2, r3, #3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006700:	429a      	cmp	r2, r3
 8006702:	d130      	bne.n	8006766 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800670e:	3b01      	subs	r3, #1
 8006710:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006712:	429a      	cmp	r2, r3
 8006714:	d127      	bne.n	8006766 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006720:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006722:	429a      	cmp	r2, r3
 8006724:	d11f      	bne.n	8006766 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006730:	2a07      	cmp	r2, #7
 8006732:	bf14      	ite	ne
 8006734:	2201      	movne	r2, #1
 8006736:	2200      	moveq	r2, #0
 8006738:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800673a:	4293      	cmp	r3, r2
 800673c:	d113      	bne.n	8006766 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006748:	085b      	lsrs	r3, r3, #1
 800674a:	3b01      	subs	r3, #1
 800674c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800674e:	429a      	cmp	r2, r3
 8006750:	d109      	bne.n	8006766 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800675c:	085b      	lsrs	r3, r3, #1
 800675e:	3b01      	subs	r3, #1
 8006760:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006762:	429a      	cmp	r2, r3
 8006764:	d06e      	beq.n	8006844 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	2b0c      	cmp	r3, #12
 800676a:	d069      	beq.n	8006840 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800676c:	4b53      	ldr	r3, [pc, #332]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d105      	bne.n	8006784 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006778:	4b50      	ldr	r3, [pc, #320]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e0ad      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006788:	4b4c      	ldr	r3, [pc, #304]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a4b      	ldr	r2, [pc, #300]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 800678e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006792:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006794:	f7ff f980 	bl	8005a98 <HAL_GetTick>
 8006798:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800679a:	e008      	b.n	80067ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800679c:	f7ff f97c 	bl	8005a98 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e09a      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067ae:	4b43      	ldr	r3, [pc, #268]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1f0      	bne.n	800679c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067ba:	4b40      	ldr	r3, [pc, #256]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	4b40      	ldr	r3, [pc, #256]	@ (80068c0 <HAL_RCC_OscConfig+0x784>)
 80067c0:	4013      	ands	r3, r2
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80067ca:	3a01      	subs	r2, #1
 80067cc:	0112      	lsls	r2, r2, #4
 80067ce:	4311      	orrs	r1, r2
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80067d4:	0212      	lsls	r2, r2, #8
 80067d6:	4311      	orrs	r1, r2
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80067dc:	0852      	lsrs	r2, r2, #1
 80067de:	3a01      	subs	r2, #1
 80067e0:	0552      	lsls	r2, r2, #21
 80067e2:	4311      	orrs	r1, r2
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80067e8:	0852      	lsrs	r2, r2, #1
 80067ea:	3a01      	subs	r2, #1
 80067ec:	0652      	lsls	r2, r2, #25
 80067ee:	4311      	orrs	r1, r2
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80067f4:	0912      	lsrs	r2, r2, #4
 80067f6:	0452      	lsls	r2, r2, #17
 80067f8:	430a      	orrs	r2, r1
 80067fa:	4930      	ldr	r1, [pc, #192]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006800:	4b2e      	ldr	r3, [pc, #184]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a2d      	ldr	r2, [pc, #180]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 8006806:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800680a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800680c:	4b2b      	ldr	r3, [pc, #172]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	4a2a      	ldr	r2, [pc, #168]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 8006812:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006816:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006818:	f7ff f93e 	bl	8005a98 <HAL_GetTick>
 800681c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006820:	f7ff f93a 	bl	8005a98 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e058      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006832:	4b22      	ldr	r3, [pc, #136]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0f0      	beq.n	8006820 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800683e:	e050      	b.n	80068e2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e04f      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006844:	4b1d      	ldr	r3, [pc, #116]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d148      	bne.n	80068e2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006850:	4b1a      	ldr	r3, [pc, #104]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a19      	ldr	r2, [pc, #100]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 8006856:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800685a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800685c:	4b17      	ldr	r3, [pc, #92]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	4a16      	ldr	r2, [pc, #88]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 8006862:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006866:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006868:	f7ff f916 	bl	8005a98 <HAL_GetTick>
 800686c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800686e:	e008      	b.n	8006882 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006870:	f7ff f912 	bl	8005a98 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b02      	cmp	r3, #2
 800687c:	d901      	bls.n	8006882 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e030      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006882:	4b0e      	ldr	r3, [pc, #56]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0f0      	beq.n	8006870 <HAL_RCC_OscConfig+0x734>
 800688e:	e028      	b.n	80068e2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	2b0c      	cmp	r3, #12
 8006894:	d023      	beq.n	80068de <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006896:	4b09      	ldr	r3, [pc, #36]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a08      	ldr	r2, [pc, #32]	@ (80068bc <HAL_RCC_OscConfig+0x780>)
 800689c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a2:	f7ff f8f9 	bl	8005a98 <HAL_GetTick>
 80068a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068a8:	e00c      	b.n	80068c4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068aa:	f7ff f8f5 	bl	8005a98 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d905      	bls.n	80068c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e013      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
 80068bc:	40021000 	.word	0x40021000
 80068c0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068c4:	4b09      	ldr	r3, [pc, #36]	@ (80068ec <HAL_RCC_OscConfig+0x7b0>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1ec      	bne.n	80068aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80068d0:	4b06      	ldr	r3, [pc, #24]	@ (80068ec <HAL_RCC_OscConfig+0x7b0>)
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	4905      	ldr	r1, [pc, #20]	@ (80068ec <HAL_RCC_OscConfig+0x7b0>)
 80068d6:	4b06      	ldr	r3, [pc, #24]	@ (80068f0 <HAL_RCC_OscConfig+0x7b4>)
 80068d8:	4013      	ands	r3, r2
 80068da:	60cb      	str	r3, [r1, #12]
 80068dc:	e001      	b.n	80068e2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e000      	b.n	80068e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3720      	adds	r7, #32
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	40021000 	.word	0x40021000
 80068f0:	feeefffc 	.word	0xfeeefffc

080068f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e0e7      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006908:	4b75      	ldr	r3, [pc, #468]	@ (8006ae0 <HAL_RCC_ClockConfig+0x1ec>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	683a      	ldr	r2, [r7, #0]
 8006912:	429a      	cmp	r2, r3
 8006914:	d910      	bls.n	8006938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006916:	4b72      	ldr	r3, [pc, #456]	@ (8006ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f023 0207 	bic.w	r2, r3, #7
 800691e:	4970      	ldr	r1, [pc, #448]	@ (8006ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	4313      	orrs	r3, r2
 8006924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006926:	4b6e      	ldr	r3, [pc, #440]	@ (8006ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0307 	and.w	r3, r3, #7
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	429a      	cmp	r2, r3
 8006932:	d001      	beq.n	8006938 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e0cf      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d010      	beq.n	8006966 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689a      	ldr	r2, [r3, #8]
 8006948:	4b66      	ldr	r3, [pc, #408]	@ (8006ae4 <HAL_RCC_ClockConfig+0x1f0>)
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006950:	429a      	cmp	r2, r3
 8006952:	d908      	bls.n	8006966 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006954:	4b63      	ldr	r3, [pc, #396]	@ (8006ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	4960      	ldr	r1, [pc, #384]	@ (8006ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8006962:	4313      	orrs	r3, r2
 8006964:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d04c      	beq.n	8006a0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2b03      	cmp	r3, #3
 8006978:	d107      	bne.n	800698a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800697a:	4b5a      	ldr	r3, [pc, #360]	@ (8006ae4 <HAL_RCC_ClockConfig+0x1f0>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d121      	bne.n	80069ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e0a6      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	2b02      	cmp	r3, #2
 8006990:	d107      	bne.n	80069a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006992:	4b54      	ldr	r3, [pc, #336]	@ (8006ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d115      	bne.n	80069ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e09a      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d107      	bne.n	80069ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80069aa:	4b4e      	ldr	r3, [pc, #312]	@ (8006ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d109      	bne.n	80069ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e08e      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069ba:	4b4a      	ldr	r3, [pc, #296]	@ (8006ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e086      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069ca:	4b46      	ldr	r3, [pc, #280]	@ (8006ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f023 0203 	bic.w	r2, r3, #3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	4943      	ldr	r1, [pc, #268]	@ (8006ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069dc:	f7ff f85c 	bl	8005a98 <HAL_GetTick>
 80069e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069e2:	e00a      	b.n	80069fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069e4:	f7ff f858 	bl	8005a98 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e06e      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069fa:	4b3a      	ldr	r3, [pc, #232]	@ (8006ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 020c 	and.w	r2, r3, #12
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d1eb      	bne.n	80069e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0302 	and.w	r3, r3, #2
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d010      	beq.n	8006a3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689a      	ldr	r2, [r3, #8]
 8006a1c:	4b31      	ldr	r3, [pc, #196]	@ (8006ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d208      	bcs.n	8006a3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a28:	4b2e      	ldr	r3, [pc, #184]	@ (8006ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	492b      	ldr	r1, [pc, #172]	@ (8006ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a3a:	4b29      	ldr	r3, [pc, #164]	@ (8006ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0307 	and.w	r3, r3, #7
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d210      	bcs.n	8006a6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a48:	4b25      	ldr	r3, [pc, #148]	@ (8006ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f023 0207 	bic.w	r2, r3, #7
 8006a50:	4923      	ldr	r1, [pc, #140]	@ (8006ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a58:	4b21      	ldr	r3, [pc, #132]	@ (8006ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0307 	and.w	r3, r3, #7
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d001      	beq.n	8006a6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e036      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0304 	and.w	r3, r3, #4
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d008      	beq.n	8006a88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a76:	4b1b      	ldr	r3, [pc, #108]	@ (8006ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	4918      	ldr	r1, [pc, #96]	@ (8006ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0308 	and.w	r3, r3, #8
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d009      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a94:	4b13      	ldr	r3, [pc, #76]	@ (8006ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	4910      	ldr	r1, [pc, #64]	@ (8006ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006aa8:	f000 f824 	bl	8006af4 <HAL_RCC_GetSysClockFreq>
 8006aac:	4602      	mov	r2, r0
 8006aae:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	091b      	lsrs	r3, r3, #4
 8006ab4:	f003 030f 	and.w	r3, r3, #15
 8006ab8:	490b      	ldr	r1, [pc, #44]	@ (8006ae8 <HAL_RCC_ClockConfig+0x1f4>)
 8006aba:	5ccb      	ldrb	r3, [r1, r3]
 8006abc:	f003 031f 	and.w	r3, r3, #31
 8006ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac4:	4a09      	ldr	r2, [pc, #36]	@ (8006aec <HAL_RCC_ClockConfig+0x1f8>)
 8006ac6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006ac8:	4b09      	ldr	r3, [pc, #36]	@ (8006af0 <HAL_RCC_ClockConfig+0x1fc>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7fe fed3 	bl	8005878 <HAL_InitTick>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	72fb      	strb	r3, [r7, #11]

  return status;
 8006ad6:	7afb      	ldrb	r3, [r7, #11]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	40022000 	.word	0x40022000
 8006ae4:	40021000 	.word	0x40021000
 8006ae8:	0800b34c 	.word	0x0800b34c
 8006aec:	20000000 	.word	0x20000000
 8006af0:	20000004 	.word	0x20000004

08006af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b089      	sub	sp, #36	@ 0x24
 8006af8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	61fb      	str	r3, [r7, #28]
 8006afe:	2300      	movs	r3, #0
 8006b00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b02:	4b3e      	ldr	r3, [pc, #248]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f003 030c 	and.w	r3, r3, #12
 8006b0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f003 0303 	and.w	r3, r3, #3
 8006b14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d005      	beq.n	8006b28 <HAL_RCC_GetSysClockFreq+0x34>
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	2b0c      	cmp	r3, #12
 8006b20:	d121      	bne.n	8006b66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d11e      	bne.n	8006b66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006b28:	4b34      	ldr	r3, [pc, #208]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0308 	and.w	r3, r3, #8
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d107      	bne.n	8006b44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006b34:	4b31      	ldr	r3, [pc, #196]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8006b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b3a:	0a1b      	lsrs	r3, r3, #8
 8006b3c:	f003 030f 	and.w	r3, r3, #15
 8006b40:	61fb      	str	r3, [r7, #28]
 8006b42:	e005      	b.n	8006b50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006b44:	4b2d      	ldr	r3, [pc, #180]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	091b      	lsrs	r3, r3, #4
 8006b4a:	f003 030f 	and.w	r3, r3, #15
 8006b4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006b50:	4a2b      	ldr	r2, [pc, #172]	@ (8006c00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10d      	bne.n	8006b7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b64:	e00a      	b.n	8006b7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	d102      	bne.n	8006b72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006b6c:	4b25      	ldr	r3, [pc, #148]	@ (8006c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8006b6e:	61bb      	str	r3, [r7, #24]
 8006b70:	e004      	b.n	8006b7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	d101      	bne.n	8006b7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b78:	4b23      	ldr	r3, [pc, #140]	@ (8006c08 <HAL_RCC_GetSysClockFreq+0x114>)
 8006b7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	2b0c      	cmp	r3, #12
 8006b80:	d134      	bne.n	8006bec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b82:	4b1e      	ldr	r3, [pc, #120]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d003      	beq.n	8006b9a <HAL_RCC_GetSysClockFreq+0xa6>
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	d003      	beq.n	8006ba0 <HAL_RCC_GetSysClockFreq+0xac>
 8006b98:	e005      	b.n	8006ba6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8006c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8006b9c:	617b      	str	r3, [r7, #20]
      break;
 8006b9e:	e005      	b.n	8006bac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006ba0:	4b19      	ldr	r3, [pc, #100]	@ (8006c08 <HAL_RCC_GetSysClockFreq+0x114>)
 8006ba2:	617b      	str	r3, [r7, #20]
      break;
 8006ba4:	e002      	b.n	8006bac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	617b      	str	r3, [r7, #20]
      break;
 8006baa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006bac:	4b13      	ldr	r3, [pc, #76]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	091b      	lsrs	r3, r3, #4
 8006bb2:	f003 0307 	and.w	r3, r3, #7
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006bba:	4b10      	ldr	r3, [pc, #64]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	0a1b      	lsrs	r3, r3, #8
 8006bc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	fb03 f202 	mul.w	r2, r3, r2
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	0e5b      	lsrs	r3, r3, #25
 8006bd8:	f003 0303 	and.w	r3, r3, #3
 8006bdc:	3301      	adds	r3, #1
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006bec:	69bb      	ldr	r3, [r7, #24]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3724      	adds	r7, #36	@ 0x24
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	40021000 	.word	0x40021000
 8006c00:	0800b364 	.word	0x0800b364
 8006c04:	00f42400 	.word	0x00f42400
 8006c08:	007a1200 	.word	0x007a1200

08006c0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c10:	4b03      	ldr	r3, [pc, #12]	@ (8006c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c12:	681b      	ldr	r3, [r3, #0]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	20000000 	.word	0x20000000

08006c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006c28:	f7ff fff0 	bl	8006c0c <HAL_RCC_GetHCLKFreq>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	4b06      	ldr	r3, [pc, #24]	@ (8006c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	0a1b      	lsrs	r3, r3, #8
 8006c34:	f003 0307 	and.w	r3, r3, #7
 8006c38:	4904      	ldr	r1, [pc, #16]	@ (8006c4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c3a:	5ccb      	ldrb	r3, [r1, r3]
 8006c3c:	f003 031f 	and.w	r3, r3, #31
 8006c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	40021000 	.word	0x40021000
 8006c4c:	0800b35c 	.word	0x0800b35c

08006c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006c54:	f7ff ffda 	bl	8006c0c <HAL_RCC_GetHCLKFreq>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	4b06      	ldr	r3, [pc, #24]	@ (8006c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	0adb      	lsrs	r3, r3, #11
 8006c60:	f003 0307 	and.w	r3, r3, #7
 8006c64:	4904      	ldr	r1, [pc, #16]	@ (8006c78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c66:	5ccb      	ldrb	r3, [r1, r3]
 8006c68:	f003 031f 	and.w	r3, r3, #31
 8006c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	40021000 	.word	0x40021000
 8006c78:	0800b35c 	.word	0x0800b35c

08006c7c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	220f      	movs	r2, #15
 8006c8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006c8c:	4b12      	ldr	r3, [pc, #72]	@ (8006cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f003 0203 	and.w	r2, r3, #3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006c98:	4b0f      	ldr	r3, [pc, #60]	@ (8006cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006cb0:	4b09      	ldr	r3, [pc, #36]	@ (8006cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	08db      	lsrs	r3, r3, #3
 8006cb6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006cbe:	4b07      	ldr	r3, [pc, #28]	@ (8006cdc <HAL_RCC_GetClockConfig+0x60>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0207 	and.w	r2, r3, #7
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	601a      	str	r2, [r3, #0]
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	40021000 	.word	0x40021000
 8006cdc:	40022000 	.word	0x40022000

08006ce0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006ce8:	2300      	movs	r3, #0
 8006cea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006cec:	4b2a      	ldr	r3, [pc, #168]	@ (8006d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006cf8:	f7ff f9bc 	bl	8006074 <HAL_PWREx_GetVoltageRange>
 8006cfc:	6178      	str	r0, [r7, #20]
 8006cfe:	e014      	b.n	8006d2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d00:	4b25      	ldr	r3, [pc, #148]	@ (8006d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d04:	4a24      	ldr	r2, [pc, #144]	@ (8006d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d0c:	4b22      	ldr	r3, [pc, #136]	@ (8006d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006d18:	f7ff f9ac 	bl	8006074 <HAL_PWREx_GetVoltageRange>
 8006d1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8006d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d22:	4a1d      	ldr	r2, [pc, #116]	@ (8006d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d28:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d30:	d10b      	bne.n	8006d4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b80      	cmp	r3, #128	@ 0x80
 8006d36:	d919      	bls.n	8006d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2ba0      	cmp	r3, #160	@ 0xa0
 8006d3c:	d902      	bls.n	8006d44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006d3e:	2302      	movs	r3, #2
 8006d40:	613b      	str	r3, [r7, #16]
 8006d42:	e013      	b.n	8006d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006d44:	2301      	movs	r3, #1
 8006d46:	613b      	str	r3, [r7, #16]
 8006d48:	e010      	b.n	8006d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b80      	cmp	r3, #128	@ 0x80
 8006d4e:	d902      	bls.n	8006d56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006d50:	2303      	movs	r3, #3
 8006d52:	613b      	str	r3, [r7, #16]
 8006d54:	e00a      	b.n	8006d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b80      	cmp	r3, #128	@ 0x80
 8006d5a:	d102      	bne.n	8006d62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	613b      	str	r3, [r7, #16]
 8006d60:	e004      	b.n	8006d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b70      	cmp	r3, #112	@ 0x70
 8006d66:	d101      	bne.n	8006d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006d68:	2301      	movs	r3, #1
 8006d6a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f023 0207 	bic.w	r2, r3, #7
 8006d74:	4909      	ldr	r1, [pc, #36]	@ (8006d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006d7c:	4b07      	ldr	r3, [pc, #28]	@ (8006d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0307 	and.w	r3, r3, #7
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d001      	beq.n	8006d8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e000      	b.n	8006d90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3718      	adds	r7, #24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	40021000 	.word	0x40021000
 8006d9c:	40022000 	.word	0x40022000

08006da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006da8:	2300      	movs	r3, #0
 8006daa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006dac:	2300      	movs	r3, #0
 8006dae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d041      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dc0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006dc4:	d02a      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006dc6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006dca:	d824      	bhi.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006dcc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006dd0:	d008      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006dd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006dd6:	d81e      	bhi.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00a      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006ddc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006de0:	d010      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006de2:	e018      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006de4:	4b86      	ldr	r3, [pc, #536]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	4a85      	ldr	r2, [pc, #532]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006df0:	e015      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	3304      	adds	r3, #4
 8006df6:	2100      	movs	r1, #0
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 fabb 	bl	8007374 <RCCEx_PLLSAI1_Config>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e02:	e00c      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	3320      	adds	r3, #32
 8006e08:	2100      	movs	r1, #0
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 fba6 	bl	800755c <RCCEx_PLLSAI2_Config>
 8006e10:	4603      	mov	r3, r0
 8006e12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e14:	e003      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	74fb      	strb	r3, [r7, #19]
      break;
 8006e1a:	e000      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e1e:	7cfb      	ldrb	r3, [r7, #19]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10b      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e24:	4b76      	ldr	r3, [pc, #472]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e2a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e32:	4973      	ldr	r1, [pc, #460]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006e3a:	e001      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e3c:	7cfb      	ldrb	r3, [r7, #19]
 8006e3e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d041      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e54:	d02a      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006e56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e5a:	d824      	bhi.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006e5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e60:	d008      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006e62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e66:	d81e      	bhi.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00a      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e70:	d010      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006e72:	e018      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006e74:	4b62      	ldr	r3, [pc, #392]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	4a61      	ldr	r2, [pc, #388]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006e80:	e015      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	3304      	adds	r3, #4
 8006e86:	2100      	movs	r1, #0
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 fa73 	bl	8007374 <RCCEx_PLLSAI1_Config>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006e92:	e00c      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3320      	adds	r3, #32
 8006e98:	2100      	movs	r1, #0
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fb5e 	bl	800755c <RCCEx_PLLSAI2_Config>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006ea4:	e003      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	74fb      	strb	r3, [r7, #19]
      break;
 8006eaa:	e000      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eae:	7cfb      	ldrb	r3, [r7, #19]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10b      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006eb4:	4b52      	ldr	r3, [pc, #328]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ec2:	494f      	ldr	r1, [pc, #316]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006eca:	e001      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ecc:	7cfb      	ldrb	r3, [r7, #19]
 8006ece:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 80a0 	beq.w	800701e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006ee2:	4b47      	ldr	r3, [pc, #284]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e000      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00d      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ef8:	4b41      	ldr	r3, [pc, #260]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006efc:	4a40      	ldr	r2, [pc, #256]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f02:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f04:	4b3e      	ldr	r3, [pc, #248]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f0c:	60bb      	str	r3, [r7, #8]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f10:	2301      	movs	r3, #1
 8006f12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f14:	4b3b      	ldr	r3, [pc, #236]	@ (8007004 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a3a      	ldr	r2, [pc, #232]	@ (8007004 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006f1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f20:	f7fe fdba 	bl	8005a98 <HAL_GetTick>
 8006f24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f26:	e009      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f28:	f7fe fdb6 	bl	8005a98 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d902      	bls.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	74fb      	strb	r3, [r7, #19]
        break;
 8006f3a:	e005      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f3c:	4b31      	ldr	r3, [pc, #196]	@ (8007004 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d0ef      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006f48:	7cfb      	ldrb	r3, [r7, #19]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d15c      	bne.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d01f      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d019      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f6c:	4b24      	ldr	r3, [pc, #144]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f78:	4b21      	ldr	r3, [pc, #132]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f7e:	4a20      	ldr	r2, [pc, #128]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f88:	4b1d      	ldr	r3, [pc, #116]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f98:	4a19      	ldr	r2, [pc, #100]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d016      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006faa:	f7fe fd75 	bl	8005a98 <HAL_GetTick>
 8006fae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fb0:	e00b      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fb2:	f7fe fd71 	bl	8005a98 <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d902      	bls.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	74fb      	strb	r3, [r7, #19]
            break;
 8006fc8:	e006      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fca:	4b0d      	ldr	r3, [pc, #52]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0ec      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006fd8:	7cfb      	ldrb	r3, [r7, #19]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10c      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fde:	4b08      	ldr	r3, [pc, #32]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fe4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fee:	4904      	ldr	r1, [pc, #16]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006ff6:	e009      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ff8:	7cfb      	ldrb	r3, [r7, #19]
 8006ffa:	74bb      	strb	r3, [r7, #18]
 8006ffc:	e006      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006ffe:	bf00      	nop
 8007000:	40021000 	.word	0x40021000
 8007004:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007008:	7cfb      	ldrb	r3, [r7, #19]
 800700a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800700c:	7c7b      	ldrb	r3, [r7, #17]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d105      	bne.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007012:	4b9e      	ldr	r3, [pc, #632]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007016:	4a9d      	ldr	r2, [pc, #628]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007018:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800701c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00a      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800702a:	4b98      	ldr	r3, [pc, #608]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800702c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007030:	f023 0203 	bic.w	r2, r3, #3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007038:	4994      	ldr	r1, [pc, #592]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800703a:	4313      	orrs	r3, r2
 800703c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00a      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800704c:	4b8f      	ldr	r3, [pc, #572]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800704e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007052:	f023 020c 	bic.w	r2, r3, #12
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800705a:	498c      	ldr	r1, [pc, #560]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800705c:	4313      	orrs	r3, r2
 800705e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0304 	and.w	r3, r3, #4
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800706e:	4b87      	ldr	r3, [pc, #540]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007074:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800707c:	4983      	ldr	r1, [pc, #524]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800707e:	4313      	orrs	r3, r2
 8007080:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0308 	and.w	r3, r3, #8
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00a      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007090:	4b7e      	ldr	r3, [pc, #504]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007096:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800709e:	497b      	ldr	r1, [pc, #492]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0310 	and.w	r3, r3, #16
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80070b2:	4b76      	ldr	r3, [pc, #472]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070c0:	4972      	ldr	r1, [pc, #456]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0320 	and.w	r3, r3, #32
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00a      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070d4:	4b6d      	ldr	r3, [pc, #436]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070e2:	496a      	ldr	r1, [pc, #424]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00a      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070f6:	4b65      	ldr	r3, [pc, #404]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007104:	4961      	ldr	r1, [pc, #388]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007106:	4313      	orrs	r3, r2
 8007108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00a      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007118:	4b5c      	ldr	r3, [pc, #368]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800711a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800711e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007126:	4959      	ldr	r1, [pc, #356]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007128:	4313      	orrs	r3, r2
 800712a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800713a:	4b54      	ldr	r3, [pc, #336]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800713c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007140:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007148:	4950      	ldr	r1, [pc, #320]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800714a:	4313      	orrs	r3, r2
 800714c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00a      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800715c:	4b4b      	ldr	r3, [pc, #300]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800715e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007162:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800716a:	4948      	ldr	r1, [pc, #288]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800716c:	4313      	orrs	r3, r2
 800716e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00a      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800717e:	4b43      	ldr	r3, [pc, #268]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007184:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800718c:	493f      	ldr	r1, [pc, #252]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800718e:	4313      	orrs	r3, r2
 8007190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d028      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071a0:	4b3a      	ldr	r3, [pc, #232]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071ae:	4937      	ldr	r1, [pc, #220]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071be:	d106      	bne.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071c0:	4b32      	ldr	r3, [pc, #200]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	4a31      	ldr	r2, [pc, #196]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071ca:	60d3      	str	r3, [r2, #12]
 80071cc:	e011      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071d6:	d10c      	bne.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	3304      	adds	r3, #4
 80071dc:	2101      	movs	r1, #1
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 f8c8 	bl	8007374 <RCCEx_PLLSAI1_Config>
 80071e4:	4603      	mov	r3, r0
 80071e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80071e8:	7cfb      	ldrb	r3, [r7, #19]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80071ee:	7cfb      	ldrb	r3, [r7, #19]
 80071f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d028      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80071fe:	4b23      	ldr	r3, [pc, #140]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007204:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800720c:	491f      	ldr	r1, [pc, #124]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800720e:	4313      	orrs	r3, r2
 8007210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007218:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800721c:	d106      	bne.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800721e:	4b1b      	ldr	r3, [pc, #108]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	4a1a      	ldr	r2, [pc, #104]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007224:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007228:	60d3      	str	r3, [r2, #12]
 800722a:	e011      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007230:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007234:	d10c      	bne.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	3304      	adds	r3, #4
 800723a:	2101      	movs	r1, #1
 800723c:	4618      	mov	r0, r3
 800723e:	f000 f899 	bl	8007374 <RCCEx_PLLSAI1_Config>
 8007242:	4603      	mov	r3, r0
 8007244:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007246:	7cfb      	ldrb	r3, [r7, #19]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800724c:	7cfb      	ldrb	r3, [r7, #19]
 800724e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d02b      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800725c:	4b0b      	ldr	r3, [pc, #44]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800725e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007262:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800726a:	4908      	ldr	r1, [pc, #32]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800726c:	4313      	orrs	r3, r2
 800726e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007276:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800727a:	d109      	bne.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800727c:	4b03      	ldr	r3, [pc, #12]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	4a02      	ldr	r2, [pc, #8]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007286:	60d3      	str	r3, [r2, #12]
 8007288:	e014      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800728a:	bf00      	nop
 800728c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007294:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007298:	d10c      	bne.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	3304      	adds	r3, #4
 800729e:	2101      	movs	r1, #1
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 f867 	bl	8007374 <RCCEx_PLLSAI1_Config>
 80072a6:	4603      	mov	r3, r0
 80072a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80072aa:	7cfb      	ldrb	r3, [r7, #19]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80072b0:	7cfb      	ldrb	r3, [r7, #19]
 80072b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d02f      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072c0:	4b2b      	ldr	r3, [pc, #172]	@ (8007370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80072c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072ce:	4928      	ldr	r1, [pc, #160]	@ (8007370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072de:	d10d      	bne.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3304      	adds	r3, #4
 80072e4:	2102      	movs	r1, #2
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 f844 	bl	8007374 <RCCEx_PLLSAI1_Config>
 80072ec:	4603      	mov	r3, r0
 80072ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80072f0:	7cfb      	ldrb	r3, [r7, #19]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d014      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80072f6:	7cfb      	ldrb	r3, [r7, #19]
 80072f8:	74bb      	strb	r3, [r7, #18]
 80072fa:	e011      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007300:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007304:	d10c      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	3320      	adds	r3, #32
 800730a:	2102      	movs	r1, #2
 800730c:	4618      	mov	r0, r3
 800730e:	f000 f925 	bl	800755c <RCCEx_PLLSAI2_Config>
 8007312:	4603      	mov	r3, r0
 8007314:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007316:	7cfb      	ldrb	r3, [r7, #19]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800731c:	7cfb      	ldrb	r3, [r7, #19]
 800731e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00a      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800732c:	4b10      	ldr	r3, [pc, #64]	@ (8007370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800732e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007332:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800733a:	490d      	ldr	r1, [pc, #52]	@ (8007370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800733c:	4313      	orrs	r3, r2
 800733e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00b      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800734e:	4b08      	ldr	r3, [pc, #32]	@ (8007370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007354:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800735e:	4904      	ldr	r1, [pc, #16]	@ (8007370 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007360:	4313      	orrs	r3, r2
 8007362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007366:	7cbb      	ldrb	r3, [r7, #18]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	40021000 	.word	0x40021000

08007374 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007382:	4b75      	ldr	r3, [pc, #468]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	f003 0303 	and.w	r3, r3, #3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d018      	beq.n	80073c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800738e:	4b72      	ldr	r3, [pc, #456]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f003 0203 	and.w	r2, r3, #3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	429a      	cmp	r2, r3
 800739c:	d10d      	bne.n	80073ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
       ||
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d009      	beq.n	80073ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80073a6:	4b6c      	ldr	r3, [pc, #432]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	091b      	lsrs	r3, r3, #4
 80073ac:	f003 0307 	and.w	r3, r3, #7
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
       ||
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d047      	beq.n	800744a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	73fb      	strb	r3, [r7, #15]
 80073be:	e044      	b.n	800744a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	d018      	beq.n	80073fa <RCCEx_PLLSAI1_Config+0x86>
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d825      	bhi.n	8007418 <RCCEx_PLLSAI1_Config+0xa4>
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d002      	beq.n	80073d6 <RCCEx_PLLSAI1_Config+0x62>
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d009      	beq.n	80073e8 <RCCEx_PLLSAI1_Config+0x74>
 80073d4:	e020      	b.n	8007418 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073d6:	4b60      	ldr	r3, [pc, #384]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d11d      	bne.n	800741e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073e6:	e01a      	b.n	800741e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073e8:	4b5b      	ldr	r3, [pc, #364]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d116      	bne.n	8007422 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073f8:	e013      	b.n	8007422 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80073fa:	4b57      	ldr	r3, [pc, #348]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10f      	bne.n	8007426 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007406:	4b54      	ldr	r3, [pc, #336]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d109      	bne.n	8007426 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007416:	e006      	b.n	8007426 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	73fb      	strb	r3, [r7, #15]
      break;
 800741c:	e004      	b.n	8007428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800741e:	bf00      	nop
 8007420:	e002      	b.n	8007428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007422:	bf00      	nop
 8007424:	e000      	b.n	8007428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007426:	bf00      	nop
    }

    if(status == HAL_OK)
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10d      	bne.n	800744a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800742e:	4b4a      	ldr	r3, [pc, #296]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6819      	ldr	r1, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	3b01      	subs	r3, #1
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	430b      	orrs	r3, r1
 8007444:	4944      	ldr	r1, [pc, #272]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007446:	4313      	orrs	r3, r2
 8007448:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800744a:	7bfb      	ldrb	r3, [r7, #15]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d17d      	bne.n	800754c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007450:	4b41      	ldr	r3, [pc, #260]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a40      	ldr	r2, [pc, #256]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007456:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800745a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800745c:	f7fe fb1c 	bl	8005a98 <HAL_GetTick>
 8007460:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007462:	e009      	b.n	8007478 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007464:	f7fe fb18 	bl	8005a98 <HAL_GetTick>
 8007468:	4602      	mov	r2, r0
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	2b02      	cmp	r3, #2
 8007470:	d902      	bls.n	8007478 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	73fb      	strb	r3, [r7, #15]
        break;
 8007476:	e005      	b.n	8007484 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007478:	4b37      	ldr	r3, [pc, #220]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1ef      	bne.n	8007464 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007484:	7bfb      	ldrb	r3, [r7, #15]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d160      	bne.n	800754c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d111      	bne.n	80074b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007490:	4b31      	ldr	r3, [pc, #196]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007498:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	6892      	ldr	r2, [r2, #8]
 80074a0:	0211      	lsls	r1, r2, #8
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	68d2      	ldr	r2, [r2, #12]
 80074a6:	0912      	lsrs	r2, r2, #4
 80074a8:	0452      	lsls	r2, r2, #17
 80074aa:	430a      	orrs	r2, r1
 80074ac:	492a      	ldr	r1, [pc, #168]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	610b      	str	r3, [r1, #16]
 80074b2:	e027      	b.n	8007504 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d112      	bne.n	80074e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80074ba:	4b27      	ldr	r3, [pc, #156]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80074c2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6892      	ldr	r2, [r2, #8]
 80074ca:	0211      	lsls	r1, r2, #8
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6912      	ldr	r2, [r2, #16]
 80074d0:	0852      	lsrs	r2, r2, #1
 80074d2:	3a01      	subs	r2, #1
 80074d4:	0552      	lsls	r2, r2, #21
 80074d6:	430a      	orrs	r2, r1
 80074d8:	491f      	ldr	r1, [pc, #124]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	610b      	str	r3, [r1, #16]
 80074de:	e011      	b.n	8007504 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80074e0:	4b1d      	ldr	r3, [pc, #116]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80074e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	6892      	ldr	r2, [r2, #8]
 80074f0:	0211      	lsls	r1, r2, #8
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	6952      	ldr	r2, [r2, #20]
 80074f6:	0852      	lsrs	r2, r2, #1
 80074f8:	3a01      	subs	r2, #1
 80074fa:	0652      	lsls	r2, r2, #25
 80074fc:	430a      	orrs	r2, r1
 80074fe:	4916      	ldr	r1, [pc, #88]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007500:	4313      	orrs	r3, r2
 8007502:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007504:	4b14      	ldr	r3, [pc, #80]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a13      	ldr	r2, [pc, #76]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 800750a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800750e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007510:	f7fe fac2 	bl	8005a98 <HAL_GetTick>
 8007514:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007516:	e009      	b.n	800752c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007518:	f7fe fabe 	bl	8005a98 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b02      	cmp	r3, #2
 8007524:	d902      	bls.n	800752c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	73fb      	strb	r3, [r7, #15]
          break;
 800752a:	e005      	b.n	8007538 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800752c:	4b0a      	ldr	r3, [pc, #40]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d0ef      	beq.n	8007518 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d106      	bne.n	800754c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800753e:	4b06      	ldr	r3, [pc, #24]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007540:	691a      	ldr	r2, [r3, #16]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	4904      	ldr	r1, [pc, #16]	@ (8007558 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007548:	4313      	orrs	r3, r2
 800754a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800754c:	7bfb      	ldrb	r3, [r7, #15]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	40021000 	.word	0x40021000

0800755c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800756a:	4b6a      	ldr	r3, [pc, #424]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f003 0303 	and.w	r3, r3, #3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d018      	beq.n	80075a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007576:	4b67      	ldr	r3, [pc, #412]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f003 0203 	and.w	r2, r3, #3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	429a      	cmp	r2, r3
 8007584:	d10d      	bne.n	80075a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
       ||
 800758a:	2b00      	cmp	r3, #0
 800758c:	d009      	beq.n	80075a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800758e:	4b61      	ldr	r3, [pc, #388]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	091b      	lsrs	r3, r3, #4
 8007594:	f003 0307 	and.w	r3, r3, #7
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
       ||
 800759e:	429a      	cmp	r2, r3
 80075a0:	d047      	beq.n	8007632 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	73fb      	strb	r3, [r7, #15]
 80075a6:	e044      	b.n	8007632 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	d018      	beq.n	80075e2 <RCCEx_PLLSAI2_Config+0x86>
 80075b0:	2b03      	cmp	r3, #3
 80075b2:	d825      	bhi.n	8007600 <RCCEx_PLLSAI2_Config+0xa4>
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d002      	beq.n	80075be <RCCEx_PLLSAI2_Config+0x62>
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d009      	beq.n	80075d0 <RCCEx_PLLSAI2_Config+0x74>
 80075bc:	e020      	b.n	8007600 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80075be:	4b55      	ldr	r3, [pc, #340]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d11d      	bne.n	8007606 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075ce:	e01a      	b.n	8007606 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80075d0:	4b50      	ldr	r3, [pc, #320]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d116      	bne.n	800760a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075e0:	e013      	b.n	800760a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80075e2:	4b4c      	ldr	r3, [pc, #304]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10f      	bne.n	800760e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80075ee:	4b49      	ldr	r3, [pc, #292]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d109      	bne.n	800760e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80075fe:	e006      	b.n	800760e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	73fb      	strb	r3, [r7, #15]
      break;
 8007604:	e004      	b.n	8007610 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007606:	bf00      	nop
 8007608:	e002      	b.n	8007610 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800760a:	bf00      	nop
 800760c:	e000      	b.n	8007610 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800760e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10d      	bne.n	8007632 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007616:	4b3f      	ldr	r3, [pc, #252]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6819      	ldr	r1, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	3b01      	subs	r3, #1
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	430b      	orrs	r3, r1
 800762c:	4939      	ldr	r1, [pc, #228]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800762e:	4313      	orrs	r3, r2
 8007630:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d167      	bne.n	8007708 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007638:	4b36      	ldr	r3, [pc, #216]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a35      	ldr	r2, [pc, #212]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800763e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007642:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007644:	f7fe fa28 	bl	8005a98 <HAL_GetTick>
 8007648:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800764a:	e009      	b.n	8007660 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800764c:	f7fe fa24 	bl	8005a98 <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	2b02      	cmp	r3, #2
 8007658:	d902      	bls.n	8007660 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	73fb      	strb	r3, [r7, #15]
        break;
 800765e:	e005      	b.n	800766c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007660:	4b2c      	ldr	r3, [pc, #176]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1ef      	bne.n	800764c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800766c:	7bfb      	ldrb	r3, [r7, #15]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d14a      	bne.n	8007708 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d111      	bne.n	800769c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007678:	4b26      	ldr	r3, [pc, #152]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	6892      	ldr	r2, [r2, #8]
 8007688:	0211      	lsls	r1, r2, #8
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	68d2      	ldr	r2, [r2, #12]
 800768e:	0912      	lsrs	r2, r2, #4
 8007690:	0452      	lsls	r2, r2, #17
 8007692:	430a      	orrs	r2, r1
 8007694:	491f      	ldr	r1, [pc, #124]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007696:	4313      	orrs	r3, r2
 8007698:	614b      	str	r3, [r1, #20]
 800769a:	e011      	b.n	80076c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800769c:	4b1d      	ldr	r3, [pc, #116]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80076a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	6892      	ldr	r2, [r2, #8]
 80076ac:	0211      	lsls	r1, r2, #8
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	6912      	ldr	r2, [r2, #16]
 80076b2:	0852      	lsrs	r2, r2, #1
 80076b4:	3a01      	subs	r2, #1
 80076b6:	0652      	lsls	r2, r2, #25
 80076b8:	430a      	orrs	r2, r1
 80076ba:	4916      	ldr	r1, [pc, #88]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80076c0:	4b14      	ldr	r3, [pc, #80]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a13      	ldr	r2, [pc, #76]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076cc:	f7fe f9e4 	bl	8005a98 <HAL_GetTick>
 80076d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80076d2:	e009      	b.n	80076e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80076d4:	f7fe f9e0 	bl	8005a98 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d902      	bls.n	80076e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	73fb      	strb	r3, [r7, #15]
          break;
 80076e6:	e005      	b.n	80076f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80076e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d0ef      	beq.n	80076d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d106      	bne.n	8007708 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80076fa:	4b06      	ldr	r3, [pc, #24]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076fc:	695a      	ldr	r2, [r3, #20]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	4904      	ldr	r1, [pc, #16]	@ (8007714 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007704:	4313      	orrs	r3, r2
 8007706:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007708:	7bfb      	ldrb	r3, [r7, #15]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	40021000 	.word	0x40021000

08007718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e049      	b.n	80077be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d106      	bne.n	8007744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f841 	bl	80077c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2202      	movs	r2, #2
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3304      	adds	r3, #4
 8007754:	4619      	mov	r1, r3
 8007756:	4610      	mov	r0, r2
 8007758:	f000 f9e0 	bl	8007b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b083      	sub	sp, #12
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80077ce:	bf00      	nop
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
	...

080077dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d001      	beq.n	80077f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e04f      	b.n	8007894 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68da      	ldr	r2, [r3, #12]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f042 0201 	orr.w	r2, r2, #1
 800780a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a23      	ldr	r2, [pc, #140]	@ (80078a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d01d      	beq.n	8007852 <HAL_TIM_Base_Start_IT+0x76>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800781e:	d018      	beq.n	8007852 <HAL_TIM_Base_Start_IT+0x76>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a1f      	ldr	r2, [pc, #124]	@ (80078a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d013      	beq.n	8007852 <HAL_TIM_Base_Start_IT+0x76>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a1e      	ldr	r2, [pc, #120]	@ (80078a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d00e      	beq.n	8007852 <HAL_TIM_Base_Start_IT+0x76>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a1c      	ldr	r2, [pc, #112]	@ (80078ac <HAL_TIM_Base_Start_IT+0xd0>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d009      	beq.n	8007852 <HAL_TIM_Base_Start_IT+0x76>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a1b      	ldr	r2, [pc, #108]	@ (80078b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d004      	beq.n	8007852 <HAL_TIM_Base_Start_IT+0x76>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a19      	ldr	r2, [pc, #100]	@ (80078b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d115      	bne.n	800787e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	689a      	ldr	r2, [r3, #8]
 8007858:	4b17      	ldr	r3, [pc, #92]	@ (80078b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800785a:	4013      	ands	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2b06      	cmp	r3, #6
 8007862:	d015      	beq.n	8007890 <HAL_TIM_Base_Start_IT+0xb4>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800786a:	d011      	beq.n	8007890 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f042 0201 	orr.w	r2, r2, #1
 800787a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800787c:	e008      	b.n	8007890 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f042 0201 	orr.w	r2, r2, #1
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	e000      	b.n	8007892 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007890:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	40012c00 	.word	0x40012c00
 80078a4:	40000400 	.word	0x40000400
 80078a8:	40000800 	.word	0x40000800
 80078ac:	40000c00 	.word	0x40000c00
 80078b0:	40013400 	.word	0x40013400
 80078b4:	40014000 	.word	0x40014000
 80078b8:	00010007 	.word	0x00010007

080078bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d020      	beq.n	8007920 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f003 0302 	and.w	r3, r3, #2
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d01b      	beq.n	8007920 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f06f 0202 	mvn.w	r2, #2
 80078f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	f003 0303 	and.w	r3, r3, #3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f8e9 	bl	8007ade <HAL_TIM_IC_CaptureCallback>
 800790c:	e005      	b.n	800791a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f8db 	bl	8007aca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f8ec 	bl	8007af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f003 0304 	and.w	r3, r3, #4
 8007926:	2b00      	cmp	r3, #0
 8007928:	d020      	beq.n	800796c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b00      	cmp	r3, #0
 8007932:	d01b      	beq.n	800796c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f06f 0204 	mvn.w	r2, #4
 800793c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2202      	movs	r2, #2
 8007942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f8c3 	bl	8007ade <HAL_TIM_IC_CaptureCallback>
 8007958:	e005      	b.n	8007966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f8b5 	bl	8007aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f8c6 	bl	8007af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	f003 0308 	and.w	r3, r3, #8
 8007972:	2b00      	cmp	r3, #0
 8007974:	d020      	beq.n	80079b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f003 0308 	and.w	r3, r3, #8
 800797c:	2b00      	cmp	r3, #0
 800797e:	d01b      	beq.n	80079b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f06f 0208 	mvn.w	r2, #8
 8007988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2204      	movs	r2, #4
 800798e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	f003 0303 	and.w	r3, r3, #3
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f89d 	bl	8007ade <HAL_TIM_IC_CaptureCallback>
 80079a4:	e005      	b.n	80079b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f88f 	bl	8007aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f8a0 	bl	8007af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	f003 0310 	and.w	r3, r3, #16
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d020      	beq.n	8007a04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f003 0310 	and.w	r3, r3, #16
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d01b      	beq.n	8007a04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f06f 0210 	mvn.w	r2, #16
 80079d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2208      	movs	r2, #8
 80079da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f877 	bl	8007ade <HAL_TIM_IC_CaptureCallback>
 80079f0:	e005      	b.n	80079fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f869 	bl	8007aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f87a 	bl	8007af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00c      	beq.n	8007a28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d007      	beq.n	8007a28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f06f 0201 	mvn.w	r2, #1
 8007a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f7fd fe8c 	bl	8005740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d104      	bne.n	8007a3c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00c      	beq.n	8007a56 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d007      	beq.n	8007a56 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f913 	bl	8007c7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00c      	beq.n	8007a7a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d007      	beq.n	8007a7a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f90b 	bl	8007c90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00c      	beq.n	8007a9e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d007      	beq.n	8007a9e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f834 	bl	8007b06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f003 0320 	and.w	r3, r3, #32
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00c      	beq.n	8007ac2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f003 0320 	and.w	r3, r3, #32
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d007      	beq.n	8007ac2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f06f 0220 	mvn.w	r2, #32
 8007aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f8d3 	bl	8007c68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ac2:	bf00      	nop
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ad2:	bf00      	nop
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ae6:	bf00      	nop
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr

08007af2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b083      	sub	sp, #12
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007afa:	bf00      	nop
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b0e:	bf00      	nop
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
	...

08007b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a46      	ldr	r2, [pc, #280]	@ (8007c48 <TIM_Base_SetConfig+0x12c>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d013      	beq.n	8007b5c <TIM_Base_SetConfig+0x40>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b3a:	d00f      	beq.n	8007b5c <TIM_Base_SetConfig+0x40>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a43      	ldr	r2, [pc, #268]	@ (8007c4c <TIM_Base_SetConfig+0x130>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d00b      	beq.n	8007b5c <TIM_Base_SetConfig+0x40>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a42      	ldr	r2, [pc, #264]	@ (8007c50 <TIM_Base_SetConfig+0x134>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d007      	beq.n	8007b5c <TIM_Base_SetConfig+0x40>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a41      	ldr	r2, [pc, #260]	@ (8007c54 <TIM_Base_SetConfig+0x138>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d003      	beq.n	8007b5c <TIM_Base_SetConfig+0x40>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a40      	ldr	r2, [pc, #256]	@ (8007c58 <TIM_Base_SetConfig+0x13c>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d108      	bne.n	8007b6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a35      	ldr	r2, [pc, #212]	@ (8007c48 <TIM_Base_SetConfig+0x12c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d01f      	beq.n	8007bb6 <TIM_Base_SetConfig+0x9a>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b7c:	d01b      	beq.n	8007bb6 <TIM_Base_SetConfig+0x9a>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a32      	ldr	r2, [pc, #200]	@ (8007c4c <TIM_Base_SetConfig+0x130>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d017      	beq.n	8007bb6 <TIM_Base_SetConfig+0x9a>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a31      	ldr	r2, [pc, #196]	@ (8007c50 <TIM_Base_SetConfig+0x134>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d013      	beq.n	8007bb6 <TIM_Base_SetConfig+0x9a>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a30      	ldr	r2, [pc, #192]	@ (8007c54 <TIM_Base_SetConfig+0x138>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d00f      	beq.n	8007bb6 <TIM_Base_SetConfig+0x9a>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a2f      	ldr	r2, [pc, #188]	@ (8007c58 <TIM_Base_SetConfig+0x13c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d00b      	beq.n	8007bb6 <TIM_Base_SetConfig+0x9a>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a2e      	ldr	r2, [pc, #184]	@ (8007c5c <TIM_Base_SetConfig+0x140>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d007      	beq.n	8007bb6 <TIM_Base_SetConfig+0x9a>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8007c60 <TIM_Base_SetConfig+0x144>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d003      	beq.n	8007bb6 <TIM_Base_SetConfig+0x9a>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a2c      	ldr	r2, [pc, #176]	@ (8007c64 <TIM_Base_SetConfig+0x148>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d108      	bne.n	8007bc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	689a      	ldr	r2, [r3, #8]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a16      	ldr	r2, [pc, #88]	@ (8007c48 <TIM_Base_SetConfig+0x12c>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d00f      	beq.n	8007c14 <TIM_Base_SetConfig+0xf8>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a18      	ldr	r2, [pc, #96]	@ (8007c58 <TIM_Base_SetConfig+0x13c>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d00b      	beq.n	8007c14 <TIM_Base_SetConfig+0xf8>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a17      	ldr	r2, [pc, #92]	@ (8007c5c <TIM_Base_SetConfig+0x140>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d007      	beq.n	8007c14 <TIM_Base_SetConfig+0xf8>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a16      	ldr	r2, [pc, #88]	@ (8007c60 <TIM_Base_SetConfig+0x144>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d003      	beq.n	8007c14 <TIM_Base_SetConfig+0xf8>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a15      	ldr	r2, [pc, #84]	@ (8007c64 <TIM_Base_SetConfig+0x148>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d103      	bne.n	8007c1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	691a      	ldr	r2, [r3, #16]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d105      	bne.n	8007c3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	f023 0201 	bic.w	r2, r3, #1
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	611a      	str	r2, [r3, #16]
  }
}
 8007c3a:	bf00      	nop
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	40012c00 	.word	0x40012c00
 8007c4c:	40000400 	.word	0x40000400
 8007c50:	40000800 	.word	0x40000800
 8007c54:	40000c00 	.word	0x40000c00
 8007c58:	40013400 	.word	0x40013400
 8007c5c:	40014000 	.word	0x40014000
 8007c60:	40014400 	.word	0x40014400
 8007c64:	40014800 	.word	0x40014800

08007c68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e040      	b.n	8007d38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d106      	bne.n	8007ccc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f7fd fd7a 	bl	80057c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2224      	movs	r2, #36	@ 0x24
 8007cd0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f022 0201 	bic.w	r2, r2, #1
 8007ce0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fae0 	bl	80082b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f825 	bl	8007d40 <UART_SetConfig>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d101      	bne.n	8007d00 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e01b      	b.n	8007d38 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689a      	ldr	r2, [r3, #8]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f042 0201 	orr.w	r2, r2, #1
 8007d2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fb5f 	bl	80083f4 <UART_CheckIdleState>
 8007d36:	4603      	mov	r3, r0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d44:	b08a      	sub	sp, #40	@ 0x28
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	431a      	orrs	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	431a      	orrs	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	4ba4      	ldr	r3, [pc, #656]	@ (8008000 <UART_SetConfig+0x2c0>)
 8007d70:	4013      	ands	r3, r2
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	6812      	ldr	r2, [r2, #0]
 8007d76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d78:	430b      	orrs	r3, r1
 8007d7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a99      	ldr	r2, [pc, #612]	@ (8008004 <UART_SetConfig+0x2c4>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d004      	beq.n	8007dac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007da8:	4313      	orrs	r3, r2
 8007daa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a90      	ldr	r2, [pc, #576]	@ (8008008 <UART_SetConfig+0x2c8>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d126      	bne.n	8007e18 <UART_SetConfig+0xd8>
 8007dca:	4b90      	ldr	r3, [pc, #576]	@ (800800c <UART_SetConfig+0x2cc>)
 8007dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dd0:	f003 0303 	and.w	r3, r3, #3
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d81b      	bhi.n	8007e10 <UART_SetConfig+0xd0>
 8007dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8007de0 <UART_SetConfig+0xa0>)
 8007dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dde:	bf00      	nop
 8007de0:	08007df1 	.word	0x08007df1
 8007de4:	08007e01 	.word	0x08007e01
 8007de8:	08007df9 	.word	0x08007df9
 8007dec:	08007e09 	.word	0x08007e09
 8007df0:	2301      	movs	r3, #1
 8007df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007df6:	e116      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007df8:	2302      	movs	r3, #2
 8007dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dfe:	e112      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007e00:	2304      	movs	r3, #4
 8007e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e06:	e10e      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007e08:	2308      	movs	r3, #8
 8007e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e0e:	e10a      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007e10:	2310      	movs	r3, #16
 8007e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e16:	e106      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a7c      	ldr	r2, [pc, #496]	@ (8008010 <UART_SetConfig+0x2d0>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d138      	bne.n	8007e94 <UART_SetConfig+0x154>
 8007e22:	4b7a      	ldr	r3, [pc, #488]	@ (800800c <UART_SetConfig+0x2cc>)
 8007e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e28:	f003 030c 	and.w	r3, r3, #12
 8007e2c:	2b0c      	cmp	r3, #12
 8007e2e:	d82d      	bhi.n	8007e8c <UART_SetConfig+0x14c>
 8007e30:	a201      	add	r2, pc, #4	@ (adr r2, 8007e38 <UART_SetConfig+0xf8>)
 8007e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e36:	bf00      	nop
 8007e38:	08007e6d 	.word	0x08007e6d
 8007e3c:	08007e8d 	.word	0x08007e8d
 8007e40:	08007e8d 	.word	0x08007e8d
 8007e44:	08007e8d 	.word	0x08007e8d
 8007e48:	08007e7d 	.word	0x08007e7d
 8007e4c:	08007e8d 	.word	0x08007e8d
 8007e50:	08007e8d 	.word	0x08007e8d
 8007e54:	08007e8d 	.word	0x08007e8d
 8007e58:	08007e75 	.word	0x08007e75
 8007e5c:	08007e8d 	.word	0x08007e8d
 8007e60:	08007e8d 	.word	0x08007e8d
 8007e64:	08007e8d 	.word	0x08007e8d
 8007e68:	08007e85 	.word	0x08007e85
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e72:	e0d8      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007e74:	2302      	movs	r3, #2
 8007e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e7a:	e0d4      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007e7c:	2304      	movs	r3, #4
 8007e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e82:	e0d0      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007e84:	2308      	movs	r3, #8
 8007e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e8a:	e0cc      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007e8c:	2310      	movs	r3, #16
 8007e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e92:	e0c8      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a5e      	ldr	r2, [pc, #376]	@ (8008014 <UART_SetConfig+0x2d4>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d125      	bne.n	8007eea <UART_SetConfig+0x1aa>
 8007e9e:	4b5b      	ldr	r3, [pc, #364]	@ (800800c <UART_SetConfig+0x2cc>)
 8007ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ea4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007ea8:	2b30      	cmp	r3, #48	@ 0x30
 8007eaa:	d016      	beq.n	8007eda <UART_SetConfig+0x19a>
 8007eac:	2b30      	cmp	r3, #48	@ 0x30
 8007eae:	d818      	bhi.n	8007ee2 <UART_SetConfig+0x1a2>
 8007eb0:	2b20      	cmp	r3, #32
 8007eb2:	d00a      	beq.n	8007eca <UART_SetConfig+0x18a>
 8007eb4:	2b20      	cmp	r3, #32
 8007eb6:	d814      	bhi.n	8007ee2 <UART_SetConfig+0x1a2>
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d002      	beq.n	8007ec2 <UART_SetConfig+0x182>
 8007ebc:	2b10      	cmp	r3, #16
 8007ebe:	d008      	beq.n	8007ed2 <UART_SetConfig+0x192>
 8007ec0:	e00f      	b.n	8007ee2 <UART_SetConfig+0x1a2>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ec8:	e0ad      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007eca:	2302      	movs	r3, #2
 8007ecc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ed0:	e0a9      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007ed2:	2304      	movs	r3, #4
 8007ed4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ed8:	e0a5      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007eda:	2308      	movs	r3, #8
 8007edc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ee0:	e0a1      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007ee2:	2310      	movs	r3, #16
 8007ee4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ee8:	e09d      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a4a      	ldr	r2, [pc, #296]	@ (8008018 <UART_SetConfig+0x2d8>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d125      	bne.n	8007f40 <UART_SetConfig+0x200>
 8007ef4:	4b45      	ldr	r3, [pc, #276]	@ (800800c <UART_SetConfig+0x2cc>)
 8007ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007efa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007efe:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f00:	d016      	beq.n	8007f30 <UART_SetConfig+0x1f0>
 8007f02:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f04:	d818      	bhi.n	8007f38 <UART_SetConfig+0x1f8>
 8007f06:	2b80      	cmp	r3, #128	@ 0x80
 8007f08:	d00a      	beq.n	8007f20 <UART_SetConfig+0x1e0>
 8007f0a:	2b80      	cmp	r3, #128	@ 0x80
 8007f0c:	d814      	bhi.n	8007f38 <UART_SetConfig+0x1f8>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d002      	beq.n	8007f18 <UART_SetConfig+0x1d8>
 8007f12:	2b40      	cmp	r3, #64	@ 0x40
 8007f14:	d008      	beq.n	8007f28 <UART_SetConfig+0x1e8>
 8007f16:	e00f      	b.n	8007f38 <UART_SetConfig+0x1f8>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f1e:	e082      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007f20:	2302      	movs	r3, #2
 8007f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f26:	e07e      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007f28:	2304      	movs	r3, #4
 8007f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f2e:	e07a      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007f30:	2308      	movs	r3, #8
 8007f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f36:	e076      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007f38:	2310      	movs	r3, #16
 8007f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f3e:	e072      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a35      	ldr	r2, [pc, #212]	@ (800801c <UART_SetConfig+0x2dc>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d12a      	bne.n	8007fa0 <UART_SetConfig+0x260>
 8007f4a:	4b30      	ldr	r3, [pc, #192]	@ (800800c <UART_SetConfig+0x2cc>)
 8007f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f58:	d01a      	beq.n	8007f90 <UART_SetConfig+0x250>
 8007f5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f5e:	d81b      	bhi.n	8007f98 <UART_SetConfig+0x258>
 8007f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f64:	d00c      	beq.n	8007f80 <UART_SetConfig+0x240>
 8007f66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f6a:	d815      	bhi.n	8007f98 <UART_SetConfig+0x258>
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d003      	beq.n	8007f78 <UART_SetConfig+0x238>
 8007f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f74:	d008      	beq.n	8007f88 <UART_SetConfig+0x248>
 8007f76:	e00f      	b.n	8007f98 <UART_SetConfig+0x258>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f7e:	e052      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007f80:	2302      	movs	r3, #2
 8007f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f86:	e04e      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007f88:	2304      	movs	r3, #4
 8007f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f8e:	e04a      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007f90:	2308      	movs	r3, #8
 8007f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f96:	e046      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007f98:	2310      	movs	r3, #16
 8007f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f9e:	e042      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a17      	ldr	r2, [pc, #92]	@ (8008004 <UART_SetConfig+0x2c4>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d13a      	bne.n	8008020 <UART_SetConfig+0x2e0>
 8007faa:	4b18      	ldr	r3, [pc, #96]	@ (800800c <UART_SetConfig+0x2cc>)
 8007fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fb0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007fb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fb8:	d01a      	beq.n	8007ff0 <UART_SetConfig+0x2b0>
 8007fba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fbe:	d81b      	bhi.n	8007ff8 <UART_SetConfig+0x2b8>
 8007fc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fc4:	d00c      	beq.n	8007fe0 <UART_SetConfig+0x2a0>
 8007fc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fca:	d815      	bhi.n	8007ff8 <UART_SetConfig+0x2b8>
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <UART_SetConfig+0x298>
 8007fd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fd4:	d008      	beq.n	8007fe8 <UART_SetConfig+0x2a8>
 8007fd6:	e00f      	b.n	8007ff8 <UART_SetConfig+0x2b8>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fde:	e022      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fe6:	e01e      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007fe8:	2304      	movs	r3, #4
 8007fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fee:	e01a      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007ff0:	2308      	movs	r3, #8
 8007ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ff6:	e016      	b.n	8008026 <UART_SetConfig+0x2e6>
 8007ff8:	2310      	movs	r3, #16
 8007ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ffe:	e012      	b.n	8008026 <UART_SetConfig+0x2e6>
 8008000:	efff69f3 	.word	0xefff69f3
 8008004:	40008000 	.word	0x40008000
 8008008:	40013800 	.word	0x40013800
 800800c:	40021000 	.word	0x40021000
 8008010:	40004400 	.word	0x40004400
 8008014:	40004800 	.word	0x40004800
 8008018:	40004c00 	.word	0x40004c00
 800801c:	40005000 	.word	0x40005000
 8008020:	2310      	movs	r3, #16
 8008022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a9f      	ldr	r2, [pc, #636]	@ (80082a8 <UART_SetConfig+0x568>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d17a      	bne.n	8008126 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008030:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008034:	2b08      	cmp	r3, #8
 8008036:	d824      	bhi.n	8008082 <UART_SetConfig+0x342>
 8008038:	a201      	add	r2, pc, #4	@ (adr r2, 8008040 <UART_SetConfig+0x300>)
 800803a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803e:	bf00      	nop
 8008040:	08008065 	.word	0x08008065
 8008044:	08008083 	.word	0x08008083
 8008048:	0800806d 	.word	0x0800806d
 800804c:	08008083 	.word	0x08008083
 8008050:	08008073 	.word	0x08008073
 8008054:	08008083 	.word	0x08008083
 8008058:	08008083 	.word	0x08008083
 800805c:	08008083 	.word	0x08008083
 8008060:	0800807b 	.word	0x0800807b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008064:	f7fe fdde 	bl	8006c24 <HAL_RCC_GetPCLK1Freq>
 8008068:	61f8      	str	r0, [r7, #28]
        break;
 800806a:	e010      	b.n	800808e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800806c:	4b8f      	ldr	r3, [pc, #572]	@ (80082ac <UART_SetConfig+0x56c>)
 800806e:	61fb      	str	r3, [r7, #28]
        break;
 8008070:	e00d      	b.n	800808e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008072:	f7fe fd3f 	bl	8006af4 <HAL_RCC_GetSysClockFreq>
 8008076:	61f8      	str	r0, [r7, #28]
        break;
 8008078:	e009      	b.n	800808e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800807a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800807e:	61fb      	str	r3, [r7, #28]
        break;
 8008080:	e005      	b.n	800808e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800808c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 80fb 	beq.w	800828c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	685a      	ldr	r2, [r3, #4]
 800809a:	4613      	mov	r3, r2
 800809c:	005b      	lsls	r3, r3, #1
 800809e:	4413      	add	r3, r2
 80080a0:	69fa      	ldr	r2, [r7, #28]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d305      	bcc.n	80080b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80080ac:	69fa      	ldr	r2, [r7, #28]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d903      	bls.n	80080ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80080b8:	e0e8      	b.n	800828c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	2200      	movs	r2, #0
 80080be:	461c      	mov	r4, r3
 80080c0:	4615      	mov	r5, r2
 80080c2:	f04f 0200 	mov.w	r2, #0
 80080c6:	f04f 0300 	mov.w	r3, #0
 80080ca:	022b      	lsls	r3, r5, #8
 80080cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80080d0:	0222      	lsls	r2, r4, #8
 80080d2:	68f9      	ldr	r1, [r7, #12]
 80080d4:	6849      	ldr	r1, [r1, #4]
 80080d6:	0849      	lsrs	r1, r1, #1
 80080d8:	2000      	movs	r0, #0
 80080da:	4688      	mov	r8, r1
 80080dc:	4681      	mov	r9, r0
 80080de:	eb12 0a08 	adds.w	sl, r2, r8
 80080e2:	eb43 0b09 	adc.w	fp, r3, r9
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	603b      	str	r3, [r7, #0]
 80080ee:	607a      	str	r2, [r7, #4]
 80080f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080f4:	4650      	mov	r0, sl
 80080f6:	4659      	mov	r1, fp
 80080f8:	f7fd f86a 	bl	80051d0 <__aeabi_uldivmod>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	4613      	mov	r3, r2
 8008102:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800810a:	d308      	bcc.n	800811e <UART_SetConfig+0x3de>
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008112:	d204      	bcs.n	800811e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	60da      	str	r2, [r3, #12]
 800811c:	e0b6      	b.n	800828c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008124:	e0b2      	b.n	800828c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800812e:	d15e      	bne.n	80081ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008130:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008134:	2b08      	cmp	r3, #8
 8008136:	d828      	bhi.n	800818a <UART_SetConfig+0x44a>
 8008138:	a201      	add	r2, pc, #4	@ (adr r2, 8008140 <UART_SetConfig+0x400>)
 800813a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813e:	bf00      	nop
 8008140:	08008165 	.word	0x08008165
 8008144:	0800816d 	.word	0x0800816d
 8008148:	08008175 	.word	0x08008175
 800814c:	0800818b 	.word	0x0800818b
 8008150:	0800817b 	.word	0x0800817b
 8008154:	0800818b 	.word	0x0800818b
 8008158:	0800818b 	.word	0x0800818b
 800815c:	0800818b 	.word	0x0800818b
 8008160:	08008183 	.word	0x08008183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008164:	f7fe fd5e 	bl	8006c24 <HAL_RCC_GetPCLK1Freq>
 8008168:	61f8      	str	r0, [r7, #28]
        break;
 800816a:	e014      	b.n	8008196 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800816c:	f7fe fd70 	bl	8006c50 <HAL_RCC_GetPCLK2Freq>
 8008170:	61f8      	str	r0, [r7, #28]
        break;
 8008172:	e010      	b.n	8008196 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008174:	4b4d      	ldr	r3, [pc, #308]	@ (80082ac <UART_SetConfig+0x56c>)
 8008176:	61fb      	str	r3, [r7, #28]
        break;
 8008178:	e00d      	b.n	8008196 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800817a:	f7fe fcbb 	bl	8006af4 <HAL_RCC_GetSysClockFreq>
 800817e:	61f8      	str	r0, [r7, #28]
        break;
 8008180:	e009      	b.n	8008196 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008186:	61fb      	str	r3, [r7, #28]
        break;
 8008188:	e005      	b.n	8008196 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008194:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d077      	beq.n	800828c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	005a      	lsls	r2, r3, #1
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	085b      	lsrs	r3, r3, #1
 80081a6:	441a      	add	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	2b0f      	cmp	r3, #15
 80081b6:	d916      	bls.n	80081e6 <UART_SetConfig+0x4a6>
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081be:	d212      	bcs.n	80081e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	f023 030f 	bic.w	r3, r3, #15
 80081c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	085b      	lsrs	r3, r3, #1
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	f003 0307 	and.w	r3, r3, #7
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	8afb      	ldrh	r3, [r7, #22]
 80081d8:	4313      	orrs	r3, r2
 80081da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	8afa      	ldrh	r2, [r7, #22]
 80081e2:	60da      	str	r2, [r3, #12]
 80081e4:	e052      	b.n	800828c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80081ec:	e04e      	b.n	800828c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80081f2:	2b08      	cmp	r3, #8
 80081f4:	d827      	bhi.n	8008246 <UART_SetConfig+0x506>
 80081f6:	a201      	add	r2, pc, #4	@ (adr r2, 80081fc <UART_SetConfig+0x4bc>)
 80081f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fc:	08008221 	.word	0x08008221
 8008200:	08008229 	.word	0x08008229
 8008204:	08008231 	.word	0x08008231
 8008208:	08008247 	.word	0x08008247
 800820c:	08008237 	.word	0x08008237
 8008210:	08008247 	.word	0x08008247
 8008214:	08008247 	.word	0x08008247
 8008218:	08008247 	.word	0x08008247
 800821c:	0800823f 	.word	0x0800823f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008220:	f7fe fd00 	bl	8006c24 <HAL_RCC_GetPCLK1Freq>
 8008224:	61f8      	str	r0, [r7, #28]
        break;
 8008226:	e014      	b.n	8008252 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008228:	f7fe fd12 	bl	8006c50 <HAL_RCC_GetPCLK2Freq>
 800822c:	61f8      	str	r0, [r7, #28]
        break;
 800822e:	e010      	b.n	8008252 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008230:	4b1e      	ldr	r3, [pc, #120]	@ (80082ac <UART_SetConfig+0x56c>)
 8008232:	61fb      	str	r3, [r7, #28]
        break;
 8008234:	e00d      	b.n	8008252 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008236:	f7fe fc5d 	bl	8006af4 <HAL_RCC_GetSysClockFreq>
 800823a:	61f8      	str	r0, [r7, #28]
        break;
 800823c:	e009      	b.n	8008252 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800823e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008242:	61fb      	str	r3, [r7, #28]
        break;
 8008244:	e005      	b.n	8008252 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008246:	2300      	movs	r3, #0
 8008248:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008250:	bf00      	nop
    }

    if (pclk != 0U)
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d019      	beq.n	800828c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	085a      	lsrs	r2, r3, #1
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	441a      	add	r2, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	fbb2 f3f3 	udiv	r3, r2, r3
 800826a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	2b0f      	cmp	r3, #15
 8008270:	d909      	bls.n	8008286 <UART_SetConfig+0x546>
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008278:	d205      	bcs.n	8008286 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	b29a      	uxth	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	60da      	str	r2, [r3, #12]
 8008284:	e002      	b.n	800828c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008298:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800829c:	4618      	mov	r0, r3
 800829e:	3728      	adds	r7, #40	@ 0x28
 80082a0:	46bd      	mov	sp, r7
 80082a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082a6:	bf00      	nop
 80082a8:	40008000 	.word	0x40008000
 80082ac:	00f42400 	.word	0x00f42400

080082b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082bc:	f003 0308 	and.w	r3, r3, #8
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00a      	beq.n	80082da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	430a      	orrs	r2, r1
 80082d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00a      	beq.n	80082fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	430a      	orrs	r2, r1
 80082fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008300:	f003 0302 	and.w	r3, r3, #2
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00a      	beq.n	800831e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008322:	f003 0304 	and.w	r3, r3, #4
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	430a      	orrs	r2, r1
 800833e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008344:	f003 0310 	and.w	r3, r3, #16
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00a      	beq.n	8008362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	430a      	orrs	r2, r1
 8008360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008366:	f003 0320 	and.w	r3, r3, #32
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00a      	beq.n	8008384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	430a      	orrs	r2, r1
 8008382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800838c:	2b00      	cmp	r3, #0
 800838e:	d01a      	beq.n	80083c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	430a      	orrs	r2, r1
 80083a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083ae:	d10a      	bne.n	80083c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	430a      	orrs	r2, r1
 80083c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00a      	beq.n	80083e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	430a      	orrs	r2, r1
 80083e6:	605a      	str	r2, [r3, #4]
  }
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b098      	sub	sp, #96	@ 0x60
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008404:	f7fd fb48 	bl	8005a98 <HAL_GetTick>
 8008408:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0308 	and.w	r3, r3, #8
 8008414:	2b08      	cmp	r3, #8
 8008416:	d12e      	bne.n	8008476 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008418:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008420:	2200      	movs	r2, #0
 8008422:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f88c 	bl	8008544 <UART_WaitOnFlagUntilTimeout>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d021      	beq.n	8008476 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800843a:	e853 3f00 	ldrex	r3, [r3]
 800843e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008442:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008446:	653b      	str	r3, [r7, #80]	@ 0x50
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	461a      	mov	r2, r3
 800844e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008450:	647b      	str	r3, [r7, #68]	@ 0x44
 8008452:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008454:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008458:	e841 2300 	strex	r3, r2, [r1]
 800845c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800845e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1e6      	bne.n	8008432 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2220      	movs	r2, #32
 8008468:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e062      	b.n	800853c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0304 	and.w	r3, r3, #4
 8008480:	2b04      	cmp	r3, #4
 8008482:	d149      	bne.n	8008518 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008484:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800848c:	2200      	movs	r2, #0
 800848e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f856 	bl	8008544 <UART_WaitOnFlagUntilTimeout>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d03c      	beq.n	8008518 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a6:	e853 3f00 	ldrex	r3, [r3]
 80084aa:	623b      	str	r3, [r7, #32]
   return(result);
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	461a      	mov	r2, r3
 80084ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80084be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084c4:	e841 2300 	strex	r3, r2, [r1]
 80084c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1e6      	bne.n	800849e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	3308      	adds	r3, #8
 80084d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	e853 3f00 	ldrex	r3, [r3]
 80084de:	60fb      	str	r3, [r7, #12]
   return(result);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f023 0301 	bic.w	r3, r3, #1
 80084e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3308      	adds	r3, #8
 80084ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084f0:	61fa      	str	r2, [r7, #28]
 80084f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f4:	69b9      	ldr	r1, [r7, #24]
 80084f6:	69fa      	ldr	r2, [r7, #28]
 80084f8:	e841 2300 	strex	r3, r2, [r1]
 80084fc:	617b      	str	r3, [r7, #20]
   return(result);
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1e5      	bne.n	80084d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2220      	movs	r2, #32
 8008508:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	e011      	b.n	800853c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2220      	movs	r2, #32
 800851c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2220      	movs	r2, #32
 8008522:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3758      	adds	r7, #88	@ 0x58
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	603b      	str	r3, [r7, #0]
 8008550:	4613      	mov	r3, r2
 8008552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008554:	e04f      	b.n	80085f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855c:	d04b      	beq.n	80085f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800855e:	f7fd fa9b 	bl	8005a98 <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	69ba      	ldr	r2, [r7, #24]
 800856a:	429a      	cmp	r2, r3
 800856c:	d302      	bcc.n	8008574 <UART_WaitOnFlagUntilTimeout+0x30>
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e04e      	b.n	8008616 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0304 	and.w	r3, r3, #4
 8008582:	2b00      	cmp	r3, #0
 8008584:	d037      	beq.n	80085f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2b80      	cmp	r3, #128	@ 0x80
 800858a:	d034      	beq.n	80085f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	2b40      	cmp	r3, #64	@ 0x40
 8008590:	d031      	beq.n	80085f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69db      	ldr	r3, [r3, #28]
 8008598:	f003 0308 	and.w	r3, r3, #8
 800859c:	2b08      	cmp	r3, #8
 800859e:	d110      	bne.n	80085c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2208      	movs	r2, #8
 80085a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f000 f838 	bl	800861e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2208      	movs	r2, #8
 80085b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e029      	b.n	8008616 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	69db      	ldr	r3, [r3, #28]
 80085c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085d0:	d111      	bne.n	80085f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80085da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f000 f81e 	bl	800861e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2220      	movs	r2, #32
 80085e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e00f      	b.n	8008616 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	69da      	ldr	r2, [r3, #28]
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	4013      	ands	r3, r2
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	429a      	cmp	r2, r3
 8008604:	bf0c      	ite	eq
 8008606:	2301      	moveq	r3, #1
 8008608:	2300      	movne	r3, #0
 800860a:	b2db      	uxtb	r3, r3
 800860c:	461a      	mov	r2, r3
 800860e:	79fb      	ldrb	r3, [r7, #7]
 8008610:	429a      	cmp	r2, r3
 8008612:	d0a0      	beq.n	8008556 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800861e:	b480      	push	{r7}
 8008620:	b095      	sub	sp, #84	@ 0x54
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800862e:	e853 3f00 	ldrex	r3, [r3]
 8008632:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008636:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800863a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	461a      	mov	r2, r3
 8008642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008644:	643b      	str	r3, [r7, #64]	@ 0x40
 8008646:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008648:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800864a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800864c:	e841 2300 	strex	r3, r2, [r1]
 8008650:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1e6      	bne.n	8008626 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3308      	adds	r3, #8
 800865e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008660:	6a3b      	ldr	r3, [r7, #32]
 8008662:	e853 3f00 	ldrex	r3, [r3]
 8008666:	61fb      	str	r3, [r7, #28]
   return(result);
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	f023 0301 	bic.w	r3, r3, #1
 800866e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3308      	adds	r3, #8
 8008676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008678:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800867a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800867e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008680:	e841 2300 	strex	r3, r2, [r1]
 8008684:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e5      	bne.n	8008658 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008690:	2b01      	cmp	r3, #1
 8008692:	d118      	bne.n	80086c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	e853 3f00 	ldrex	r3, [r3]
 80086a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	f023 0310 	bic.w	r3, r3, #16
 80086a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086b2:	61bb      	str	r3, [r7, #24]
 80086b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b6:	6979      	ldr	r1, [r7, #20]
 80086b8:	69ba      	ldr	r2, [r7, #24]
 80086ba:	e841 2300 	strex	r3, r2, [r1]
 80086be:	613b      	str	r3, [r7, #16]
   return(result);
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1e6      	bne.n	8008694 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2220      	movs	r2, #32
 80086ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80086da:	bf00      	nop
 80086dc:	3754      	adds	r7, #84	@ 0x54
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
	...

080086e8 <__NVIC_SetPriority>:
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	4603      	mov	r3, r0
 80086f0:	6039      	str	r1, [r7, #0]
 80086f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	db0a      	blt.n	8008712 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	490c      	ldr	r1, [pc, #48]	@ (8008734 <__NVIC_SetPriority+0x4c>)
 8008702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008706:	0112      	lsls	r2, r2, #4
 8008708:	b2d2      	uxtb	r2, r2
 800870a:	440b      	add	r3, r1
 800870c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008710:	e00a      	b.n	8008728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	b2da      	uxtb	r2, r3
 8008716:	4908      	ldr	r1, [pc, #32]	@ (8008738 <__NVIC_SetPriority+0x50>)
 8008718:	79fb      	ldrb	r3, [r7, #7]
 800871a:	f003 030f 	and.w	r3, r3, #15
 800871e:	3b04      	subs	r3, #4
 8008720:	0112      	lsls	r2, r2, #4
 8008722:	b2d2      	uxtb	r2, r2
 8008724:	440b      	add	r3, r1
 8008726:	761a      	strb	r2, [r3, #24]
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	e000e100 	.word	0xe000e100
 8008738:	e000ed00 	.word	0xe000ed00

0800873c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800873c:	b580      	push	{r7, lr}
 800873e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008740:	4b05      	ldr	r3, [pc, #20]	@ (8008758 <SysTick_Handler+0x1c>)
 8008742:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008744:	f001 fd18 	bl	800a178 <xTaskGetSchedulerState>
 8008748:	4603      	mov	r3, r0
 800874a:	2b01      	cmp	r3, #1
 800874c:	d001      	beq.n	8008752 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800874e:	f002 fb13 	bl	800ad78 <xPortSysTickHandler>
  }
}
 8008752:	bf00      	nop
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	e000e010 	.word	0xe000e010

0800875c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008760:	2100      	movs	r1, #0
 8008762:	f06f 0004 	mvn.w	r0, #4
 8008766:	f7ff ffbf 	bl	80086e8 <__NVIC_SetPriority>
#endif
}
 800876a:	bf00      	nop
 800876c:	bd80      	pop	{r7, pc}
	...

08008770 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008776:	f3ef 8305 	mrs	r3, IPSR
 800877a:	603b      	str	r3, [r7, #0]
  return(result);
 800877c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800877e:	2b00      	cmp	r3, #0
 8008780:	d003      	beq.n	800878a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008782:	f06f 0305 	mvn.w	r3, #5
 8008786:	607b      	str	r3, [r7, #4]
 8008788:	e00c      	b.n	80087a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800878a:	4b0a      	ldr	r3, [pc, #40]	@ (80087b4 <osKernelInitialize+0x44>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d105      	bne.n	800879e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008792:	4b08      	ldr	r3, [pc, #32]	@ (80087b4 <osKernelInitialize+0x44>)
 8008794:	2201      	movs	r2, #1
 8008796:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008798:	2300      	movs	r3, #0
 800879a:	607b      	str	r3, [r7, #4]
 800879c:	e002      	b.n	80087a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800879e:	f04f 33ff 	mov.w	r3, #4294967295
 80087a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80087a4:	687b      	ldr	r3, [r7, #4]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	20000108 	.word	0x20000108

080087b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087be:	f3ef 8305 	mrs	r3, IPSR
 80087c2:	603b      	str	r3, [r7, #0]
  return(result);
 80087c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d003      	beq.n	80087d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80087ca:	f06f 0305 	mvn.w	r3, #5
 80087ce:	607b      	str	r3, [r7, #4]
 80087d0:	e010      	b.n	80087f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80087d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008800 <osKernelStart+0x48>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d109      	bne.n	80087ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80087da:	f7ff ffbf 	bl	800875c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80087de:	4b08      	ldr	r3, [pc, #32]	@ (8008800 <osKernelStart+0x48>)
 80087e0:	2202      	movs	r2, #2
 80087e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80087e4:	f001 f87a 	bl	80098dc <vTaskStartScheduler>
      stat = osOK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	607b      	str	r3, [r7, #4]
 80087ec:	e002      	b.n	80087f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80087ee:	f04f 33ff 	mov.w	r3, #4294967295
 80087f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80087f4:	687b      	ldr	r3, [r7, #4]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	20000108 	.word	0x20000108

08008804 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008804:	b580      	push	{r7, lr}
 8008806:	b08e      	sub	sp, #56	@ 0x38
 8008808:	af04      	add	r7, sp, #16
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008810:	2300      	movs	r3, #0
 8008812:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008814:	f3ef 8305 	mrs	r3, IPSR
 8008818:	617b      	str	r3, [r7, #20]
  return(result);
 800881a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800881c:	2b00      	cmp	r3, #0
 800881e:	d17e      	bne.n	800891e <osThreadNew+0x11a>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d07b      	beq.n	800891e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008826:	2380      	movs	r3, #128	@ 0x80
 8008828:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800882a:	2318      	movs	r3, #24
 800882c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800882e:	2300      	movs	r3, #0
 8008830:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008832:	f04f 33ff 	mov.w	r3, #4294967295
 8008836:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d045      	beq.n	80088ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d002      	beq.n	800884c <osThreadNew+0x48>
        name = attr->name;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d008      	beq.n	8008872 <osThreadNew+0x6e>
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	2b38      	cmp	r3, #56	@ 0x38
 8008864:	d805      	bhi.n	8008872 <osThreadNew+0x6e>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <osThreadNew+0x72>
        return (NULL);
 8008872:	2300      	movs	r3, #0
 8008874:	e054      	b.n	8008920 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	089b      	lsrs	r3, r3, #2
 8008884:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00e      	beq.n	80088ac <osThreadNew+0xa8>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	2b5b      	cmp	r3, #91	@ 0x5b
 8008894:	d90a      	bls.n	80088ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800889a:	2b00      	cmp	r3, #0
 800889c:	d006      	beq.n	80088ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d002      	beq.n	80088ac <osThreadNew+0xa8>
        mem = 1;
 80088a6:	2301      	movs	r3, #1
 80088a8:	61bb      	str	r3, [r7, #24]
 80088aa:	e010      	b.n	80088ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10c      	bne.n	80088ce <osThreadNew+0xca>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d108      	bne.n	80088ce <osThreadNew+0xca>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d104      	bne.n	80088ce <osThreadNew+0xca>
          mem = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	61bb      	str	r3, [r7, #24]
 80088c8:	e001      	b.n	80088ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d110      	bne.n	80088f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088dc:	9202      	str	r2, [sp, #8]
 80088de:	9301      	str	r3, [sp, #4]
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	6a3a      	ldr	r2, [r7, #32]
 80088e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 fe1a 	bl	8009524 <xTaskCreateStatic>
 80088f0:	4603      	mov	r3, r0
 80088f2:	613b      	str	r3, [r7, #16]
 80088f4:	e013      	b.n	800891e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d110      	bne.n	800891e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80088fc:	6a3b      	ldr	r3, [r7, #32]
 80088fe:	b29a      	uxth	r2, r3
 8008900:	f107 0310 	add.w	r3, r7, #16
 8008904:	9301      	str	r3, [sp, #4]
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f000 fe68 	bl	80095e4 <xTaskCreate>
 8008914:	4603      	mov	r3, r0
 8008916:	2b01      	cmp	r3, #1
 8008918:	d001      	beq.n	800891e <osThreadNew+0x11a>
            hTask = NULL;
 800891a:	2300      	movs	r3, #0
 800891c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800891e:	693b      	ldr	r3, [r7, #16]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3728      	adds	r7, #40	@ 0x28
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008930:	f3ef 8305 	mrs	r3, IPSR
 8008934:	60bb      	str	r3, [r7, #8]
  return(result);
 8008936:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008938:	2b00      	cmp	r3, #0
 800893a:	d003      	beq.n	8008944 <osDelay+0x1c>
    stat = osErrorISR;
 800893c:	f06f 0305 	mvn.w	r3, #5
 8008940:	60fb      	str	r3, [r7, #12]
 8008942:	e007      	b.n	8008954 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008944:	2300      	movs	r3, #0
 8008946:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d002      	beq.n	8008954 <osDelay+0x2c>
      vTaskDelay(ticks);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 ff8e 	bl	8009870 <vTaskDelay>
    }
  }

  return (stat);
 8008954:	68fb      	ldr	r3, [r7, #12]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
	...

08008960 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	4a07      	ldr	r2, [pc, #28]	@ (800898c <vApplicationGetIdleTaskMemory+0x2c>)
 8008970:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	4a06      	ldr	r2, [pc, #24]	@ (8008990 <vApplicationGetIdleTaskMemory+0x30>)
 8008976:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2280      	movs	r2, #128	@ 0x80
 800897c:	601a      	str	r2, [r3, #0]
}
 800897e:	bf00      	nop
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	2000010c 	.word	0x2000010c
 8008990:	20000168 	.word	0x20000168

08008994 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	4a07      	ldr	r2, [pc, #28]	@ (80089c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80089a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	4a06      	ldr	r2, [pc, #24]	@ (80089c4 <vApplicationGetTimerTaskMemory+0x30>)
 80089aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80089b2:	601a      	str	r2, [r3, #0]
}
 80089b4:	bf00      	nop
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	20000368 	.word	0x20000368
 80089c4:	200003c4 	.word	0x200003c4

080089c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f103 0208 	add.w	r2, r3, #8
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f04f 32ff 	mov.w	r2, #4294967295
 80089e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f103 0208 	add.w	r2, r3, #8
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f103 0208 	add.w	r2, r3, #8
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a16:	bf00      	nop
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a22:	b480      	push	{r7}
 8008a24:	b085      	sub	sp, #20
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	689a      	ldr	r2, [r3, #8]
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	683a      	ldr	r2, [r7, #0]
 8008a46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	683a      	ldr	r2, [r7, #0]
 8008a4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	1c5a      	adds	r2, r3, #1
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	601a      	str	r2, [r3, #0]
}
 8008a5e:	bf00      	nop
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	b085      	sub	sp, #20
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a80:	d103      	bne.n	8008a8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	60fb      	str	r3, [r7, #12]
 8008a88:	e00c      	b.n	8008aa4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	e002      	b.n	8008a98 <vListInsert+0x2e>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d2f6      	bcs.n	8008a92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	683a      	ldr	r2, [r7, #0]
 8008ab2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	683a      	ldr	r2, [r7, #0]
 8008abe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	1c5a      	adds	r2, r3, #1
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	601a      	str	r2, [r3, #0]
}
 8008ad0:	bf00      	nop
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	6892      	ldr	r2, [r2, #8]
 8008af2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	6852      	ldr	r2, [r2, #4]
 8008afc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d103      	bne.n	8008b10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	689a      	ldr	r2, [r3, #8]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	1e5a      	subs	r2, r3, #1
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10b      	bne.n	8008b5c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008b56:	bf00      	nop
 8008b58:	bf00      	nop
 8008b5a:	e7fd      	b.n	8008b58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b5c:	f002 f87c 	bl	800ac58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b68:	68f9      	ldr	r1, [r7, #12]
 8008b6a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008b6c:	fb01 f303 	mul.w	r3, r1, r3
 8008b70:	441a      	add	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	68f9      	ldr	r1, [r7, #12]
 8008b90:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008b92:	fb01 f303 	mul.w	r3, r1, r3
 8008b96:	441a      	add	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	22ff      	movs	r2, #255	@ 0xff
 8008ba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	22ff      	movs	r2, #255	@ 0xff
 8008ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d114      	bne.n	8008bdc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d01a      	beq.n	8008bf0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	3310      	adds	r3, #16
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f001 f91a 	bl	8009df8 <xTaskRemoveFromEventList>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d012      	beq.n	8008bf0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008bca:	4b0d      	ldr	r3, [pc, #52]	@ (8008c00 <xQueueGenericReset+0xd0>)
 8008bcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bd0:	601a      	str	r2, [r3, #0]
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	e009      	b.n	8008bf0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	3310      	adds	r3, #16
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7ff fef1 	bl	80089c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	3324      	adds	r3, #36	@ 0x24
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7ff feec 	bl	80089c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008bf0:	f002 f864 	bl	800acbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008bf4:	2301      	movs	r3, #1
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	e000ed04 	.word	0xe000ed04

08008c04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b08e      	sub	sp, #56	@ 0x38
 8008c08:	af02      	add	r7, sp, #8
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
 8008c10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10b      	bne.n	8008c30 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008c2a:	bf00      	nop
 8008c2c:	bf00      	nop
 8008c2e:	e7fd      	b.n	8008c2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d10b      	bne.n	8008c4e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c48:	bf00      	nop
 8008c4a:	bf00      	nop
 8008c4c:	e7fd      	b.n	8008c4a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <xQueueGenericCreateStatic+0x56>
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <xQueueGenericCreateStatic+0x5a>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e000      	b.n	8008c60 <xQueueGenericCreateStatic+0x5c>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10b      	bne.n	8008c7c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	623b      	str	r3, [r7, #32]
}
 8008c76:	bf00      	nop
 8008c78:	bf00      	nop
 8008c7a:	e7fd      	b.n	8008c78 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d102      	bne.n	8008c88 <xQueueGenericCreateStatic+0x84>
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d101      	bne.n	8008c8c <xQueueGenericCreateStatic+0x88>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e000      	b.n	8008c8e <xQueueGenericCreateStatic+0x8a>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d10b      	bne.n	8008caa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	61fb      	str	r3, [r7, #28]
}
 8008ca4:	bf00      	nop
 8008ca6:	bf00      	nop
 8008ca8:	e7fd      	b.n	8008ca6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008caa:	2350      	movs	r3, #80	@ 0x50
 8008cac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2b50      	cmp	r3, #80	@ 0x50
 8008cb2:	d00b      	beq.n	8008ccc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	61bb      	str	r3, [r7, #24]
}
 8008cc6:	bf00      	nop
 8008cc8:	bf00      	nop
 8008cca:	e7fd      	b.n	8008cc8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ccc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00d      	beq.n	8008cf4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ce0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	68b9      	ldr	r1, [r7, #8]
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f000 f805 	bl	8008cfe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3730      	adds	r7, #48	@ 0x30
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	607a      	str	r2, [r7, #4]
 8008d0a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d103      	bne.n	8008d1a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	69ba      	ldr	r2, [r7, #24]
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	e002      	b.n	8008d20 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d2c:	2101      	movs	r1, #1
 8008d2e:	69b8      	ldr	r0, [r7, #24]
 8008d30:	f7ff fefe 	bl	8008b30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	78fa      	ldrb	r2, [r7, #3]
 8008d38:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d3c:	bf00      	nop
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b08e      	sub	sp, #56	@ 0x38
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
 8008d50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d52:	2300      	movs	r3, #0
 8008d54:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10b      	bne.n	8008d78 <xQueueGenericSend+0x34>
	__asm volatile
 8008d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d64:	f383 8811 	msr	BASEPRI, r3
 8008d68:	f3bf 8f6f 	isb	sy
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008d72:	bf00      	nop
 8008d74:	bf00      	nop
 8008d76:	e7fd      	b.n	8008d74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d103      	bne.n	8008d86 <xQueueGenericSend+0x42>
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d101      	bne.n	8008d8a <xQueueGenericSend+0x46>
 8008d86:	2301      	movs	r3, #1
 8008d88:	e000      	b.n	8008d8c <xQueueGenericSend+0x48>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10b      	bne.n	8008da8 <xQueueGenericSend+0x64>
	__asm volatile
 8008d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008da2:	bf00      	nop
 8008da4:	bf00      	nop
 8008da6:	e7fd      	b.n	8008da4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d103      	bne.n	8008db6 <xQueueGenericSend+0x72>
 8008dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d101      	bne.n	8008dba <xQueueGenericSend+0x76>
 8008db6:	2301      	movs	r3, #1
 8008db8:	e000      	b.n	8008dbc <xQueueGenericSend+0x78>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10b      	bne.n	8008dd8 <xQueueGenericSend+0x94>
	__asm volatile
 8008dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc4:	f383 8811 	msr	BASEPRI, r3
 8008dc8:	f3bf 8f6f 	isb	sy
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	623b      	str	r3, [r7, #32]
}
 8008dd2:	bf00      	nop
 8008dd4:	bf00      	nop
 8008dd6:	e7fd      	b.n	8008dd4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dd8:	f001 f9ce 	bl	800a178 <xTaskGetSchedulerState>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d102      	bne.n	8008de8 <xQueueGenericSend+0xa4>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d101      	bne.n	8008dec <xQueueGenericSend+0xa8>
 8008de8:	2301      	movs	r3, #1
 8008dea:	e000      	b.n	8008dee <xQueueGenericSend+0xaa>
 8008dec:	2300      	movs	r3, #0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10b      	bne.n	8008e0a <xQueueGenericSend+0xc6>
	__asm volatile
 8008df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	61fb      	str	r3, [r7, #28]
}
 8008e04:	bf00      	nop
 8008e06:	bf00      	nop
 8008e08:	e7fd      	b.n	8008e06 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e0a:	f001 ff25 	bl	800ac58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d302      	bcc.n	8008e20 <xQueueGenericSend+0xdc>
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d129      	bne.n	8008e74 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	68b9      	ldr	r1, [r7, #8]
 8008e24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e26:	f000 fa0f 	bl	8009248 <prvCopyDataToQueue>
 8008e2a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d010      	beq.n	8008e56 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e36:	3324      	adds	r3, #36	@ 0x24
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f000 ffdd 	bl	8009df8 <xTaskRemoveFromEventList>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d013      	beq.n	8008e6c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e44:	4b3f      	ldr	r3, [pc, #252]	@ (8008f44 <xQueueGenericSend+0x200>)
 8008e46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	f3bf 8f6f 	isb	sy
 8008e54:	e00a      	b.n	8008e6c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d007      	beq.n	8008e6c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008e5c:	4b39      	ldr	r3, [pc, #228]	@ (8008f44 <xQueueGenericSend+0x200>)
 8008e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e6c:	f001 ff26 	bl	800acbc <vPortExitCritical>
				return pdPASS;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e063      	b.n	8008f3c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d103      	bne.n	8008e82 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e7a:	f001 ff1f 	bl	800acbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	e05c      	b.n	8008f3c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d106      	bne.n	8008e96 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e88:	f107 0314 	add.w	r3, r7, #20
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f001 f817 	bl	8009ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e92:	2301      	movs	r3, #1
 8008e94:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e96:	f001 ff11 	bl	800acbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e9a:	f000 fd87 	bl	80099ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e9e:	f001 fedb 	bl	800ac58 <vPortEnterCritical>
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ea8:	b25b      	sxtb	r3, r3
 8008eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eae:	d103      	bne.n	8008eb8 <xQueueGenericSend+0x174>
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ebe:	b25b      	sxtb	r3, r3
 8008ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec4:	d103      	bne.n	8008ece <xQueueGenericSend+0x18a>
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ece:	f001 fef5 	bl	800acbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ed2:	1d3a      	adds	r2, r7, #4
 8008ed4:	f107 0314 	add.w	r3, r7, #20
 8008ed8:	4611      	mov	r1, r2
 8008eda:	4618      	mov	r0, r3
 8008edc:	f001 f806 	bl	8009eec <xTaskCheckForTimeOut>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d124      	bne.n	8008f30 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ee6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ee8:	f000 faa6 	bl	8009438 <prvIsQueueFull>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d018      	beq.n	8008f24 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef4:	3310      	adds	r3, #16
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	4611      	mov	r1, r2
 8008efa:	4618      	mov	r0, r3
 8008efc:	f000 ff2a 	bl	8009d54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f02:	f000 fa31 	bl	8009368 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f06:	f000 fd5f 	bl	80099c8 <xTaskResumeAll>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f47f af7c 	bne.w	8008e0a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008f12:	4b0c      	ldr	r3, [pc, #48]	@ (8008f44 <xQueueGenericSend+0x200>)
 8008f14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f18:	601a      	str	r2, [r3, #0]
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	e772      	b.n	8008e0a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f26:	f000 fa1f 	bl	8009368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f2a:	f000 fd4d 	bl	80099c8 <xTaskResumeAll>
 8008f2e:	e76c      	b.n	8008e0a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f32:	f000 fa19 	bl	8009368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f36:	f000 fd47 	bl	80099c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3738      	adds	r7, #56	@ 0x38
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	e000ed04 	.word	0xe000ed04

08008f48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b090      	sub	sp, #64	@ 0x40
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
 8008f54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10b      	bne.n	8008f78 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008f72:	bf00      	nop
 8008f74:	bf00      	nop
 8008f76:	e7fd      	b.n	8008f74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d103      	bne.n	8008f86 <xQueueGenericSendFromISR+0x3e>
 8008f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d101      	bne.n	8008f8a <xQueueGenericSendFromISR+0x42>
 8008f86:	2301      	movs	r3, #1
 8008f88:	e000      	b.n	8008f8c <xQueueGenericSendFromISR+0x44>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10b      	bne.n	8008fa8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008fa2:	bf00      	nop
 8008fa4:	bf00      	nop
 8008fa6:	e7fd      	b.n	8008fa4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d103      	bne.n	8008fb6 <xQueueGenericSendFromISR+0x6e>
 8008fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d101      	bne.n	8008fba <xQueueGenericSendFromISR+0x72>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e000      	b.n	8008fbc <xQueueGenericSendFromISR+0x74>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10b      	bne.n	8008fd8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	623b      	str	r3, [r7, #32]
}
 8008fd2:	bf00      	nop
 8008fd4:	bf00      	nop
 8008fd6:	e7fd      	b.n	8008fd4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008fd8:	f001 ff1e 	bl	800ae18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008fdc:	f3ef 8211 	mrs	r2, BASEPRI
 8008fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	61fa      	str	r2, [r7, #28]
 8008ff2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ff4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ff6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009000:	429a      	cmp	r2, r3
 8009002:	d302      	bcc.n	800900a <xQueueGenericSendFromISR+0xc2>
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	2b02      	cmp	r3, #2
 8009008:	d12f      	bne.n	800906a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800900a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800900c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009010:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009018:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	68b9      	ldr	r1, [r7, #8]
 800901e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009020:	f000 f912 	bl	8009248 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009024:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800902c:	d112      	bne.n	8009054 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800902e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009032:	2b00      	cmp	r3, #0
 8009034:	d016      	beq.n	8009064 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009038:	3324      	adds	r3, #36	@ 0x24
 800903a:	4618      	mov	r0, r3
 800903c:	f000 fedc 	bl	8009df8 <xTaskRemoveFromEventList>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00e      	beq.n	8009064 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00b      	beq.n	8009064 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	601a      	str	r2, [r3, #0]
 8009052:	e007      	b.n	8009064 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009054:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009058:	3301      	adds	r3, #1
 800905a:	b2db      	uxtb	r3, r3
 800905c:	b25a      	sxtb	r2, r3
 800905e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009064:	2301      	movs	r3, #1
 8009066:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009068:	e001      	b.n	800906e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800906a:	2300      	movs	r3, #0
 800906c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800906e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009070:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009078:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800907a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800907c:	4618      	mov	r0, r3
 800907e:	3740      	adds	r7, #64	@ 0x40
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b08c      	sub	sp, #48	@ 0x30
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009090:	2300      	movs	r3, #0
 8009092:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10b      	bne.n	80090b6 <xQueueReceive+0x32>
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	623b      	str	r3, [r7, #32]
}
 80090b0:	bf00      	nop
 80090b2:	bf00      	nop
 80090b4:	e7fd      	b.n	80090b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d103      	bne.n	80090c4 <xQueueReceive+0x40>
 80090bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d101      	bne.n	80090c8 <xQueueReceive+0x44>
 80090c4:	2301      	movs	r3, #1
 80090c6:	e000      	b.n	80090ca <xQueueReceive+0x46>
 80090c8:	2300      	movs	r3, #0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d10b      	bne.n	80090e6 <xQueueReceive+0x62>
	__asm volatile
 80090ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	61fb      	str	r3, [r7, #28]
}
 80090e0:	bf00      	nop
 80090e2:	bf00      	nop
 80090e4:	e7fd      	b.n	80090e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090e6:	f001 f847 	bl	800a178 <xTaskGetSchedulerState>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d102      	bne.n	80090f6 <xQueueReceive+0x72>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d101      	bne.n	80090fa <xQueueReceive+0x76>
 80090f6:	2301      	movs	r3, #1
 80090f8:	e000      	b.n	80090fc <xQueueReceive+0x78>
 80090fa:	2300      	movs	r3, #0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10b      	bne.n	8009118 <xQueueReceive+0x94>
	__asm volatile
 8009100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	61bb      	str	r3, [r7, #24]
}
 8009112:	bf00      	nop
 8009114:	bf00      	nop
 8009116:	e7fd      	b.n	8009114 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009118:	f001 fd9e 	bl	800ac58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800911c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800911e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009120:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009124:	2b00      	cmp	r3, #0
 8009126:	d01f      	beq.n	8009168 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009128:	68b9      	ldr	r1, [r7, #8]
 800912a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800912c:	f000 f8f6 	bl	800931c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009132:	1e5a      	subs	r2, r3, #1
 8009134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009136:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00f      	beq.n	8009160 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009142:	3310      	adds	r3, #16
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fe57 	bl	8009df8 <xTaskRemoveFromEventList>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d007      	beq.n	8009160 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009150:	4b3c      	ldr	r3, [pc, #240]	@ (8009244 <xQueueReceive+0x1c0>)
 8009152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009156:	601a      	str	r2, [r3, #0]
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009160:	f001 fdac 	bl	800acbc <vPortExitCritical>
				return pdPASS;
 8009164:	2301      	movs	r3, #1
 8009166:	e069      	b.n	800923c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d103      	bne.n	8009176 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800916e:	f001 fda5 	bl	800acbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009172:	2300      	movs	r3, #0
 8009174:	e062      	b.n	800923c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009178:	2b00      	cmp	r3, #0
 800917a:	d106      	bne.n	800918a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800917c:	f107 0310 	add.w	r3, r7, #16
 8009180:	4618      	mov	r0, r3
 8009182:	f000 fe9d 	bl	8009ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009186:	2301      	movs	r3, #1
 8009188:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800918a:	f001 fd97 	bl	800acbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800918e:	f000 fc0d 	bl	80099ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009192:	f001 fd61 	bl	800ac58 <vPortEnterCritical>
 8009196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009198:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800919c:	b25b      	sxtb	r3, r3
 800919e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a2:	d103      	bne.n	80091ac <xQueueReceive+0x128>
 80091a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091b2:	b25b      	sxtb	r3, r3
 80091b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b8:	d103      	bne.n	80091c2 <xQueueReceive+0x13e>
 80091ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091c2:	f001 fd7b 	bl	800acbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091c6:	1d3a      	adds	r2, r7, #4
 80091c8:	f107 0310 	add.w	r3, r7, #16
 80091cc:	4611      	mov	r1, r2
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fe8c 	bl	8009eec <xTaskCheckForTimeOut>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d123      	bne.n	8009222 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091dc:	f000 f916 	bl	800940c <prvIsQueueEmpty>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d017      	beq.n	8009216 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80091e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e8:	3324      	adds	r3, #36	@ 0x24
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	4611      	mov	r1, r2
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 fdb0 	bl	8009d54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80091f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091f6:	f000 f8b7 	bl	8009368 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80091fa:	f000 fbe5 	bl	80099c8 <xTaskResumeAll>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d189      	bne.n	8009118 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009204:	4b0f      	ldr	r3, [pc, #60]	@ (8009244 <xQueueReceive+0x1c0>)
 8009206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800920a:	601a      	str	r2, [r3, #0]
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	e780      	b.n	8009118 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009216:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009218:	f000 f8a6 	bl	8009368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800921c:	f000 fbd4 	bl	80099c8 <xTaskResumeAll>
 8009220:	e77a      	b.n	8009118 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009222:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009224:	f000 f8a0 	bl	8009368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009228:	f000 fbce 	bl	80099c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800922c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800922e:	f000 f8ed 	bl	800940c <prvIsQueueEmpty>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	f43f af6f 	beq.w	8009118 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800923a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800923c:	4618      	mov	r0, r3
 800923e:	3730      	adds	r7, #48	@ 0x30
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	e000ed04 	.word	0xe000ed04

08009248 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009254:	2300      	movs	r3, #0
 8009256:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800925c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10d      	bne.n	8009282 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d14d      	bne.n	800930a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	4618      	mov	r0, r3
 8009274:	f000 ff9e 	bl	800a1b4 <xTaskPriorityDisinherit>
 8009278:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	609a      	str	r2, [r3, #8]
 8009280:	e043      	b.n	800930a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d119      	bne.n	80092bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6858      	ldr	r0, [r3, #4]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009290:	461a      	mov	r2, r3
 8009292:	68b9      	ldr	r1, [r7, #8]
 8009294:	f002 f81c 	bl	800b2d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a0:	441a      	add	r2, r3
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	685a      	ldr	r2, [r3, #4]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d32b      	bcc.n	800930a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	605a      	str	r2, [r3, #4]
 80092ba:	e026      	b.n	800930a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	68d8      	ldr	r0, [r3, #12]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092c4:	461a      	mov	r2, r3
 80092c6:	68b9      	ldr	r1, [r7, #8]
 80092c8:	f002 f802 	bl	800b2d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	68da      	ldr	r2, [r3, #12]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d4:	425b      	negs	r3, r3
 80092d6:	441a      	add	r2, r3
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	68da      	ldr	r2, [r3, #12]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d207      	bcs.n	80092f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	689a      	ldr	r2, [r3, #8]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092f0:	425b      	negs	r3, r3
 80092f2:	441a      	add	r2, r3
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d105      	bne.n	800930a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	3b01      	subs	r3, #1
 8009308:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	1c5a      	adds	r2, r3, #1
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009312:	697b      	ldr	r3, [r7, #20]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3718      	adds	r7, #24
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800932a:	2b00      	cmp	r3, #0
 800932c:	d018      	beq.n	8009360 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	68da      	ldr	r2, [r3, #12]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009336:	441a      	add	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	68da      	ldr	r2, [r3, #12]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	429a      	cmp	r2, r3
 8009346:	d303      	bcc.n	8009350 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	68d9      	ldr	r1, [r3, #12]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009358:	461a      	mov	r2, r3
 800935a:	6838      	ldr	r0, [r7, #0]
 800935c:	f001 ffb8 	bl	800b2d0 <memcpy>
	}
}
 8009360:	bf00      	nop
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009370:	f001 fc72 	bl	800ac58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800937a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800937c:	e011      	b.n	80093a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009382:	2b00      	cmp	r3, #0
 8009384:	d012      	beq.n	80093ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	3324      	adds	r3, #36	@ 0x24
 800938a:	4618      	mov	r0, r3
 800938c:	f000 fd34 	bl	8009df8 <xTaskRemoveFromEventList>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009396:	f000 fe0d 	bl	8009fb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	3b01      	subs	r3, #1
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	dce9      	bgt.n	800937e <prvUnlockQueue+0x16>
 80093aa:	e000      	b.n	80093ae <prvUnlockQueue+0x46>
					break;
 80093ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	22ff      	movs	r2, #255	@ 0xff
 80093b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80093b6:	f001 fc81 	bl	800acbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80093ba:	f001 fc4d 	bl	800ac58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093c6:	e011      	b.n	80093ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d012      	beq.n	80093f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	3310      	adds	r3, #16
 80093d4:	4618      	mov	r0, r3
 80093d6:	f000 fd0f 	bl	8009df8 <xTaskRemoveFromEventList>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80093e0:	f000 fde8 	bl	8009fb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	3b01      	subs	r3, #1
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	dce9      	bgt.n	80093c8 <prvUnlockQueue+0x60>
 80093f4:	e000      	b.n	80093f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80093f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	22ff      	movs	r2, #255	@ 0xff
 80093fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009400:	f001 fc5c 	bl	800acbc <vPortExitCritical>
}
 8009404:	bf00      	nop
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009414:	f001 fc20 	bl	800ac58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800941c:	2b00      	cmp	r3, #0
 800941e:	d102      	bne.n	8009426 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009420:	2301      	movs	r3, #1
 8009422:	60fb      	str	r3, [r7, #12]
 8009424:	e001      	b.n	800942a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009426:	2300      	movs	r3, #0
 8009428:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800942a:	f001 fc47 	bl	800acbc <vPortExitCritical>

	return xReturn;
 800942e:	68fb      	ldr	r3, [r7, #12]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009440:	f001 fc0a 	bl	800ac58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800944c:	429a      	cmp	r2, r3
 800944e:	d102      	bne.n	8009456 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009450:	2301      	movs	r3, #1
 8009452:	60fb      	str	r3, [r7, #12]
 8009454:	e001      	b.n	800945a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009456:	2300      	movs	r3, #0
 8009458:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800945a:	f001 fc2f 	bl	800acbc <vPortExitCritical>

	return xReturn;
 800945e:	68fb      	ldr	r3, [r7, #12]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009472:	2300      	movs	r3, #0
 8009474:	60fb      	str	r3, [r7, #12]
 8009476:	e014      	b.n	80094a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009478:	4a0f      	ldr	r2, [pc, #60]	@ (80094b8 <vQueueAddToRegistry+0x50>)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10b      	bne.n	800949c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009484:	490c      	ldr	r1, [pc, #48]	@ (80094b8 <vQueueAddToRegistry+0x50>)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	683a      	ldr	r2, [r7, #0]
 800948a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800948e:	4a0a      	ldr	r2, [pc, #40]	@ (80094b8 <vQueueAddToRegistry+0x50>)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	00db      	lsls	r3, r3, #3
 8009494:	4413      	add	r3, r2
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800949a:	e006      	b.n	80094aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	3301      	adds	r3, #1
 80094a0:	60fb      	str	r3, [r7, #12]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2b07      	cmp	r3, #7
 80094a6:	d9e7      	bls.n	8009478 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80094a8:	bf00      	nop
 80094aa:	bf00      	nop
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	200007c4 	.word	0x200007c4

080094bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80094cc:	f001 fbc4 	bl	800ac58 <vPortEnterCritical>
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80094d6:	b25b      	sxtb	r3, r3
 80094d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094dc:	d103      	bne.n	80094e6 <vQueueWaitForMessageRestricted+0x2a>
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80094ec:	b25b      	sxtb	r3, r3
 80094ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f2:	d103      	bne.n	80094fc <vQueueWaitForMessageRestricted+0x40>
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094fc:	f001 fbde 	bl	800acbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009504:	2b00      	cmp	r3, #0
 8009506:	d106      	bne.n	8009516 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	3324      	adds	r3, #36	@ 0x24
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	68b9      	ldr	r1, [r7, #8]
 8009510:	4618      	mov	r0, r3
 8009512:	f000 fc45 	bl	8009da0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009516:	6978      	ldr	r0, [r7, #20]
 8009518:	f7ff ff26 	bl	8009368 <prvUnlockQueue>
	}
 800951c:	bf00      	nop
 800951e:	3718      	adds	r7, #24
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009524:	b580      	push	{r7, lr}
 8009526:	b08e      	sub	sp, #56	@ 0x38
 8009528:	af04      	add	r7, sp, #16
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
 8009530:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009534:	2b00      	cmp	r3, #0
 8009536:	d10b      	bne.n	8009550 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953c:	f383 8811 	msr	BASEPRI, r3
 8009540:	f3bf 8f6f 	isb	sy
 8009544:	f3bf 8f4f 	dsb	sy
 8009548:	623b      	str	r3, [r7, #32]
}
 800954a:	bf00      	nop
 800954c:	bf00      	nop
 800954e:	e7fd      	b.n	800954c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009552:	2b00      	cmp	r3, #0
 8009554:	d10b      	bne.n	800956e <xTaskCreateStatic+0x4a>
	__asm volatile
 8009556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	61fb      	str	r3, [r7, #28]
}
 8009568:	bf00      	nop
 800956a:	bf00      	nop
 800956c:	e7fd      	b.n	800956a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800956e:	235c      	movs	r3, #92	@ 0x5c
 8009570:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	2b5c      	cmp	r3, #92	@ 0x5c
 8009576:	d00b      	beq.n	8009590 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800957c:	f383 8811 	msr	BASEPRI, r3
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	61bb      	str	r3, [r7, #24]
}
 800958a:	bf00      	nop
 800958c:	bf00      	nop
 800958e:	e7fd      	b.n	800958c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009590:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009594:	2b00      	cmp	r3, #0
 8009596:	d01e      	beq.n	80095d6 <xTaskCreateStatic+0xb2>
 8009598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800959a:	2b00      	cmp	r3, #0
 800959c:	d01b      	beq.n	80095d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800959e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095aa:	2202      	movs	r2, #2
 80095ac:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095b0:	2300      	movs	r3, #0
 80095b2:	9303      	str	r3, [sp, #12]
 80095b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b6:	9302      	str	r3, [sp, #8]
 80095b8:	f107 0314 	add.w	r3, r7, #20
 80095bc:	9301      	str	r3, [sp, #4]
 80095be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	68b9      	ldr	r1, [r7, #8]
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f000 f850 	bl	800966e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80095d0:	f000 f8de 	bl	8009790 <prvAddNewTaskToReadyList>
 80095d4:	e001      	b.n	80095da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80095d6:	2300      	movs	r3, #0
 80095d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80095da:	697b      	ldr	r3, [r7, #20]
	}
 80095dc:	4618      	mov	r0, r3
 80095de:	3728      	adds	r7, #40	@ 0x28
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b08c      	sub	sp, #48	@ 0x30
 80095e8:	af04      	add	r7, sp, #16
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	603b      	str	r3, [r7, #0]
 80095f0:	4613      	mov	r3, r2
 80095f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80095f4:	88fb      	ldrh	r3, [r7, #6]
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4618      	mov	r0, r3
 80095fa:	f001 fc4f 	bl	800ae9c <pvPortMalloc>
 80095fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00e      	beq.n	8009624 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009606:	205c      	movs	r0, #92	@ 0x5c
 8009608:	f001 fc48 	bl	800ae9c <pvPortMalloc>
 800960c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d003      	beq.n	800961c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	631a      	str	r2, [r3, #48]	@ 0x30
 800961a:	e005      	b.n	8009628 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800961c:	6978      	ldr	r0, [r7, #20]
 800961e:	f001 fd0b 	bl	800b038 <vPortFree>
 8009622:	e001      	b.n	8009628 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009624:	2300      	movs	r3, #0
 8009626:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d017      	beq.n	800965e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009636:	88fa      	ldrh	r2, [r7, #6]
 8009638:	2300      	movs	r3, #0
 800963a:	9303      	str	r3, [sp, #12]
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	9302      	str	r3, [sp, #8]
 8009640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009642:	9301      	str	r3, [sp, #4]
 8009644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	68b9      	ldr	r1, [r7, #8]
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f000 f80e 	bl	800966e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009652:	69f8      	ldr	r0, [r7, #28]
 8009654:	f000 f89c 	bl	8009790 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009658:	2301      	movs	r3, #1
 800965a:	61bb      	str	r3, [r7, #24]
 800965c:	e002      	b.n	8009664 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800965e:	f04f 33ff 	mov.w	r3, #4294967295
 8009662:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009664:	69bb      	ldr	r3, [r7, #24]
	}
 8009666:	4618      	mov	r0, r3
 8009668:	3720      	adds	r7, #32
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b088      	sub	sp, #32
 8009672:	af00      	add	r7, sp, #0
 8009674:	60f8      	str	r0, [r7, #12]
 8009676:	60b9      	str	r1, [r7, #8]
 8009678:	607a      	str	r2, [r7, #4]
 800967a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800967c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	461a      	mov	r2, r3
 8009686:	21a5      	movs	r1, #165	@ 0xa5
 8009688:	f001 fdf6 	bl	800b278 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800968c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009696:	3b01      	subs	r3, #1
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4413      	add	r3, r2
 800969c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	f023 0307 	bic.w	r3, r3, #7
 80096a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	f003 0307 	and.w	r3, r3, #7
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00b      	beq.n	80096c8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80096b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	617b      	str	r3, [r7, #20]
}
 80096c2:	bf00      	nop
 80096c4:	bf00      	nop
 80096c6:	e7fd      	b.n	80096c4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d01f      	beq.n	800970e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096ce:	2300      	movs	r3, #0
 80096d0:	61fb      	str	r3, [r7, #28]
 80096d2:	e012      	b.n	80096fa <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	4413      	add	r3, r2
 80096da:	7819      	ldrb	r1, [r3, #0]
 80096dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	4413      	add	r3, r2
 80096e2:	3334      	adds	r3, #52	@ 0x34
 80096e4:	460a      	mov	r2, r1
 80096e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	4413      	add	r3, r2
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d006      	beq.n	8009702 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	3301      	adds	r3, #1
 80096f8:	61fb      	str	r3, [r7, #28]
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	2b0f      	cmp	r3, #15
 80096fe:	d9e9      	bls.n	80096d4 <prvInitialiseNewTask+0x66>
 8009700:	e000      	b.n	8009704 <prvInitialiseNewTask+0x96>
			{
				break;
 8009702:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009706:	2200      	movs	r2, #0
 8009708:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800970c:	e003      	b.n	8009716 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800970e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009718:	2b37      	cmp	r3, #55	@ 0x37
 800971a:	d901      	bls.n	8009720 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800971c:	2337      	movs	r3, #55	@ 0x37
 800971e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009722:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009724:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800972a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800972c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800972e:	2200      	movs	r2, #0
 8009730:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009734:	3304      	adds	r3, #4
 8009736:	4618      	mov	r0, r3
 8009738:	f7ff f966 	bl	8008a08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800973c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973e:	3318      	adds	r3, #24
 8009740:	4618      	mov	r0, r3
 8009742:	f7ff f961 	bl	8008a08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009748:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800974a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800974c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800974e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009754:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800975a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800975c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975e:	2200      	movs	r2, #0
 8009760:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009764:	2200      	movs	r2, #0
 8009766:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	68f9      	ldr	r1, [r7, #12]
 800976e:	69b8      	ldr	r0, [r7, #24]
 8009770:	f001 f93e 	bl	800a9f0 <pxPortInitialiseStack>
 8009774:	4602      	mov	r2, r0
 8009776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009778:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800977a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800977c:	2b00      	cmp	r3, #0
 800977e:	d002      	beq.n	8009786 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009786:	bf00      	nop
 8009788:	3720      	adds	r7, #32
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
	...

08009790 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009798:	f001 fa5e 	bl	800ac58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800979c:	4b2d      	ldr	r3, [pc, #180]	@ (8009854 <prvAddNewTaskToReadyList+0xc4>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	3301      	adds	r3, #1
 80097a2:	4a2c      	ldr	r2, [pc, #176]	@ (8009854 <prvAddNewTaskToReadyList+0xc4>)
 80097a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80097a6:	4b2c      	ldr	r3, [pc, #176]	@ (8009858 <prvAddNewTaskToReadyList+0xc8>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d109      	bne.n	80097c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80097ae:	4a2a      	ldr	r2, [pc, #168]	@ (8009858 <prvAddNewTaskToReadyList+0xc8>)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80097b4:	4b27      	ldr	r3, [pc, #156]	@ (8009854 <prvAddNewTaskToReadyList+0xc4>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d110      	bne.n	80097de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80097bc:	f000 fc1e 	bl	8009ffc <prvInitialiseTaskLists>
 80097c0:	e00d      	b.n	80097de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80097c2:	4b26      	ldr	r3, [pc, #152]	@ (800985c <prvAddNewTaskToReadyList+0xcc>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d109      	bne.n	80097de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80097ca:	4b23      	ldr	r3, [pc, #140]	@ (8009858 <prvAddNewTaskToReadyList+0xc8>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d802      	bhi.n	80097de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80097d8:	4a1f      	ldr	r2, [pc, #124]	@ (8009858 <prvAddNewTaskToReadyList+0xc8>)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80097de:	4b20      	ldr	r3, [pc, #128]	@ (8009860 <prvAddNewTaskToReadyList+0xd0>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	3301      	adds	r3, #1
 80097e4:	4a1e      	ldr	r2, [pc, #120]	@ (8009860 <prvAddNewTaskToReadyList+0xd0>)
 80097e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80097e8:	4b1d      	ldr	r3, [pc, #116]	@ (8009860 <prvAddNewTaskToReadyList+0xd0>)
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097f4:	4b1b      	ldr	r3, [pc, #108]	@ (8009864 <prvAddNewTaskToReadyList+0xd4>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d903      	bls.n	8009804 <prvAddNewTaskToReadyList+0x74>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009800:	4a18      	ldr	r2, [pc, #96]	@ (8009864 <prvAddNewTaskToReadyList+0xd4>)
 8009802:	6013      	str	r3, [r2, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009808:	4613      	mov	r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4413      	add	r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	4a15      	ldr	r2, [pc, #84]	@ (8009868 <prvAddNewTaskToReadyList+0xd8>)
 8009812:	441a      	add	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	3304      	adds	r3, #4
 8009818:	4619      	mov	r1, r3
 800981a:	4610      	mov	r0, r2
 800981c:	f7ff f901 	bl	8008a22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009820:	f001 fa4c 	bl	800acbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009824:	4b0d      	ldr	r3, [pc, #52]	@ (800985c <prvAddNewTaskToReadyList+0xcc>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00e      	beq.n	800984a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800982c:	4b0a      	ldr	r3, [pc, #40]	@ (8009858 <prvAddNewTaskToReadyList+0xc8>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009836:	429a      	cmp	r2, r3
 8009838:	d207      	bcs.n	800984a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800983a:	4b0c      	ldr	r3, [pc, #48]	@ (800986c <prvAddNewTaskToReadyList+0xdc>)
 800983c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009840:	601a      	str	r2, [r3, #0]
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800984a:	bf00      	nop
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	20000cd8 	.word	0x20000cd8
 8009858:	20000804 	.word	0x20000804
 800985c:	20000ce4 	.word	0x20000ce4
 8009860:	20000cf4 	.word	0x20000cf4
 8009864:	20000ce0 	.word	0x20000ce0
 8009868:	20000808 	.word	0x20000808
 800986c:	e000ed04 	.word	0xe000ed04

08009870 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009878:	2300      	movs	r3, #0
 800987a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d018      	beq.n	80098b4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009882:	4b14      	ldr	r3, [pc, #80]	@ (80098d4 <vTaskDelay+0x64>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00b      	beq.n	80098a2 <vTaskDelay+0x32>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	60bb      	str	r3, [r7, #8]
}
 800989c:	bf00      	nop
 800989e:	bf00      	nop
 80098a0:	e7fd      	b.n	800989e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80098a2:	f000 f883 	bl	80099ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80098a6:	2100      	movs	r1, #0
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 fcf3 	bl	800a294 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80098ae:	f000 f88b 	bl	80099c8 <xTaskResumeAll>
 80098b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d107      	bne.n	80098ca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80098ba:	4b07      	ldr	r3, [pc, #28]	@ (80098d8 <vTaskDelay+0x68>)
 80098bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	f3bf 8f4f 	dsb	sy
 80098c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80098ca:	bf00      	nop
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	20000d00 	.word	0x20000d00
 80098d8:	e000ed04 	.word	0xe000ed04

080098dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b08a      	sub	sp, #40	@ 0x28
 80098e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80098e2:	2300      	movs	r3, #0
 80098e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80098e6:	2300      	movs	r3, #0
 80098e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80098ea:	463a      	mov	r2, r7
 80098ec:	1d39      	adds	r1, r7, #4
 80098ee:	f107 0308 	add.w	r3, r7, #8
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7ff f834 	bl	8008960 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80098f8:	6839      	ldr	r1, [r7, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	9202      	str	r2, [sp, #8]
 8009900:	9301      	str	r3, [sp, #4]
 8009902:	2300      	movs	r3, #0
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	2300      	movs	r3, #0
 8009908:	460a      	mov	r2, r1
 800990a:	4922      	ldr	r1, [pc, #136]	@ (8009994 <vTaskStartScheduler+0xb8>)
 800990c:	4822      	ldr	r0, [pc, #136]	@ (8009998 <vTaskStartScheduler+0xbc>)
 800990e:	f7ff fe09 	bl	8009524 <xTaskCreateStatic>
 8009912:	4603      	mov	r3, r0
 8009914:	4a21      	ldr	r2, [pc, #132]	@ (800999c <vTaskStartScheduler+0xc0>)
 8009916:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009918:	4b20      	ldr	r3, [pc, #128]	@ (800999c <vTaskStartScheduler+0xc0>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d002      	beq.n	8009926 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009920:	2301      	movs	r3, #1
 8009922:	617b      	str	r3, [r7, #20]
 8009924:	e001      	b.n	800992a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009926:	2300      	movs	r3, #0
 8009928:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d102      	bne.n	8009936 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009930:	f000 fd04 	bl	800a33c <xTimerCreateTimerTask>
 8009934:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d116      	bne.n	800996a <vTaskStartScheduler+0x8e>
	__asm volatile
 800993c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009940:	f383 8811 	msr	BASEPRI, r3
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	613b      	str	r3, [r7, #16]
}
 800994e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009950:	4b13      	ldr	r3, [pc, #76]	@ (80099a0 <vTaskStartScheduler+0xc4>)
 8009952:	f04f 32ff 	mov.w	r2, #4294967295
 8009956:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009958:	4b12      	ldr	r3, [pc, #72]	@ (80099a4 <vTaskStartScheduler+0xc8>)
 800995a:	2201      	movs	r2, #1
 800995c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800995e:	4b12      	ldr	r3, [pc, #72]	@ (80099a8 <vTaskStartScheduler+0xcc>)
 8009960:	2200      	movs	r2, #0
 8009962:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009964:	f001 f8d4 	bl	800ab10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009968:	e00f      	b.n	800998a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009970:	d10b      	bne.n	800998a <vTaskStartScheduler+0xae>
	__asm volatile
 8009972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	60fb      	str	r3, [r7, #12]
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop
 8009988:	e7fd      	b.n	8009986 <vTaskStartScheduler+0xaa>
}
 800998a:	bf00      	nop
 800998c:	3718      	adds	r7, #24
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	0800b310 	.word	0x0800b310
 8009998:	08009fcd 	.word	0x08009fcd
 800999c:	20000cfc 	.word	0x20000cfc
 80099a0:	20000cf8 	.word	0x20000cf8
 80099a4:	20000ce4 	.word	0x20000ce4
 80099a8:	20000cdc 	.word	0x20000cdc

080099ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80099ac:	b480      	push	{r7}
 80099ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80099b0:	4b04      	ldr	r3, [pc, #16]	@ (80099c4 <vTaskSuspendAll+0x18>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	3301      	adds	r3, #1
 80099b6:	4a03      	ldr	r2, [pc, #12]	@ (80099c4 <vTaskSuspendAll+0x18>)
 80099b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80099ba:	bf00      	nop
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr
 80099c4:	20000d00 	.word	0x20000d00

080099c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80099ce:	2300      	movs	r3, #0
 80099d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80099d2:	2300      	movs	r3, #0
 80099d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80099d6:	4b42      	ldr	r3, [pc, #264]	@ (8009ae0 <xTaskResumeAll+0x118>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d10b      	bne.n	80099f6 <xTaskResumeAll+0x2e>
	__asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	603b      	str	r3, [r7, #0]
}
 80099f0:	bf00      	nop
 80099f2:	bf00      	nop
 80099f4:	e7fd      	b.n	80099f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80099f6:	f001 f92f 	bl	800ac58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80099fa:	4b39      	ldr	r3, [pc, #228]	@ (8009ae0 <xTaskResumeAll+0x118>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	3b01      	subs	r3, #1
 8009a00:	4a37      	ldr	r2, [pc, #220]	@ (8009ae0 <xTaskResumeAll+0x118>)
 8009a02:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a04:	4b36      	ldr	r3, [pc, #216]	@ (8009ae0 <xTaskResumeAll+0x118>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d162      	bne.n	8009ad2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a0c:	4b35      	ldr	r3, [pc, #212]	@ (8009ae4 <xTaskResumeAll+0x11c>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d05e      	beq.n	8009ad2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a14:	e02f      	b.n	8009a76 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a16:	4b34      	ldr	r3, [pc, #208]	@ (8009ae8 <xTaskResumeAll+0x120>)
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3318      	adds	r3, #24
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7ff f85a 	bl	8008adc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	3304      	adds	r3, #4
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7ff f855 	bl	8008adc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a36:	4b2d      	ldr	r3, [pc, #180]	@ (8009aec <xTaskResumeAll+0x124>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d903      	bls.n	8009a46 <xTaskResumeAll+0x7e>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a42:	4a2a      	ldr	r2, [pc, #168]	@ (8009aec <xTaskResumeAll+0x124>)
 8009a44:	6013      	str	r3, [r2, #0]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	4a27      	ldr	r2, [pc, #156]	@ (8009af0 <xTaskResumeAll+0x128>)
 8009a54:	441a      	add	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	3304      	adds	r3, #4
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	4610      	mov	r0, r2
 8009a5e:	f7fe ffe0 	bl	8008a22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a66:	4b23      	ldr	r3, [pc, #140]	@ (8009af4 <xTaskResumeAll+0x12c>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d302      	bcc.n	8009a76 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009a70:	4b21      	ldr	r3, [pc, #132]	@ (8009af8 <xTaskResumeAll+0x130>)
 8009a72:	2201      	movs	r2, #1
 8009a74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a76:	4b1c      	ldr	r3, [pc, #112]	@ (8009ae8 <xTaskResumeAll+0x120>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1cb      	bne.n	8009a16 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a84:	f000 fb58 	bl	800a138 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009a88:	4b1c      	ldr	r3, [pc, #112]	@ (8009afc <xTaskResumeAll+0x134>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d010      	beq.n	8009ab6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a94:	f000 f846 	bl	8009b24 <xTaskIncrementTick>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d002      	beq.n	8009aa4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009a9e:	4b16      	ldr	r3, [pc, #88]	@ (8009af8 <xTaskResumeAll+0x130>)
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d1f1      	bne.n	8009a94 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009ab0:	4b12      	ldr	r3, [pc, #72]	@ (8009afc <xTaskResumeAll+0x134>)
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009ab6:	4b10      	ldr	r3, [pc, #64]	@ (8009af8 <xTaskResumeAll+0x130>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d009      	beq.n	8009ad2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8009b00 <xTaskResumeAll+0x138>)
 8009ac4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ac8:	601a      	str	r2, [r3, #0]
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ad2:	f001 f8f3 	bl	800acbc <vPortExitCritical>

	return xAlreadyYielded;
 8009ad6:	68bb      	ldr	r3, [r7, #8]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3710      	adds	r7, #16
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	20000d00 	.word	0x20000d00
 8009ae4:	20000cd8 	.word	0x20000cd8
 8009ae8:	20000c98 	.word	0x20000c98
 8009aec:	20000ce0 	.word	0x20000ce0
 8009af0:	20000808 	.word	0x20000808
 8009af4:	20000804 	.word	0x20000804
 8009af8:	20000cec 	.word	0x20000cec
 8009afc:	20000ce8 	.word	0x20000ce8
 8009b00:	e000ed04 	.word	0xe000ed04

08009b04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b0a:	4b05      	ldr	r3, [pc, #20]	@ (8009b20 <xTaskGetTickCount+0x1c>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b10:	687b      	ldr	r3, [r7, #4]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	370c      	adds	r7, #12
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	20000cdc 	.word	0x20000cdc

08009b24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b086      	sub	sp, #24
 8009b28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b2e:	4b4f      	ldr	r3, [pc, #316]	@ (8009c6c <xTaskIncrementTick+0x148>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f040 8090 	bne.w	8009c58 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b38:	4b4d      	ldr	r3, [pc, #308]	@ (8009c70 <xTaskIncrementTick+0x14c>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b40:	4a4b      	ldr	r2, [pc, #300]	@ (8009c70 <xTaskIncrementTick+0x14c>)
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d121      	bne.n	8009b90 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b4c:	4b49      	ldr	r3, [pc, #292]	@ (8009c74 <xTaskIncrementTick+0x150>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00b      	beq.n	8009b6e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b5a:	f383 8811 	msr	BASEPRI, r3
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	f3bf 8f4f 	dsb	sy
 8009b66:	603b      	str	r3, [r7, #0]
}
 8009b68:	bf00      	nop
 8009b6a:	bf00      	nop
 8009b6c:	e7fd      	b.n	8009b6a <xTaskIncrementTick+0x46>
 8009b6e:	4b41      	ldr	r3, [pc, #260]	@ (8009c74 <xTaskIncrementTick+0x150>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	60fb      	str	r3, [r7, #12]
 8009b74:	4b40      	ldr	r3, [pc, #256]	@ (8009c78 <xTaskIncrementTick+0x154>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a3e      	ldr	r2, [pc, #248]	@ (8009c74 <xTaskIncrementTick+0x150>)
 8009b7a:	6013      	str	r3, [r2, #0]
 8009b7c:	4a3e      	ldr	r2, [pc, #248]	@ (8009c78 <xTaskIncrementTick+0x154>)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6013      	str	r3, [r2, #0]
 8009b82:	4b3e      	ldr	r3, [pc, #248]	@ (8009c7c <xTaskIncrementTick+0x158>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	3301      	adds	r3, #1
 8009b88:	4a3c      	ldr	r2, [pc, #240]	@ (8009c7c <xTaskIncrementTick+0x158>)
 8009b8a:	6013      	str	r3, [r2, #0]
 8009b8c:	f000 fad4 	bl	800a138 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b90:	4b3b      	ldr	r3, [pc, #236]	@ (8009c80 <xTaskIncrementTick+0x15c>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	693a      	ldr	r2, [r7, #16]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d349      	bcc.n	8009c2e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b9a:	4b36      	ldr	r3, [pc, #216]	@ (8009c74 <xTaskIncrementTick+0x150>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d104      	bne.n	8009bae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ba4:	4b36      	ldr	r3, [pc, #216]	@ (8009c80 <xTaskIncrementTick+0x15c>)
 8009ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8009baa:	601a      	str	r2, [r3, #0]
					break;
 8009bac:	e03f      	b.n	8009c2e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bae:	4b31      	ldr	r3, [pc, #196]	@ (8009c74 <xTaskIncrementTick+0x150>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009bbe:	693a      	ldr	r2, [r7, #16]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d203      	bcs.n	8009bce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009bc6:	4a2e      	ldr	r2, [pc, #184]	@ (8009c80 <xTaskIncrementTick+0x15c>)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009bcc:	e02f      	b.n	8009c2e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	3304      	adds	r3, #4
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fe ff82 	bl	8008adc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d004      	beq.n	8009bea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	3318      	adds	r3, #24
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7fe ff79 	bl	8008adc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bee:	4b25      	ldr	r3, [pc, #148]	@ (8009c84 <xTaskIncrementTick+0x160>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d903      	bls.n	8009bfe <xTaskIncrementTick+0xda>
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bfa:	4a22      	ldr	r2, [pc, #136]	@ (8009c84 <xTaskIncrementTick+0x160>)
 8009bfc:	6013      	str	r3, [r2, #0]
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c02:	4613      	mov	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	4413      	add	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8009c88 <xTaskIncrementTick+0x164>)
 8009c0c:	441a      	add	r2, r3
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	3304      	adds	r3, #4
 8009c12:	4619      	mov	r1, r3
 8009c14:	4610      	mov	r0, r2
 8009c16:	f7fe ff04 	bl	8008a22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8009c8c <xTaskIncrementTick+0x168>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d3b8      	bcc.n	8009b9a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c2c:	e7b5      	b.n	8009b9a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c2e:	4b17      	ldr	r3, [pc, #92]	@ (8009c8c <xTaskIncrementTick+0x168>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c34:	4914      	ldr	r1, [pc, #80]	@ (8009c88 <xTaskIncrementTick+0x164>)
 8009c36:	4613      	mov	r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	4413      	add	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	440b      	add	r3, r1
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d901      	bls.n	8009c4a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009c46:	2301      	movs	r3, #1
 8009c48:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009c4a:	4b11      	ldr	r3, [pc, #68]	@ (8009c90 <xTaskIncrementTick+0x16c>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d007      	beq.n	8009c62 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009c52:	2301      	movs	r3, #1
 8009c54:	617b      	str	r3, [r7, #20]
 8009c56:	e004      	b.n	8009c62 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009c58:	4b0e      	ldr	r3, [pc, #56]	@ (8009c94 <xTaskIncrementTick+0x170>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	4a0d      	ldr	r2, [pc, #52]	@ (8009c94 <xTaskIncrementTick+0x170>)
 8009c60:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009c62:	697b      	ldr	r3, [r7, #20]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3718      	adds	r7, #24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	20000d00 	.word	0x20000d00
 8009c70:	20000cdc 	.word	0x20000cdc
 8009c74:	20000c90 	.word	0x20000c90
 8009c78:	20000c94 	.word	0x20000c94
 8009c7c:	20000cf0 	.word	0x20000cf0
 8009c80:	20000cf8 	.word	0x20000cf8
 8009c84:	20000ce0 	.word	0x20000ce0
 8009c88:	20000808 	.word	0x20000808
 8009c8c:	20000804 	.word	0x20000804
 8009c90:	20000cec 	.word	0x20000cec
 8009c94:	20000ce8 	.word	0x20000ce8

08009c98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c9e:	4b28      	ldr	r3, [pc, #160]	@ (8009d40 <vTaskSwitchContext+0xa8>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d003      	beq.n	8009cae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ca6:	4b27      	ldr	r3, [pc, #156]	@ (8009d44 <vTaskSwitchContext+0xac>)
 8009ca8:	2201      	movs	r2, #1
 8009caa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009cac:	e042      	b.n	8009d34 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009cae:	4b25      	ldr	r3, [pc, #148]	@ (8009d44 <vTaskSwitchContext+0xac>)
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cb4:	4b24      	ldr	r3, [pc, #144]	@ (8009d48 <vTaskSwitchContext+0xb0>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	60fb      	str	r3, [r7, #12]
 8009cba:	e011      	b.n	8009ce0 <vTaskSwitchContext+0x48>
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10b      	bne.n	8009cda <vTaskSwitchContext+0x42>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	607b      	str	r3, [r7, #4]
}
 8009cd4:	bf00      	nop
 8009cd6:	bf00      	nop
 8009cd8:	e7fd      	b.n	8009cd6 <vTaskSwitchContext+0x3e>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	60fb      	str	r3, [r7, #12]
 8009ce0:	491a      	ldr	r1, [pc, #104]	@ (8009d4c <vTaskSwitchContext+0xb4>)
 8009ce2:	68fa      	ldr	r2, [r7, #12]
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4413      	add	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	440b      	add	r3, r1
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d0e3      	beq.n	8009cbc <vTaskSwitchContext+0x24>
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4413      	add	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4a13      	ldr	r2, [pc, #76]	@ (8009d4c <vTaskSwitchContext+0xb4>)
 8009d00:	4413      	add	r3, r2
 8009d02:	60bb      	str	r3, [r7, #8]
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	685a      	ldr	r2, [r3, #4]
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	605a      	str	r2, [r3, #4]
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	685a      	ldr	r2, [r3, #4]
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	3308      	adds	r3, #8
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d104      	bne.n	8009d24 <vTaskSwitchContext+0x8c>
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	605a      	str	r2, [r3, #4]
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	4a09      	ldr	r2, [pc, #36]	@ (8009d50 <vTaskSwitchContext+0xb8>)
 8009d2c:	6013      	str	r3, [r2, #0]
 8009d2e:	4a06      	ldr	r2, [pc, #24]	@ (8009d48 <vTaskSwitchContext+0xb0>)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6013      	str	r3, [r2, #0]
}
 8009d34:	bf00      	nop
 8009d36:	3714      	adds	r7, #20
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr
 8009d40:	20000d00 	.word	0x20000d00
 8009d44:	20000cec 	.word	0x20000cec
 8009d48:	20000ce0 	.word	0x20000ce0
 8009d4c:	20000808 	.word	0x20000808
 8009d50:	20000804 	.word	0x20000804

08009d54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10b      	bne.n	8009d7c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d68:	f383 8811 	msr	BASEPRI, r3
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	60fb      	str	r3, [r7, #12]
}
 8009d76:	bf00      	nop
 8009d78:	bf00      	nop
 8009d7a:	e7fd      	b.n	8009d78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d7c:	4b07      	ldr	r3, [pc, #28]	@ (8009d9c <vTaskPlaceOnEventList+0x48>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	3318      	adds	r3, #24
 8009d82:	4619      	mov	r1, r3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f7fe fe70 	bl	8008a6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d8a:	2101      	movs	r1, #1
 8009d8c:	6838      	ldr	r0, [r7, #0]
 8009d8e:	f000 fa81 	bl	800a294 <prvAddCurrentTaskToDelayedList>
}
 8009d92:	bf00      	nop
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	20000804 	.word	0x20000804

08009da0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10b      	bne.n	8009dca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db6:	f383 8811 	msr	BASEPRI, r3
 8009dba:	f3bf 8f6f 	isb	sy
 8009dbe:	f3bf 8f4f 	dsb	sy
 8009dc2:	617b      	str	r3, [r7, #20]
}
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop
 8009dc8:	e7fd      	b.n	8009dc6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009dca:	4b0a      	ldr	r3, [pc, #40]	@ (8009df4 <vTaskPlaceOnEventListRestricted+0x54>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	3318      	adds	r3, #24
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f7fe fe25 	bl	8008a22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d002      	beq.n	8009de4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009dde:	f04f 33ff 	mov.w	r3, #4294967295
 8009de2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009de4:	6879      	ldr	r1, [r7, #4]
 8009de6:	68b8      	ldr	r0, [r7, #8]
 8009de8:	f000 fa54 	bl	800a294 <prvAddCurrentTaskToDelayedList>
	}
 8009dec:	bf00      	nop
 8009dee:	3718      	adds	r7, #24
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	20000804 	.word	0x20000804

08009df8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10b      	bne.n	8009e26 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e12:	f383 8811 	msr	BASEPRI, r3
 8009e16:	f3bf 8f6f 	isb	sy
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	60fb      	str	r3, [r7, #12]
}
 8009e20:	bf00      	nop
 8009e22:	bf00      	nop
 8009e24:	e7fd      	b.n	8009e22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	3318      	adds	r3, #24
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fe fe56 	bl	8008adc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e30:	4b1d      	ldr	r3, [pc, #116]	@ (8009ea8 <xTaskRemoveFromEventList+0xb0>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d11d      	bne.n	8009e74 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	3304      	adds	r3, #4
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7fe fe4d 	bl	8008adc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e46:	4b19      	ldr	r3, [pc, #100]	@ (8009eac <xTaskRemoveFromEventList+0xb4>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d903      	bls.n	8009e56 <xTaskRemoveFromEventList+0x5e>
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e52:	4a16      	ldr	r2, [pc, #88]	@ (8009eac <xTaskRemoveFromEventList+0xb4>)
 8009e54:	6013      	str	r3, [r2, #0]
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	4413      	add	r3, r2
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	4a13      	ldr	r2, [pc, #76]	@ (8009eb0 <xTaskRemoveFromEventList+0xb8>)
 8009e64:	441a      	add	r2, r3
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	3304      	adds	r3, #4
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	f7fe fdd8 	bl	8008a22 <vListInsertEnd>
 8009e72:	e005      	b.n	8009e80 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	3318      	adds	r3, #24
 8009e78:	4619      	mov	r1, r3
 8009e7a:	480e      	ldr	r0, [pc, #56]	@ (8009eb4 <xTaskRemoveFromEventList+0xbc>)
 8009e7c:	f7fe fdd1 	bl	8008a22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e84:	4b0c      	ldr	r3, [pc, #48]	@ (8009eb8 <xTaskRemoveFromEventList+0xc0>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d905      	bls.n	8009e9a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009e92:	4b0a      	ldr	r3, [pc, #40]	@ (8009ebc <xTaskRemoveFromEventList+0xc4>)
 8009e94:	2201      	movs	r2, #1
 8009e96:	601a      	str	r2, [r3, #0]
 8009e98:	e001      	b.n	8009e9e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009e9e:	697b      	ldr	r3, [r7, #20]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	20000d00 	.word	0x20000d00
 8009eac:	20000ce0 	.word	0x20000ce0
 8009eb0:	20000808 	.word	0x20000808
 8009eb4:	20000c98 	.word	0x20000c98
 8009eb8:	20000804 	.word	0x20000804
 8009ebc:	20000cec 	.word	0x20000cec

08009ec0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ec8:	4b06      	ldr	r3, [pc, #24]	@ (8009ee4 <vTaskInternalSetTimeOutState+0x24>)
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ed0:	4b05      	ldr	r3, [pc, #20]	@ (8009ee8 <vTaskInternalSetTimeOutState+0x28>)
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	605a      	str	r2, [r3, #4]
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	20000cf0 	.word	0x20000cf0
 8009ee8:	20000cdc 	.word	0x20000cdc

08009eec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b088      	sub	sp, #32
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d10b      	bne.n	8009f14 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	613b      	str	r3, [r7, #16]
}
 8009f0e:	bf00      	nop
 8009f10:	bf00      	nop
 8009f12:	e7fd      	b.n	8009f10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d10b      	bne.n	8009f32 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f1e:	f383 8811 	msr	BASEPRI, r3
 8009f22:	f3bf 8f6f 	isb	sy
 8009f26:	f3bf 8f4f 	dsb	sy
 8009f2a:	60fb      	str	r3, [r7, #12]
}
 8009f2c:	bf00      	nop
 8009f2e:	bf00      	nop
 8009f30:	e7fd      	b.n	8009f2e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009f32:	f000 fe91 	bl	800ac58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f36:	4b1d      	ldr	r3, [pc, #116]	@ (8009fac <xTaskCheckForTimeOut+0xc0>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	69ba      	ldr	r2, [r7, #24]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4e:	d102      	bne.n	8009f56 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009f50:	2300      	movs	r3, #0
 8009f52:	61fb      	str	r3, [r7, #28]
 8009f54:	e023      	b.n	8009f9e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	4b15      	ldr	r3, [pc, #84]	@ (8009fb0 <xTaskCheckForTimeOut+0xc4>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d007      	beq.n	8009f72 <xTaskCheckForTimeOut+0x86>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	69ba      	ldr	r2, [r7, #24]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d302      	bcc.n	8009f72 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	61fb      	str	r3, [r7, #28]
 8009f70:	e015      	b.n	8009f9e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d20b      	bcs.n	8009f94 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	1ad2      	subs	r2, r2, r3
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7ff ff99 	bl	8009ec0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	61fb      	str	r3, [r7, #28]
 8009f92:	e004      	b.n	8009f9e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	2200      	movs	r2, #0
 8009f98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009f9e:	f000 fe8d 	bl	800acbc <vPortExitCritical>

	return xReturn;
 8009fa2:	69fb      	ldr	r3, [r7, #28]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3720      	adds	r7, #32
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	20000cdc 	.word	0x20000cdc
 8009fb0:	20000cf0 	.word	0x20000cf0

08009fb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009fb8:	4b03      	ldr	r3, [pc, #12]	@ (8009fc8 <vTaskMissedYield+0x14>)
 8009fba:	2201      	movs	r2, #1
 8009fbc:	601a      	str	r2, [r3, #0]
}
 8009fbe:	bf00      	nop
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	20000cec 	.word	0x20000cec

08009fcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009fd4:	f000 f852 	bl	800a07c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009fd8:	4b06      	ldr	r3, [pc, #24]	@ (8009ff4 <prvIdleTask+0x28>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d9f9      	bls.n	8009fd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009fe0:	4b05      	ldr	r3, [pc, #20]	@ (8009ff8 <prvIdleTask+0x2c>)
 8009fe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fe6:	601a      	str	r2, [r3, #0]
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ff0:	e7f0      	b.n	8009fd4 <prvIdleTask+0x8>
 8009ff2:	bf00      	nop
 8009ff4:	20000808 	.word	0x20000808
 8009ff8:	e000ed04 	.word	0xe000ed04

08009ffc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a002:	2300      	movs	r3, #0
 800a004:	607b      	str	r3, [r7, #4]
 800a006:	e00c      	b.n	800a022 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	4613      	mov	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	4413      	add	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4a12      	ldr	r2, [pc, #72]	@ (800a05c <prvInitialiseTaskLists+0x60>)
 800a014:	4413      	add	r3, r2
 800a016:	4618      	mov	r0, r3
 800a018:	f7fe fcd6 	bl	80089c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	3301      	adds	r3, #1
 800a020:	607b      	str	r3, [r7, #4]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2b37      	cmp	r3, #55	@ 0x37
 800a026:	d9ef      	bls.n	800a008 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a028:	480d      	ldr	r0, [pc, #52]	@ (800a060 <prvInitialiseTaskLists+0x64>)
 800a02a:	f7fe fccd 	bl	80089c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a02e:	480d      	ldr	r0, [pc, #52]	@ (800a064 <prvInitialiseTaskLists+0x68>)
 800a030:	f7fe fcca 	bl	80089c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a034:	480c      	ldr	r0, [pc, #48]	@ (800a068 <prvInitialiseTaskLists+0x6c>)
 800a036:	f7fe fcc7 	bl	80089c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a03a:	480c      	ldr	r0, [pc, #48]	@ (800a06c <prvInitialiseTaskLists+0x70>)
 800a03c:	f7fe fcc4 	bl	80089c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a040:	480b      	ldr	r0, [pc, #44]	@ (800a070 <prvInitialiseTaskLists+0x74>)
 800a042:	f7fe fcc1 	bl	80089c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a046:	4b0b      	ldr	r3, [pc, #44]	@ (800a074 <prvInitialiseTaskLists+0x78>)
 800a048:	4a05      	ldr	r2, [pc, #20]	@ (800a060 <prvInitialiseTaskLists+0x64>)
 800a04a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a04c:	4b0a      	ldr	r3, [pc, #40]	@ (800a078 <prvInitialiseTaskLists+0x7c>)
 800a04e:	4a05      	ldr	r2, [pc, #20]	@ (800a064 <prvInitialiseTaskLists+0x68>)
 800a050:	601a      	str	r2, [r3, #0]
}
 800a052:	bf00      	nop
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	20000808 	.word	0x20000808
 800a060:	20000c68 	.word	0x20000c68
 800a064:	20000c7c 	.word	0x20000c7c
 800a068:	20000c98 	.word	0x20000c98
 800a06c:	20000cac 	.word	0x20000cac
 800a070:	20000cc4 	.word	0x20000cc4
 800a074:	20000c90 	.word	0x20000c90
 800a078:	20000c94 	.word	0x20000c94

0800a07c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a082:	e019      	b.n	800a0b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a084:	f000 fde8 	bl	800ac58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a088:	4b10      	ldr	r3, [pc, #64]	@ (800a0cc <prvCheckTasksWaitingTermination+0x50>)
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	3304      	adds	r3, #4
 800a094:	4618      	mov	r0, r3
 800a096:	f7fe fd21 	bl	8008adc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a09a:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d0 <prvCheckTasksWaitingTermination+0x54>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	4a0b      	ldr	r2, [pc, #44]	@ (800a0d0 <prvCheckTasksWaitingTermination+0x54>)
 800a0a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a0a4:	4b0b      	ldr	r3, [pc, #44]	@ (800a0d4 <prvCheckTasksWaitingTermination+0x58>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	4a0a      	ldr	r2, [pc, #40]	@ (800a0d4 <prvCheckTasksWaitingTermination+0x58>)
 800a0ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a0ae:	f000 fe05 	bl	800acbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f810 	bl	800a0d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0b8:	4b06      	ldr	r3, [pc, #24]	@ (800a0d4 <prvCheckTasksWaitingTermination+0x58>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d1e1      	bne.n	800a084 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a0c0:	bf00      	nop
 800a0c2:	bf00      	nop
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	20000cac 	.word	0x20000cac
 800a0d0:	20000cd8 	.word	0x20000cd8
 800a0d4:	20000cc0 	.word	0x20000cc0

0800a0d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d108      	bne.n	800a0fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 ffa2 	bl	800b038 <vPortFree>
				vPortFree( pxTCB );
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 ff9f 	bl	800b038 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a0fa:	e019      	b.n	800a130 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a102:	2b01      	cmp	r3, #1
 800a104:	d103      	bne.n	800a10e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 ff96 	bl	800b038 <vPortFree>
	}
 800a10c:	e010      	b.n	800a130 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a114:	2b02      	cmp	r3, #2
 800a116:	d00b      	beq.n	800a130 <prvDeleteTCB+0x58>
	__asm volatile
 800a118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	60fb      	str	r3, [r7, #12]
}
 800a12a:	bf00      	nop
 800a12c:	bf00      	nop
 800a12e:	e7fd      	b.n	800a12c <prvDeleteTCB+0x54>
	}
 800a130:	bf00      	nop
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a13e:	4b0c      	ldr	r3, [pc, #48]	@ (800a170 <prvResetNextTaskUnblockTime+0x38>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d104      	bne.n	800a152 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a148:	4b0a      	ldr	r3, [pc, #40]	@ (800a174 <prvResetNextTaskUnblockTime+0x3c>)
 800a14a:	f04f 32ff 	mov.w	r2, #4294967295
 800a14e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a150:	e008      	b.n	800a164 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a152:	4b07      	ldr	r3, [pc, #28]	@ (800a170 <prvResetNextTaskUnblockTime+0x38>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	4a04      	ldr	r2, [pc, #16]	@ (800a174 <prvResetNextTaskUnblockTime+0x3c>)
 800a162:	6013      	str	r3, [r2, #0]
}
 800a164:	bf00      	nop
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr
 800a170:	20000c90 	.word	0x20000c90
 800a174:	20000cf8 	.word	0x20000cf8

0800a178 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a17e:	4b0b      	ldr	r3, [pc, #44]	@ (800a1ac <xTaskGetSchedulerState+0x34>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d102      	bne.n	800a18c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a186:	2301      	movs	r3, #1
 800a188:	607b      	str	r3, [r7, #4]
 800a18a:	e008      	b.n	800a19e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a18c:	4b08      	ldr	r3, [pc, #32]	@ (800a1b0 <xTaskGetSchedulerState+0x38>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d102      	bne.n	800a19a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a194:	2302      	movs	r3, #2
 800a196:	607b      	str	r3, [r7, #4]
 800a198:	e001      	b.n	800a19e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a19a:	2300      	movs	r3, #0
 800a19c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a19e:	687b      	ldr	r3, [r7, #4]
	}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr
 800a1ac:	20000ce4 	.word	0x20000ce4
 800a1b0:	20000d00 	.word	0x20000d00

0800a1b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d058      	beq.n	800a27c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a1ca:	4b2f      	ldr	r3, [pc, #188]	@ (800a288 <xTaskPriorityDisinherit+0xd4>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d00b      	beq.n	800a1ec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d8:	f383 8811 	msr	BASEPRI, r3
 800a1dc:	f3bf 8f6f 	isb	sy
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	60fb      	str	r3, [r7, #12]
}
 800a1e6:	bf00      	nop
 800a1e8:	bf00      	nop
 800a1ea:	e7fd      	b.n	800a1e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d10b      	bne.n	800a20c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1f8:	f383 8811 	msr	BASEPRI, r3
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	60bb      	str	r3, [r7, #8]
}
 800a206:	bf00      	nop
 800a208:	bf00      	nop
 800a20a:	e7fd      	b.n	800a208 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a210:	1e5a      	subs	r2, r3, #1
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a21e:	429a      	cmp	r2, r3
 800a220:	d02c      	beq.n	800a27c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a226:	2b00      	cmp	r3, #0
 800a228:	d128      	bne.n	800a27c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	3304      	adds	r3, #4
 800a22e:	4618      	mov	r0, r3
 800a230:	f7fe fc54 	bl	8008adc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a240:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a24c:	4b0f      	ldr	r3, [pc, #60]	@ (800a28c <xTaskPriorityDisinherit+0xd8>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	429a      	cmp	r2, r3
 800a252:	d903      	bls.n	800a25c <xTaskPriorityDisinherit+0xa8>
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a258:	4a0c      	ldr	r2, [pc, #48]	@ (800a28c <xTaskPriorityDisinherit+0xd8>)
 800a25a:	6013      	str	r3, [r2, #0]
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a260:	4613      	mov	r3, r2
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	4413      	add	r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4a09      	ldr	r2, [pc, #36]	@ (800a290 <xTaskPriorityDisinherit+0xdc>)
 800a26a:	441a      	add	r2, r3
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	3304      	adds	r3, #4
 800a270:	4619      	mov	r1, r3
 800a272:	4610      	mov	r0, r2
 800a274:	f7fe fbd5 	bl	8008a22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a278:	2301      	movs	r3, #1
 800a27a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a27c:	697b      	ldr	r3, [r7, #20]
	}
 800a27e:	4618      	mov	r0, r3
 800a280:	3718      	adds	r7, #24
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	20000804 	.word	0x20000804
 800a28c:	20000ce0 	.word	0x20000ce0
 800a290:	20000808 	.word	0x20000808

0800a294 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a29e:	4b21      	ldr	r3, [pc, #132]	@ (800a324 <prvAddCurrentTaskToDelayedList+0x90>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2a4:	4b20      	ldr	r3, [pc, #128]	@ (800a328 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	3304      	adds	r3, #4
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7fe fc16 	bl	8008adc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2b6:	d10a      	bne.n	800a2ce <prvAddCurrentTaskToDelayedList+0x3a>
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d007      	beq.n	800a2ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2be:	4b1a      	ldr	r3, [pc, #104]	@ (800a328 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4819      	ldr	r0, [pc, #100]	@ (800a32c <prvAddCurrentTaskToDelayedList+0x98>)
 800a2c8:	f7fe fbab 	bl	8008a22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a2cc:	e026      	b.n	800a31c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a2d6:	4b14      	ldr	r3, [pc, #80]	@ (800a328 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a2de:	68ba      	ldr	r2, [r7, #8]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d209      	bcs.n	800a2fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2e6:	4b12      	ldr	r3, [pc, #72]	@ (800a330 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	4b0f      	ldr	r3, [pc, #60]	@ (800a328 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	3304      	adds	r3, #4
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	4610      	mov	r0, r2
 800a2f4:	f7fe fbb9 	bl	8008a6a <vListInsert>
}
 800a2f8:	e010      	b.n	800a31c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2fa:	4b0e      	ldr	r3, [pc, #56]	@ (800a334 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	4b0a      	ldr	r3, [pc, #40]	@ (800a328 <prvAddCurrentTaskToDelayedList+0x94>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	3304      	adds	r3, #4
 800a304:	4619      	mov	r1, r3
 800a306:	4610      	mov	r0, r2
 800a308:	f7fe fbaf 	bl	8008a6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a30c:	4b0a      	ldr	r3, [pc, #40]	@ (800a338 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	429a      	cmp	r2, r3
 800a314:	d202      	bcs.n	800a31c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a316:	4a08      	ldr	r2, [pc, #32]	@ (800a338 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	6013      	str	r3, [r2, #0]
}
 800a31c:	bf00      	nop
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	20000cdc 	.word	0x20000cdc
 800a328:	20000804 	.word	0x20000804
 800a32c:	20000cc4 	.word	0x20000cc4
 800a330:	20000c94 	.word	0x20000c94
 800a334:	20000c90 	.word	0x20000c90
 800a338:	20000cf8 	.word	0x20000cf8

0800a33c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b08a      	sub	sp, #40	@ 0x28
 800a340:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a342:	2300      	movs	r3, #0
 800a344:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a346:	f000 fb13 	bl	800a970 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a34a:	4b1d      	ldr	r3, [pc, #116]	@ (800a3c0 <xTimerCreateTimerTask+0x84>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d021      	beq.n	800a396 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a352:	2300      	movs	r3, #0
 800a354:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a356:	2300      	movs	r3, #0
 800a358:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a35a:	1d3a      	adds	r2, r7, #4
 800a35c:	f107 0108 	add.w	r1, r7, #8
 800a360:	f107 030c 	add.w	r3, r7, #12
 800a364:	4618      	mov	r0, r3
 800a366:	f7fe fb15 	bl	8008994 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a36a:	6879      	ldr	r1, [r7, #4]
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	9202      	str	r2, [sp, #8]
 800a372:	9301      	str	r3, [sp, #4]
 800a374:	2302      	movs	r3, #2
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	2300      	movs	r3, #0
 800a37a:	460a      	mov	r2, r1
 800a37c:	4911      	ldr	r1, [pc, #68]	@ (800a3c4 <xTimerCreateTimerTask+0x88>)
 800a37e:	4812      	ldr	r0, [pc, #72]	@ (800a3c8 <xTimerCreateTimerTask+0x8c>)
 800a380:	f7ff f8d0 	bl	8009524 <xTaskCreateStatic>
 800a384:	4603      	mov	r3, r0
 800a386:	4a11      	ldr	r2, [pc, #68]	@ (800a3cc <xTimerCreateTimerTask+0x90>)
 800a388:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a38a:	4b10      	ldr	r3, [pc, #64]	@ (800a3cc <xTimerCreateTimerTask+0x90>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d001      	beq.n	800a396 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a392:	2301      	movs	r3, #1
 800a394:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d10b      	bne.n	800a3b4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a39c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a0:	f383 8811 	msr	BASEPRI, r3
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	613b      	str	r3, [r7, #16]
}
 800a3ae:	bf00      	nop
 800a3b0:	bf00      	nop
 800a3b2:	e7fd      	b.n	800a3b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a3b4:	697b      	ldr	r3, [r7, #20]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3718      	adds	r7, #24
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	20000d34 	.word	0x20000d34
 800a3c4:	0800b318 	.word	0x0800b318
 800a3c8:	0800a509 	.word	0x0800a509
 800a3cc:	20000d38 	.word	0x20000d38

0800a3d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b08a      	sub	sp, #40	@ 0x28
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	607a      	str	r2, [r7, #4]
 800a3dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10b      	bne.n	800a400 <xTimerGenericCommand+0x30>
	__asm volatile
 800a3e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ec:	f383 8811 	msr	BASEPRI, r3
 800a3f0:	f3bf 8f6f 	isb	sy
 800a3f4:	f3bf 8f4f 	dsb	sy
 800a3f8:	623b      	str	r3, [r7, #32]
}
 800a3fa:	bf00      	nop
 800a3fc:	bf00      	nop
 800a3fe:	e7fd      	b.n	800a3fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a400:	4b19      	ldr	r3, [pc, #100]	@ (800a468 <xTimerGenericCommand+0x98>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d02a      	beq.n	800a45e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2b05      	cmp	r3, #5
 800a418:	dc18      	bgt.n	800a44c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a41a:	f7ff fead 	bl	800a178 <xTaskGetSchedulerState>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b02      	cmp	r3, #2
 800a422:	d109      	bne.n	800a438 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a424:	4b10      	ldr	r3, [pc, #64]	@ (800a468 <xTimerGenericCommand+0x98>)
 800a426:	6818      	ldr	r0, [r3, #0]
 800a428:	f107 0110 	add.w	r1, r7, #16
 800a42c:	2300      	movs	r3, #0
 800a42e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a430:	f7fe fc88 	bl	8008d44 <xQueueGenericSend>
 800a434:	6278      	str	r0, [r7, #36]	@ 0x24
 800a436:	e012      	b.n	800a45e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a438:	4b0b      	ldr	r3, [pc, #44]	@ (800a468 <xTimerGenericCommand+0x98>)
 800a43a:	6818      	ldr	r0, [r3, #0]
 800a43c:	f107 0110 	add.w	r1, r7, #16
 800a440:	2300      	movs	r3, #0
 800a442:	2200      	movs	r2, #0
 800a444:	f7fe fc7e 	bl	8008d44 <xQueueGenericSend>
 800a448:	6278      	str	r0, [r7, #36]	@ 0x24
 800a44a:	e008      	b.n	800a45e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a44c:	4b06      	ldr	r3, [pc, #24]	@ (800a468 <xTimerGenericCommand+0x98>)
 800a44e:	6818      	ldr	r0, [r3, #0]
 800a450:	f107 0110 	add.w	r1, r7, #16
 800a454:	2300      	movs	r3, #0
 800a456:	683a      	ldr	r2, [r7, #0]
 800a458:	f7fe fd76 	bl	8008f48 <xQueueGenericSendFromISR>
 800a45c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a460:	4618      	mov	r0, r3
 800a462:	3728      	adds	r7, #40	@ 0x28
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	20000d34 	.word	0x20000d34

0800a46c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b088      	sub	sp, #32
 800a470:	af02      	add	r7, sp, #8
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a476:	4b23      	ldr	r3, [pc, #140]	@ (800a504 <prvProcessExpiredTimer+0x98>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	3304      	adds	r3, #4
 800a484:	4618      	mov	r0, r3
 800a486:	f7fe fb29 	bl	8008adc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a490:	f003 0304 	and.w	r3, r3, #4
 800a494:	2b00      	cmp	r3, #0
 800a496:	d023      	beq.n	800a4e0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	699a      	ldr	r2, [r3, #24]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	18d1      	adds	r1, r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	6978      	ldr	r0, [r7, #20]
 800a4a6:	f000 f8d5 	bl	800a654 <prvInsertTimerInActiveList>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d020      	beq.n	800a4f2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	6978      	ldr	r0, [r7, #20]
 800a4bc:	f7ff ff88 	bl	800a3d0 <xTimerGenericCommand>
 800a4c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d114      	bne.n	800a4f2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a4c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4cc:	f383 8811 	msr	BASEPRI, r3
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	60fb      	str	r3, [r7, #12]
}
 800a4da:	bf00      	nop
 800a4dc:	bf00      	nop
 800a4de:	e7fd      	b.n	800a4dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4e6:	f023 0301 	bic.w	r3, r3, #1
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	6a1b      	ldr	r3, [r3, #32]
 800a4f6:	6978      	ldr	r0, [r7, #20]
 800a4f8:	4798      	blx	r3
}
 800a4fa:	bf00      	nop
 800a4fc:	3718      	adds	r7, #24
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	20000d2c 	.word	0x20000d2c

0800a508 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a510:	f107 0308 	add.w	r3, r7, #8
 800a514:	4618      	mov	r0, r3
 800a516:	f000 f859 	bl	800a5cc <prvGetNextExpireTime>
 800a51a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	4619      	mov	r1, r3
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f000 f805 	bl	800a530 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a526:	f000 f8d7 	bl	800a6d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a52a:	bf00      	nop
 800a52c:	e7f0      	b.n	800a510 <prvTimerTask+0x8>
	...

0800a530 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a53a:	f7ff fa37 	bl	80099ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a53e:	f107 0308 	add.w	r3, r7, #8
 800a542:	4618      	mov	r0, r3
 800a544:	f000 f866 	bl	800a614 <prvSampleTimeNow>
 800a548:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d130      	bne.n	800a5b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d10a      	bne.n	800a56c <prvProcessTimerOrBlockTask+0x3c>
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d806      	bhi.n	800a56c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a55e:	f7ff fa33 	bl	80099c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a562:	68f9      	ldr	r1, [r7, #12]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f7ff ff81 	bl	800a46c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a56a:	e024      	b.n	800a5b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d008      	beq.n	800a584 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a572:	4b13      	ldr	r3, [pc, #76]	@ (800a5c0 <prvProcessTimerOrBlockTask+0x90>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d101      	bne.n	800a580 <prvProcessTimerOrBlockTask+0x50>
 800a57c:	2301      	movs	r3, #1
 800a57e:	e000      	b.n	800a582 <prvProcessTimerOrBlockTask+0x52>
 800a580:	2300      	movs	r3, #0
 800a582:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a584:	4b0f      	ldr	r3, [pc, #60]	@ (800a5c4 <prvProcessTimerOrBlockTask+0x94>)
 800a586:	6818      	ldr	r0, [r3, #0]
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	4619      	mov	r1, r3
 800a592:	f7fe ff93 	bl	80094bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a596:	f7ff fa17 	bl	80099c8 <xTaskResumeAll>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10a      	bne.n	800a5b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a5a0:	4b09      	ldr	r3, [pc, #36]	@ (800a5c8 <prvProcessTimerOrBlockTask+0x98>)
 800a5a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5a6:	601a      	str	r2, [r3, #0]
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	f3bf 8f6f 	isb	sy
}
 800a5b0:	e001      	b.n	800a5b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a5b2:	f7ff fa09 	bl	80099c8 <xTaskResumeAll>
}
 800a5b6:	bf00      	nop
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	20000d30 	.word	0x20000d30
 800a5c4:	20000d34 	.word	0x20000d34
 800a5c8:	e000ed04 	.word	0xe000ed04

0800a5cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a5d4:	4b0e      	ldr	r3, [pc, #56]	@ (800a610 <prvGetNextExpireTime+0x44>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d101      	bne.n	800a5e2 <prvGetNextExpireTime+0x16>
 800a5de:	2201      	movs	r2, #1
 800a5e0:	e000      	b.n	800a5e4 <prvGetNextExpireTime+0x18>
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d105      	bne.n	800a5fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5f0:	4b07      	ldr	r3, [pc, #28]	@ (800a610 <prvGetNextExpireTime+0x44>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	60fb      	str	r3, [r7, #12]
 800a5fa:	e001      	b.n	800a600 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a600:	68fb      	ldr	r3, [r7, #12]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3714      	adds	r7, #20
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	20000d2c 	.word	0x20000d2c

0800a614 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a61c:	f7ff fa72 	bl	8009b04 <xTaskGetTickCount>
 800a620:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a622:	4b0b      	ldr	r3, [pc, #44]	@ (800a650 <prvSampleTimeNow+0x3c>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	68fa      	ldr	r2, [r7, #12]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d205      	bcs.n	800a638 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a62c:	f000 f93a 	bl	800a8a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	601a      	str	r2, [r3, #0]
 800a636:	e002      	b.n	800a63e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a63e:	4a04      	ldr	r2, [pc, #16]	@ (800a650 <prvSampleTimeNow+0x3c>)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a644:	68fb      	ldr	r3, [r7, #12]
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	20000d3c 	.word	0x20000d3c

0800a654 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b086      	sub	sp, #24
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]
 800a660:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a662:	2300      	movs	r3, #0
 800a664:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	68ba      	ldr	r2, [r7, #8]
 800a66a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	429a      	cmp	r2, r3
 800a678:	d812      	bhi.n	800a6a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	1ad2      	subs	r2, r2, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	429a      	cmp	r2, r3
 800a686:	d302      	bcc.n	800a68e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a688:	2301      	movs	r3, #1
 800a68a:	617b      	str	r3, [r7, #20]
 800a68c:	e01b      	b.n	800a6c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a68e:	4b10      	ldr	r3, [pc, #64]	@ (800a6d0 <prvInsertTimerInActiveList+0x7c>)
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	3304      	adds	r3, #4
 800a696:	4619      	mov	r1, r3
 800a698:	4610      	mov	r0, r2
 800a69a:	f7fe f9e6 	bl	8008a6a <vListInsert>
 800a69e:	e012      	b.n	800a6c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d206      	bcs.n	800a6b6 <prvInsertTimerInActiveList+0x62>
 800a6a8:	68ba      	ldr	r2, [r7, #8]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d302      	bcc.n	800a6b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	617b      	str	r3, [r7, #20]
 800a6b4:	e007      	b.n	800a6c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6b6:	4b07      	ldr	r3, [pc, #28]	@ (800a6d4 <prvInsertTimerInActiveList+0x80>)
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	3304      	adds	r3, #4
 800a6be:	4619      	mov	r1, r3
 800a6c0:	4610      	mov	r0, r2
 800a6c2:	f7fe f9d2 	bl	8008a6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a6c6:	697b      	ldr	r3, [r7, #20]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3718      	adds	r7, #24
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	20000d30 	.word	0x20000d30
 800a6d4:	20000d2c 	.word	0x20000d2c

0800a6d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b08e      	sub	sp, #56	@ 0x38
 800a6dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6de:	e0ce      	b.n	800a87e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	da19      	bge.n	800a71a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a6e6:	1d3b      	adds	r3, r7, #4
 800a6e8:	3304      	adds	r3, #4
 800a6ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d10b      	bne.n	800a70a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f6:	f383 8811 	msr	BASEPRI, r3
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	61fb      	str	r3, [r7, #28]
}
 800a704:	bf00      	nop
 800a706:	bf00      	nop
 800a708:	e7fd      	b.n	800a706 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a70a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a710:	6850      	ldr	r0, [r2, #4]
 800a712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a714:	6892      	ldr	r2, [r2, #8]
 800a716:	4611      	mov	r1, r2
 800a718:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f2c0 80ae 	blt.w	800a87e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a728:	695b      	ldr	r3, [r3, #20]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d004      	beq.n	800a738 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a730:	3304      	adds	r3, #4
 800a732:	4618      	mov	r0, r3
 800a734:	f7fe f9d2 	bl	8008adc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a738:	463b      	mov	r3, r7
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7ff ff6a 	bl	800a614 <prvSampleTimeNow>
 800a740:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2b09      	cmp	r3, #9
 800a746:	f200 8097 	bhi.w	800a878 <prvProcessReceivedCommands+0x1a0>
 800a74a:	a201      	add	r2, pc, #4	@ (adr r2, 800a750 <prvProcessReceivedCommands+0x78>)
 800a74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a750:	0800a779 	.word	0x0800a779
 800a754:	0800a779 	.word	0x0800a779
 800a758:	0800a779 	.word	0x0800a779
 800a75c:	0800a7ef 	.word	0x0800a7ef
 800a760:	0800a803 	.word	0x0800a803
 800a764:	0800a84f 	.word	0x0800a84f
 800a768:	0800a779 	.word	0x0800a779
 800a76c:	0800a779 	.word	0x0800a779
 800a770:	0800a7ef 	.word	0x0800a7ef
 800a774:	0800a803 	.word	0x0800a803
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a77e:	f043 0301 	orr.w	r3, r3, #1
 800a782:	b2da      	uxtb	r2, r3
 800a784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a786:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a78e:	699b      	ldr	r3, [r3, #24]
 800a790:	18d1      	adds	r1, r2, r3
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a796:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a798:	f7ff ff5c 	bl	800a654 <prvInsertTimerInActiveList>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d06c      	beq.n	800a87c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a4:	6a1b      	ldr	r3, [r3, #32]
 800a7a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7b0:	f003 0304 	and.w	r3, r3, #4
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d061      	beq.n	800a87c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a7b8:	68ba      	ldr	r2, [r7, #8]
 800a7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7bc:	699b      	ldr	r3, [r3, #24]
 800a7be:	441a      	add	r2, r3
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7ca:	f7ff fe01 	bl	800a3d0 <xTimerGenericCommand>
 800a7ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a7d0:	6a3b      	ldr	r3, [r7, #32]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d152      	bne.n	800a87c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7da:	f383 8811 	msr	BASEPRI, r3
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	61bb      	str	r3, [r7, #24]
}
 800a7e8:	bf00      	nop
 800a7ea:	bf00      	nop
 800a7ec:	e7fd      	b.n	800a7ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7f4:	f023 0301 	bic.w	r3, r3, #1
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a800:	e03d      	b.n	800a87e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a804:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a808:	f043 0301 	orr.w	r3, r3, #1
 800a80c:	b2da      	uxtb	r2, r3
 800a80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a810:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a818:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a81c:	699b      	ldr	r3, [r3, #24]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10b      	bne.n	800a83a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	617b      	str	r3, [r7, #20]
}
 800a834:	bf00      	nop
 800a836:	bf00      	nop
 800a838:	e7fd      	b.n	800a836 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a83a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a83c:	699a      	ldr	r2, [r3, #24]
 800a83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a840:	18d1      	adds	r1, r2, r3
 800a842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a848:	f7ff ff04 	bl	800a654 <prvInsertTimerInActiveList>
					break;
 800a84c:	e017      	b.n	800a87e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a850:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a854:	f003 0302 	and.w	r3, r3, #2
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d103      	bne.n	800a864 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a85c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a85e:	f000 fbeb 	bl	800b038 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a862:	e00c      	b.n	800a87e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a866:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a86a:	f023 0301 	bic.w	r3, r3, #1
 800a86e:	b2da      	uxtb	r2, r3
 800a870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a872:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a876:	e002      	b.n	800a87e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a878:	bf00      	nop
 800a87a:	e000      	b.n	800a87e <prvProcessReceivedCommands+0x1a6>
					break;
 800a87c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a87e:	4b08      	ldr	r3, [pc, #32]	@ (800a8a0 <prvProcessReceivedCommands+0x1c8>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	1d39      	adds	r1, r7, #4
 800a884:	2200      	movs	r2, #0
 800a886:	4618      	mov	r0, r3
 800a888:	f7fe fbfc 	bl	8009084 <xQueueReceive>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	f47f af26 	bne.w	800a6e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a894:	bf00      	nop
 800a896:	bf00      	nop
 800a898:	3730      	adds	r7, #48	@ 0x30
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	20000d34 	.word	0x20000d34

0800a8a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b088      	sub	sp, #32
 800a8a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8aa:	e049      	b.n	800a940 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8ac:	4b2e      	ldr	r3, [pc, #184]	@ (800a968 <prvSwitchTimerLists+0xc4>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8b6:	4b2c      	ldr	r3, [pc, #176]	@ (800a968 <prvSwitchTimerLists+0xc4>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	3304      	adds	r3, #4
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7fe f909 	bl	8008adc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6a1b      	ldr	r3, [r3, #32]
 800a8ce:	68f8      	ldr	r0, [r7, #12]
 800a8d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8d8:	f003 0304 	and.w	r3, r3, #4
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d02f      	beq.n	800a940 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	699b      	ldr	r3, [r3, #24]
 800a8e4:	693a      	ldr	r2, [r7, #16]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a8ea:	68ba      	ldr	r2, [r7, #8]
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d90e      	bls.n	800a910 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	68ba      	ldr	r2, [r7, #8]
 800a8f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a8fe:	4b1a      	ldr	r3, [pc, #104]	@ (800a968 <prvSwitchTimerLists+0xc4>)
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	3304      	adds	r3, #4
 800a906:	4619      	mov	r1, r3
 800a908:	4610      	mov	r0, r2
 800a90a:	f7fe f8ae 	bl	8008a6a <vListInsert>
 800a90e:	e017      	b.n	800a940 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a910:	2300      	movs	r3, #0
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	2300      	movs	r3, #0
 800a916:	693a      	ldr	r2, [r7, #16]
 800a918:	2100      	movs	r1, #0
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f7ff fd58 	bl	800a3d0 <xTimerGenericCommand>
 800a920:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10b      	bne.n	800a940 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a92c:	f383 8811 	msr	BASEPRI, r3
 800a930:	f3bf 8f6f 	isb	sy
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	603b      	str	r3, [r7, #0]
}
 800a93a:	bf00      	nop
 800a93c:	bf00      	nop
 800a93e:	e7fd      	b.n	800a93c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a940:	4b09      	ldr	r3, [pc, #36]	@ (800a968 <prvSwitchTimerLists+0xc4>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1b0      	bne.n	800a8ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a94a:	4b07      	ldr	r3, [pc, #28]	@ (800a968 <prvSwitchTimerLists+0xc4>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a950:	4b06      	ldr	r3, [pc, #24]	@ (800a96c <prvSwitchTimerLists+0xc8>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a04      	ldr	r2, [pc, #16]	@ (800a968 <prvSwitchTimerLists+0xc4>)
 800a956:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a958:	4a04      	ldr	r2, [pc, #16]	@ (800a96c <prvSwitchTimerLists+0xc8>)
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	6013      	str	r3, [r2, #0]
}
 800a95e:	bf00      	nop
 800a960:	3718      	adds	r7, #24
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	20000d2c 	.word	0x20000d2c
 800a96c:	20000d30 	.word	0x20000d30

0800a970 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a976:	f000 f96f 	bl	800ac58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a97a:	4b15      	ldr	r3, [pc, #84]	@ (800a9d0 <prvCheckForValidListAndQueue+0x60>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d120      	bne.n	800a9c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a982:	4814      	ldr	r0, [pc, #80]	@ (800a9d4 <prvCheckForValidListAndQueue+0x64>)
 800a984:	f7fe f820 	bl	80089c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a988:	4813      	ldr	r0, [pc, #76]	@ (800a9d8 <prvCheckForValidListAndQueue+0x68>)
 800a98a:	f7fe f81d 	bl	80089c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a98e:	4b13      	ldr	r3, [pc, #76]	@ (800a9dc <prvCheckForValidListAndQueue+0x6c>)
 800a990:	4a10      	ldr	r2, [pc, #64]	@ (800a9d4 <prvCheckForValidListAndQueue+0x64>)
 800a992:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a994:	4b12      	ldr	r3, [pc, #72]	@ (800a9e0 <prvCheckForValidListAndQueue+0x70>)
 800a996:	4a10      	ldr	r2, [pc, #64]	@ (800a9d8 <prvCheckForValidListAndQueue+0x68>)
 800a998:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a99a:	2300      	movs	r3, #0
 800a99c:	9300      	str	r3, [sp, #0]
 800a99e:	4b11      	ldr	r3, [pc, #68]	@ (800a9e4 <prvCheckForValidListAndQueue+0x74>)
 800a9a0:	4a11      	ldr	r2, [pc, #68]	@ (800a9e8 <prvCheckForValidListAndQueue+0x78>)
 800a9a2:	2110      	movs	r1, #16
 800a9a4:	200a      	movs	r0, #10
 800a9a6:	f7fe f92d 	bl	8008c04 <xQueueGenericCreateStatic>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	4a08      	ldr	r2, [pc, #32]	@ (800a9d0 <prvCheckForValidListAndQueue+0x60>)
 800a9ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a9b0:	4b07      	ldr	r3, [pc, #28]	@ (800a9d0 <prvCheckForValidListAndQueue+0x60>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d005      	beq.n	800a9c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a9b8:	4b05      	ldr	r3, [pc, #20]	@ (800a9d0 <prvCheckForValidListAndQueue+0x60>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	490b      	ldr	r1, [pc, #44]	@ (800a9ec <prvCheckForValidListAndQueue+0x7c>)
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fe fd52 	bl	8009468 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9c4:	f000 f97a 	bl	800acbc <vPortExitCritical>
}
 800a9c8:	bf00      	nop
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	20000d34 	.word	0x20000d34
 800a9d4:	20000d04 	.word	0x20000d04
 800a9d8:	20000d18 	.word	0x20000d18
 800a9dc:	20000d2c 	.word	0x20000d2c
 800a9e0:	20000d30 	.word	0x20000d30
 800a9e4:	20000de0 	.word	0x20000de0
 800a9e8:	20000d40 	.word	0x20000d40
 800a9ec:	0800b320 	.word	0x0800b320

0800a9f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	3b04      	subs	r3, #4
 800aa00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800aa08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	3b04      	subs	r3, #4
 800aa0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	f023 0201 	bic.w	r2, r3, #1
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	3b04      	subs	r3, #4
 800aa1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa20:	4a0c      	ldr	r2, [pc, #48]	@ (800aa54 <pxPortInitialiseStack+0x64>)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	3b14      	subs	r3, #20
 800aa2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	3b04      	subs	r3, #4
 800aa36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f06f 0202 	mvn.w	r2, #2
 800aa3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	3b20      	subs	r3, #32
 800aa44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aa46:	68fb      	ldr	r3, [r7, #12]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3714      	adds	r7, #20
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr
 800aa54:	0800aa59 	.word	0x0800aa59

0800aa58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b085      	sub	sp, #20
 800aa5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa62:	4b13      	ldr	r3, [pc, #76]	@ (800aab0 <prvTaskExitError+0x58>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa6a:	d00b      	beq.n	800aa84 <prvTaskExitError+0x2c>
	__asm volatile
 800aa6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa70:	f383 8811 	msr	BASEPRI, r3
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	60fb      	str	r3, [r7, #12]
}
 800aa7e:	bf00      	nop
 800aa80:	bf00      	nop
 800aa82:	e7fd      	b.n	800aa80 <prvTaskExitError+0x28>
	__asm volatile
 800aa84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	60bb      	str	r3, [r7, #8]
}
 800aa96:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa98:	bf00      	nop
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d0fc      	beq.n	800aa9a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aaa0:	bf00      	nop
 800aaa2:	bf00      	nop
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	2000000c 	.word	0x2000000c
	...

0800aac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aac0:	4b07      	ldr	r3, [pc, #28]	@ (800aae0 <pxCurrentTCBConst2>)
 800aac2:	6819      	ldr	r1, [r3, #0]
 800aac4:	6808      	ldr	r0, [r1, #0]
 800aac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaca:	f380 8809 	msr	PSP, r0
 800aace:	f3bf 8f6f 	isb	sy
 800aad2:	f04f 0000 	mov.w	r0, #0
 800aad6:	f380 8811 	msr	BASEPRI, r0
 800aada:	4770      	bx	lr
 800aadc:	f3af 8000 	nop.w

0800aae0 <pxCurrentTCBConst2>:
 800aae0:	20000804 	.word	0x20000804
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aae4:	bf00      	nop
 800aae6:	bf00      	nop

0800aae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aae8:	4808      	ldr	r0, [pc, #32]	@ (800ab0c <prvPortStartFirstTask+0x24>)
 800aaea:	6800      	ldr	r0, [r0, #0]
 800aaec:	6800      	ldr	r0, [r0, #0]
 800aaee:	f380 8808 	msr	MSP, r0
 800aaf2:	f04f 0000 	mov.w	r0, #0
 800aaf6:	f380 8814 	msr	CONTROL, r0
 800aafa:	b662      	cpsie	i
 800aafc:	b661      	cpsie	f
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	f3bf 8f6f 	isb	sy
 800ab06:	df00      	svc	0
 800ab08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab0a:	bf00      	nop
 800ab0c:	e000ed08 	.word	0xe000ed08

0800ab10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ab16:	4b47      	ldr	r3, [pc, #284]	@ (800ac34 <xPortStartScheduler+0x124>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a47      	ldr	r2, [pc, #284]	@ (800ac38 <xPortStartScheduler+0x128>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d10b      	bne.n	800ab38 <xPortStartScheduler+0x28>
	__asm volatile
 800ab20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	613b      	str	r3, [r7, #16]
}
 800ab32:	bf00      	nop
 800ab34:	bf00      	nop
 800ab36:	e7fd      	b.n	800ab34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ab38:	4b3e      	ldr	r3, [pc, #248]	@ (800ac34 <xPortStartScheduler+0x124>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a3f      	ldr	r2, [pc, #252]	@ (800ac3c <xPortStartScheduler+0x12c>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d10b      	bne.n	800ab5a <xPortStartScheduler+0x4a>
	__asm volatile
 800ab42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab46:	f383 8811 	msr	BASEPRI, r3
 800ab4a:	f3bf 8f6f 	isb	sy
 800ab4e:	f3bf 8f4f 	dsb	sy
 800ab52:	60fb      	str	r3, [r7, #12]
}
 800ab54:	bf00      	nop
 800ab56:	bf00      	nop
 800ab58:	e7fd      	b.n	800ab56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ab5a:	4b39      	ldr	r3, [pc, #228]	@ (800ac40 <xPortStartScheduler+0x130>)
 800ab5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	22ff      	movs	r2, #255	@ 0xff
 800ab6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab74:	78fb      	ldrb	r3, [r7, #3]
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	4b31      	ldr	r3, [pc, #196]	@ (800ac44 <xPortStartScheduler+0x134>)
 800ab80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab82:	4b31      	ldr	r3, [pc, #196]	@ (800ac48 <xPortStartScheduler+0x138>)
 800ab84:	2207      	movs	r2, #7
 800ab86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab88:	e009      	b.n	800ab9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ab8a:	4b2f      	ldr	r3, [pc, #188]	@ (800ac48 <xPortStartScheduler+0x138>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	4a2d      	ldr	r2, [pc, #180]	@ (800ac48 <xPortStartScheduler+0x138>)
 800ab92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab94:	78fb      	ldrb	r3, [r7, #3]
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	005b      	lsls	r3, r3, #1
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab9e:	78fb      	ldrb	r3, [r7, #3]
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aba6:	2b80      	cmp	r3, #128	@ 0x80
 800aba8:	d0ef      	beq.n	800ab8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800abaa:	4b27      	ldr	r3, [pc, #156]	@ (800ac48 <xPortStartScheduler+0x138>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f1c3 0307 	rsb	r3, r3, #7
 800abb2:	2b04      	cmp	r3, #4
 800abb4:	d00b      	beq.n	800abce <xPortStartScheduler+0xbe>
	__asm volatile
 800abb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abba:	f383 8811 	msr	BASEPRI, r3
 800abbe:	f3bf 8f6f 	isb	sy
 800abc2:	f3bf 8f4f 	dsb	sy
 800abc6:	60bb      	str	r3, [r7, #8]
}
 800abc8:	bf00      	nop
 800abca:	bf00      	nop
 800abcc:	e7fd      	b.n	800abca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800abce:	4b1e      	ldr	r3, [pc, #120]	@ (800ac48 <xPortStartScheduler+0x138>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	021b      	lsls	r3, r3, #8
 800abd4:	4a1c      	ldr	r2, [pc, #112]	@ (800ac48 <xPortStartScheduler+0x138>)
 800abd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800abd8:	4b1b      	ldr	r3, [pc, #108]	@ (800ac48 <xPortStartScheduler+0x138>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800abe0:	4a19      	ldr	r2, [pc, #100]	@ (800ac48 <xPortStartScheduler+0x138>)
 800abe2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	b2da      	uxtb	r2, r3
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800abec:	4b17      	ldr	r3, [pc, #92]	@ (800ac4c <xPortStartScheduler+0x13c>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a16      	ldr	r2, [pc, #88]	@ (800ac4c <xPortStartScheduler+0x13c>)
 800abf2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800abf6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800abf8:	4b14      	ldr	r3, [pc, #80]	@ (800ac4c <xPortStartScheduler+0x13c>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a13      	ldr	r2, [pc, #76]	@ (800ac4c <xPortStartScheduler+0x13c>)
 800abfe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ac02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac04:	f000 f8da 	bl	800adbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac08:	4b11      	ldr	r3, [pc, #68]	@ (800ac50 <xPortStartScheduler+0x140>)
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac0e:	f000 f8f9 	bl	800ae04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac12:	4b10      	ldr	r3, [pc, #64]	@ (800ac54 <xPortStartScheduler+0x144>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a0f      	ldr	r2, [pc, #60]	@ (800ac54 <xPortStartScheduler+0x144>)
 800ac18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ac1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac1e:	f7ff ff63 	bl	800aae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac22:	f7ff f839 	bl	8009c98 <vTaskSwitchContext>
	prvTaskExitError();
 800ac26:	f7ff ff17 	bl	800aa58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3718      	adds	r7, #24
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	e000ed00 	.word	0xe000ed00
 800ac38:	410fc271 	.word	0x410fc271
 800ac3c:	410fc270 	.word	0x410fc270
 800ac40:	e000e400 	.word	0xe000e400
 800ac44:	20000e30 	.word	0x20000e30
 800ac48:	20000e34 	.word	0x20000e34
 800ac4c:	e000ed20 	.word	0xe000ed20
 800ac50:	2000000c 	.word	0x2000000c
 800ac54:	e000ef34 	.word	0xe000ef34

0800ac58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	607b      	str	r3, [r7, #4]
}
 800ac70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ac72:	4b10      	ldr	r3, [pc, #64]	@ (800acb4 <vPortEnterCritical+0x5c>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	3301      	adds	r3, #1
 800ac78:	4a0e      	ldr	r2, [pc, #56]	@ (800acb4 <vPortEnterCritical+0x5c>)
 800ac7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac7c:	4b0d      	ldr	r3, [pc, #52]	@ (800acb4 <vPortEnterCritical+0x5c>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d110      	bne.n	800aca6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ac84:	4b0c      	ldr	r3, [pc, #48]	@ (800acb8 <vPortEnterCritical+0x60>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00b      	beq.n	800aca6 <vPortEnterCritical+0x4e>
	__asm volatile
 800ac8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac92:	f383 8811 	msr	BASEPRI, r3
 800ac96:	f3bf 8f6f 	isb	sy
 800ac9a:	f3bf 8f4f 	dsb	sy
 800ac9e:	603b      	str	r3, [r7, #0]
}
 800aca0:	bf00      	nop
 800aca2:	bf00      	nop
 800aca4:	e7fd      	b.n	800aca2 <vPortEnterCritical+0x4a>
	}
}
 800aca6:	bf00      	nop
 800aca8:	370c      	adds	r7, #12
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop
 800acb4:	2000000c 	.word	0x2000000c
 800acb8:	e000ed04 	.word	0xe000ed04

0800acbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800acc2:	4b12      	ldr	r3, [pc, #72]	@ (800ad0c <vPortExitCritical+0x50>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d10b      	bne.n	800ace2 <vPortExitCritical+0x26>
	__asm volatile
 800acca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acce:	f383 8811 	msr	BASEPRI, r3
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	607b      	str	r3, [r7, #4]
}
 800acdc:	bf00      	nop
 800acde:	bf00      	nop
 800ace0:	e7fd      	b.n	800acde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ace2:	4b0a      	ldr	r3, [pc, #40]	@ (800ad0c <vPortExitCritical+0x50>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	3b01      	subs	r3, #1
 800ace8:	4a08      	ldr	r2, [pc, #32]	@ (800ad0c <vPortExitCritical+0x50>)
 800acea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800acec:	4b07      	ldr	r3, [pc, #28]	@ (800ad0c <vPortExitCritical+0x50>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d105      	bne.n	800ad00 <vPortExitCritical+0x44>
 800acf4:	2300      	movs	r3, #0
 800acf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	f383 8811 	msr	BASEPRI, r3
}
 800acfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ad00:	bf00      	nop
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr
 800ad0c:	2000000c 	.word	0x2000000c

0800ad10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad10:	f3ef 8009 	mrs	r0, PSP
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	4b15      	ldr	r3, [pc, #84]	@ (800ad70 <pxCurrentTCBConst>)
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	f01e 0f10 	tst.w	lr, #16
 800ad20:	bf08      	it	eq
 800ad22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad2a:	6010      	str	r0, [r2, #0]
 800ad2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ad34:	f380 8811 	msr	BASEPRI, r0
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	f3bf 8f6f 	isb	sy
 800ad40:	f7fe ffaa 	bl	8009c98 <vTaskSwitchContext>
 800ad44:	f04f 0000 	mov.w	r0, #0
 800ad48:	f380 8811 	msr	BASEPRI, r0
 800ad4c:	bc09      	pop	{r0, r3}
 800ad4e:	6819      	ldr	r1, [r3, #0]
 800ad50:	6808      	ldr	r0, [r1, #0]
 800ad52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad56:	f01e 0f10 	tst.w	lr, #16
 800ad5a:	bf08      	it	eq
 800ad5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ad60:	f380 8809 	msr	PSP, r0
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	f3af 8000 	nop.w

0800ad70 <pxCurrentTCBConst>:
 800ad70:	20000804 	.word	0x20000804
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ad74:	bf00      	nop
 800ad76:	bf00      	nop

0800ad78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	607b      	str	r3, [r7, #4]
}
 800ad90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad92:	f7fe fec7 	bl	8009b24 <xTaskIncrementTick>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d003      	beq.n	800ada4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad9c:	4b06      	ldr	r3, [pc, #24]	@ (800adb8 <xPortSysTickHandler+0x40>)
 800ad9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ada2:	601a      	str	r2, [r3, #0]
 800ada4:	2300      	movs	r3, #0
 800ada6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	f383 8811 	msr	BASEPRI, r3
}
 800adae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800adb0:	bf00      	nop
 800adb2:	3708      	adds	r7, #8
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	e000ed04 	.word	0xe000ed04

0800adbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800adbc:	b480      	push	{r7}
 800adbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800adc0:	4b0b      	ldr	r3, [pc, #44]	@ (800adf0 <vPortSetupTimerInterrupt+0x34>)
 800adc2:	2200      	movs	r2, #0
 800adc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800adc6:	4b0b      	ldr	r3, [pc, #44]	@ (800adf4 <vPortSetupTimerInterrupt+0x38>)
 800adc8:	2200      	movs	r2, #0
 800adca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800adcc:	4b0a      	ldr	r3, [pc, #40]	@ (800adf8 <vPortSetupTimerInterrupt+0x3c>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a0a      	ldr	r2, [pc, #40]	@ (800adfc <vPortSetupTimerInterrupt+0x40>)
 800add2:	fba2 2303 	umull	r2, r3, r2, r3
 800add6:	099b      	lsrs	r3, r3, #6
 800add8:	4a09      	ldr	r2, [pc, #36]	@ (800ae00 <vPortSetupTimerInterrupt+0x44>)
 800adda:	3b01      	subs	r3, #1
 800addc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800adde:	4b04      	ldr	r3, [pc, #16]	@ (800adf0 <vPortSetupTimerInterrupt+0x34>)
 800ade0:	2207      	movs	r2, #7
 800ade2:	601a      	str	r2, [r3, #0]
}
 800ade4:	bf00      	nop
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop
 800adf0:	e000e010 	.word	0xe000e010
 800adf4:	e000e018 	.word	0xe000e018
 800adf8:	20000000 	.word	0x20000000
 800adfc:	10624dd3 	.word	0x10624dd3
 800ae00:	e000e014 	.word	0xe000e014

0800ae04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ae14 <vPortEnableVFP+0x10>
 800ae08:	6801      	ldr	r1, [r0, #0]
 800ae0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ae0e:	6001      	str	r1, [r0, #0]
 800ae10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ae12:	bf00      	nop
 800ae14:	e000ed88 	.word	0xe000ed88

0800ae18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae1e:	f3ef 8305 	mrs	r3, IPSR
 800ae22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2b0f      	cmp	r3, #15
 800ae28:	d915      	bls.n	800ae56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae2a:	4a18      	ldr	r2, [pc, #96]	@ (800ae8c <vPortValidateInterruptPriority+0x74>)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	4413      	add	r3, r2
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ae34:	4b16      	ldr	r3, [pc, #88]	@ (800ae90 <vPortValidateInterruptPriority+0x78>)
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	7afa      	ldrb	r2, [r7, #11]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d20b      	bcs.n	800ae56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ae3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	607b      	str	r3, [r7, #4]
}
 800ae50:	bf00      	nop
 800ae52:	bf00      	nop
 800ae54:	e7fd      	b.n	800ae52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ae56:	4b0f      	ldr	r3, [pc, #60]	@ (800ae94 <vPortValidateInterruptPriority+0x7c>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ae5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ae98 <vPortValidateInterruptPriority+0x80>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d90b      	bls.n	800ae7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ae66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae6a:	f383 8811 	msr	BASEPRI, r3
 800ae6e:	f3bf 8f6f 	isb	sy
 800ae72:	f3bf 8f4f 	dsb	sy
 800ae76:	603b      	str	r3, [r7, #0]
}
 800ae78:	bf00      	nop
 800ae7a:	bf00      	nop
 800ae7c:	e7fd      	b.n	800ae7a <vPortValidateInterruptPriority+0x62>
	}
 800ae7e:	bf00      	nop
 800ae80:	3714      	adds	r7, #20
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	e000e3f0 	.word	0xe000e3f0
 800ae90:	20000e30 	.word	0x20000e30
 800ae94:	e000ed0c 	.word	0xe000ed0c
 800ae98:	20000e34 	.word	0x20000e34

0800ae9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b08a      	sub	sp, #40	@ 0x28
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aea4:	2300      	movs	r3, #0
 800aea6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aea8:	f7fe fd80 	bl	80099ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aeac:	4b5c      	ldr	r3, [pc, #368]	@ (800b020 <pvPortMalloc+0x184>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d101      	bne.n	800aeb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aeb4:	f000 f924 	bl	800b100 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aeb8:	4b5a      	ldr	r3, [pc, #360]	@ (800b024 <pvPortMalloc+0x188>)
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4013      	ands	r3, r2
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	f040 8095 	bne.w	800aff0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d01e      	beq.n	800af0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800aecc:	2208      	movs	r2, #8
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4413      	add	r3, r2
 800aed2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f003 0307 	and.w	r3, r3, #7
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d015      	beq.n	800af0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f023 0307 	bic.w	r3, r3, #7
 800aee4:	3308      	adds	r3, #8
 800aee6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f003 0307 	and.w	r3, r3, #7
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00b      	beq.n	800af0a <pvPortMalloc+0x6e>
	__asm volatile
 800aef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	617b      	str	r3, [r7, #20]
}
 800af04:	bf00      	nop
 800af06:	bf00      	nop
 800af08:	e7fd      	b.n	800af06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d06f      	beq.n	800aff0 <pvPortMalloc+0x154>
 800af10:	4b45      	ldr	r3, [pc, #276]	@ (800b028 <pvPortMalloc+0x18c>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	429a      	cmp	r2, r3
 800af18:	d86a      	bhi.n	800aff0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af1a:	4b44      	ldr	r3, [pc, #272]	@ (800b02c <pvPortMalloc+0x190>)
 800af1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af1e:	4b43      	ldr	r3, [pc, #268]	@ (800b02c <pvPortMalloc+0x190>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af24:	e004      	b.n	800af30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800af26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	429a      	cmp	r2, r3
 800af38:	d903      	bls.n	800af42 <pvPortMalloc+0xa6>
 800af3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d1f1      	bne.n	800af26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800af42:	4b37      	ldr	r3, [pc, #220]	@ (800b020 <pvPortMalloc+0x184>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af48:	429a      	cmp	r2, r3
 800af4a:	d051      	beq.n	800aff0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800af4c:	6a3b      	ldr	r3, [r7, #32]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2208      	movs	r2, #8
 800af52:	4413      	add	r3, r2
 800af54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800af56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	6a3b      	ldr	r3, [r7, #32]
 800af5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800af5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af60:	685a      	ldr	r2, [r3, #4]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	1ad2      	subs	r2, r2, r3
 800af66:	2308      	movs	r3, #8
 800af68:	005b      	lsls	r3, r3, #1
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d920      	bls.n	800afb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800af6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4413      	add	r3, r2
 800af74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	f003 0307 	and.w	r3, r3, #7
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00b      	beq.n	800af98 <pvPortMalloc+0xfc>
	__asm volatile
 800af80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af84:	f383 8811 	msr	BASEPRI, r3
 800af88:	f3bf 8f6f 	isb	sy
 800af8c:	f3bf 8f4f 	dsb	sy
 800af90:	613b      	str	r3, [r7, #16]
}
 800af92:	bf00      	nop
 800af94:	bf00      	nop
 800af96:	e7fd      	b.n	800af94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800af98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9a:	685a      	ldr	r2, [r3, #4]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	1ad2      	subs	r2, r2, r3
 800afa0:	69bb      	ldr	r3, [r7, #24]
 800afa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800afa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800afaa:	69b8      	ldr	r0, [r7, #24]
 800afac:	f000 f90a 	bl	800b1c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800afb0:	4b1d      	ldr	r3, [pc, #116]	@ (800b028 <pvPortMalloc+0x18c>)
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	1ad3      	subs	r3, r2, r3
 800afba:	4a1b      	ldr	r2, [pc, #108]	@ (800b028 <pvPortMalloc+0x18c>)
 800afbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800afbe:	4b1a      	ldr	r3, [pc, #104]	@ (800b028 <pvPortMalloc+0x18c>)
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	4b1b      	ldr	r3, [pc, #108]	@ (800b030 <pvPortMalloc+0x194>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d203      	bcs.n	800afd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800afca:	4b17      	ldr	r3, [pc, #92]	@ (800b028 <pvPortMalloc+0x18c>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a18      	ldr	r2, [pc, #96]	@ (800b030 <pvPortMalloc+0x194>)
 800afd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800afd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd4:	685a      	ldr	r2, [r3, #4]
 800afd6:	4b13      	ldr	r3, [pc, #76]	@ (800b024 <pvPortMalloc+0x188>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	431a      	orrs	r2, r3
 800afdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800afe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe2:	2200      	movs	r2, #0
 800afe4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800afe6:	4b13      	ldr	r3, [pc, #76]	@ (800b034 <pvPortMalloc+0x198>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	3301      	adds	r3, #1
 800afec:	4a11      	ldr	r2, [pc, #68]	@ (800b034 <pvPortMalloc+0x198>)
 800afee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aff0:	f7fe fcea 	bl	80099c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aff4:	69fb      	ldr	r3, [r7, #28]
 800aff6:	f003 0307 	and.w	r3, r3, #7
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00b      	beq.n	800b016 <pvPortMalloc+0x17a>
	__asm volatile
 800affe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b002:	f383 8811 	msr	BASEPRI, r3
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	60fb      	str	r3, [r7, #12]
}
 800b010:	bf00      	nop
 800b012:	bf00      	nop
 800b014:	e7fd      	b.n	800b012 <pvPortMalloc+0x176>
	return pvReturn;
 800b016:	69fb      	ldr	r3, [r7, #28]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3728      	adds	r7, #40	@ 0x28
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	200019f8 	.word	0x200019f8
 800b024:	20001a0c 	.word	0x20001a0c
 800b028:	200019fc 	.word	0x200019fc
 800b02c:	200019f0 	.word	0x200019f0
 800b030:	20001a00 	.word	0x20001a00
 800b034:	20001a04 	.word	0x20001a04

0800b038 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d04f      	beq.n	800b0ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b04a:	2308      	movs	r3, #8
 800b04c:	425b      	negs	r3, r3
 800b04e:	697a      	ldr	r2, [r7, #20]
 800b050:	4413      	add	r3, r2
 800b052:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	685a      	ldr	r2, [r3, #4]
 800b05c:	4b25      	ldr	r3, [pc, #148]	@ (800b0f4 <vPortFree+0xbc>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4013      	ands	r3, r2
 800b062:	2b00      	cmp	r3, #0
 800b064:	d10b      	bne.n	800b07e <vPortFree+0x46>
	__asm volatile
 800b066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b06a:	f383 8811 	msr	BASEPRI, r3
 800b06e:	f3bf 8f6f 	isb	sy
 800b072:	f3bf 8f4f 	dsb	sy
 800b076:	60fb      	str	r3, [r7, #12]
}
 800b078:	bf00      	nop
 800b07a:	bf00      	nop
 800b07c:	e7fd      	b.n	800b07a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00b      	beq.n	800b09e <vPortFree+0x66>
	__asm volatile
 800b086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b08a:	f383 8811 	msr	BASEPRI, r3
 800b08e:	f3bf 8f6f 	isb	sy
 800b092:	f3bf 8f4f 	dsb	sy
 800b096:	60bb      	str	r3, [r7, #8]
}
 800b098:	bf00      	nop
 800b09a:	bf00      	nop
 800b09c:	e7fd      	b.n	800b09a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	685a      	ldr	r2, [r3, #4]
 800b0a2:	4b14      	ldr	r3, [pc, #80]	@ (800b0f4 <vPortFree+0xbc>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4013      	ands	r3, r2
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d01e      	beq.n	800b0ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d11a      	bne.n	800b0ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	685a      	ldr	r2, [r3, #4]
 800b0b8:	4b0e      	ldr	r3, [pc, #56]	@ (800b0f4 <vPortFree+0xbc>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	43db      	mvns	r3, r3
 800b0be:	401a      	ands	r2, r3
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b0c4:	f7fe fc72 	bl	80099ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	685a      	ldr	r2, [r3, #4]
 800b0cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b0f8 <vPortFree+0xc0>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	4a09      	ldr	r2, [pc, #36]	@ (800b0f8 <vPortFree+0xc0>)
 800b0d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b0d6:	6938      	ldr	r0, [r7, #16]
 800b0d8:	f000 f874 	bl	800b1c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b0dc:	4b07      	ldr	r3, [pc, #28]	@ (800b0fc <vPortFree+0xc4>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	4a06      	ldr	r2, [pc, #24]	@ (800b0fc <vPortFree+0xc4>)
 800b0e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b0e6:	f7fe fc6f 	bl	80099c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b0ea:	bf00      	nop
 800b0ec:	3718      	adds	r7, #24
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	20001a0c 	.word	0x20001a0c
 800b0f8:	200019fc 	.word	0x200019fc
 800b0fc:	20001a08 	.word	0x20001a08

0800b100 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b100:	b480      	push	{r7}
 800b102:	b085      	sub	sp, #20
 800b104:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b106:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800b10a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b10c:	4b27      	ldr	r3, [pc, #156]	@ (800b1ac <prvHeapInit+0xac>)
 800b10e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f003 0307 	and.w	r3, r3, #7
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00c      	beq.n	800b134 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	3307      	adds	r3, #7
 800b11e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f023 0307 	bic.w	r3, r3, #7
 800b126:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	4a1f      	ldr	r2, [pc, #124]	@ (800b1ac <prvHeapInit+0xac>)
 800b130:	4413      	add	r3, r2
 800b132:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b138:	4a1d      	ldr	r2, [pc, #116]	@ (800b1b0 <prvHeapInit+0xb0>)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b13e:	4b1c      	ldr	r3, [pc, #112]	@ (800b1b0 <prvHeapInit+0xb0>)
 800b140:	2200      	movs	r2, #0
 800b142:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	4413      	add	r3, r2
 800b14a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b14c:	2208      	movs	r2, #8
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	1a9b      	subs	r3, r3, r2
 800b152:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f023 0307 	bic.w	r3, r3, #7
 800b15a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	4a15      	ldr	r2, [pc, #84]	@ (800b1b4 <prvHeapInit+0xb4>)
 800b160:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b162:	4b14      	ldr	r3, [pc, #80]	@ (800b1b4 <prvHeapInit+0xb4>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2200      	movs	r2, #0
 800b168:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b16a:	4b12      	ldr	r3, [pc, #72]	@ (800b1b4 <prvHeapInit+0xb4>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2200      	movs	r2, #0
 800b170:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	1ad2      	subs	r2, r2, r3
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b180:	4b0c      	ldr	r3, [pc, #48]	@ (800b1b4 <prvHeapInit+0xb4>)
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	4a0a      	ldr	r2, [pc, #40]	@ (800b1b8 <prvHeapInit+0xb8>)
 800b18e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	4a09      	ldr	r2, [pc, #36]	@ (800b1bc <prvHeapInit+0xbc>)
 800b196:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b198:	4b09      	ldr	r3, [pc, #36]	@ (800b1c0 <prvHeapInit+0xc0>)
 800b19a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b19e:	601a      	str	r2, [r3, #0]
}
 800b1a0:	bf00      	nop
 800b1a2:	3714      	adds	r7, #20
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr
 800b1ac:	20000e38 	.word	0x20000e38
 800b1b0:	200019f0 	.word	0x200019f0
 800b1b4:	200019f8 	.word	0x200019f8
 800b1b8:	20001a00 	.word	0x20001a00
 800b1bc:	200019fc 	.word	0x200019fc
 800b1c0:	20001a0c 	.word	0x20001a0c

0800b1c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b1cc:	4b28      	ldr	r3, [pc, #160]	@ (800b270 <prvInsertBlockIntoFreeList+0xac>)
 800b1ce:	60fb      	str	r3, [r7, #12]
 800b1d0:	e002      	b.n	800b1d8 <prvInsertBlockIntoFreeList+0x14>
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	60fb      	str	r3, [r7, #12]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d8f7      	bhi.n	800b1d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d108      	bne.n	800b206 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	685a      	ldr	r2, [r3, #4]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	441a      	add	r2, r3
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	441a      	add	r2, r3
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	429a      	cmp	r2, r3
 800b218:	d118      	bne.n	800b24c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	4b15      	ldr	r3, [pc, #84]	@ (800b274 <prvInsertBlockIntoFreeList+0xb0>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	429a      	cmp	r2, r3
 800b224:	d00d      	beq.n	800b242 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	685a      	ldr	r2, [r3, #4]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	441a      	add	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	601a      	str	r2, [r3, #0]
 800b240:	e008      	b.n	800b254 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b242:	4b0c      	ldr	r3, [pc, #48]	@ (800b274 <prvInsertBlockIntoFreeList+0xb0>)
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	601a      	str	r2, [r3, #0]
 800b24a:	e003      	b.n	800b254 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	429a      	cmp	r2, r3
 800b25a:	d002      	beq.n	800b262 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b262:	bf00      	nop
 800b264:	3714      	adds	r7, #20
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	200019f0 	.word	0x200019f0
 800b274:	200019f8 	.word	0x200019f8

0800b278 <memset>:
 800b278:	4402      	add	r2, r0
 800b27a:	4603      	mov	r3, r0
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d100      	bne.n	800b282 <memset+0xa>
 800b280:	4770      	bx	lr
 800b282:	f803 1b01 	strb.w	r1, [r3], #1
 800b286:	e7f9      	b.n	800b27c <memset+0x4>

0800b288 <__libc_init_array>:
 800b288:	b570      	push	{r4, r5, r6, lr}
 800b28a:	4d0d      	ldr	r5, [pc, #52]	@ (800b2c0 <__libc_init_array+0x38>)
 800b28c:	4c0d      	ldr	r4, [pc, #52]	@ (800b2c4 <__libc_init_array+0x3c>)
 800b28e:	1b64      	subs	r4, r4, r5
 800b290:	10a4      	asrs	r4, r4, #2
 800b292:	2600      	movs	r6, #0
 800b294:	42a6      	cmp	r6, r4
 800b296:	d109      	bne.n	800b2ac <__libc_init_array+0x24>
 800b298:	4d0b      	ldr	r5, [pc, #44]	@ (800b2c8 <__libc_init_array+0x40>)
 800b29a:	4c0c      	ldr	r4, [pc, #48]	@ (800b2cc <__libc_init_array+0x44>)
 800b29c:	f000 f826 	bl	800b2ec <_init>
 800b2a0:	1b64      	subs	r4, r4, r5
 800b2a2:	10a4      	asrs	r4, r4, #2
 800b2a4:	2600      	movs	r6, #0
 800b2a6:	42a6      	cmp	r6, r4
 800b2a8:	d105      	bne.n	800b2b6 <__libc_init_array+0x2e>
 800b2aa:	bd70      	pop	{r4, r5, r6, pc}
 800b2ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2b0:	4798      	blx	r3
 800b2b2:	3601      	adds	r6, #1
 800b2b4:	e7ee      	b.n	800b294 <__libc_init_array+0xc>
 800b2b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ba:	4798      	blx	r3
 800b2bc:	3601      	adds	r6, #1
 800b2be:	e7f2      	b.n	800b2a6 <__libc_init_array+0x1e>
 800b2c0:	0800b39c 	.word	0x0800b39c
 800b2c4:	0800b39c 	.word	0x0800b39c
 800b2c8:	0800b39c 	.word	0x0800b39c
 800b2cc:	0800b3a0 	.word	0x0800b3a0

0800b2d0 <memcpy>:
 800b2d0:	440a      	add	r2, r1
 800b2d2:	4291      	cmp	r1, r2
 800b2d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2d8:	d100      	bne.n	800b2dc <memcpy+0xc>
 800b2da:	4770      	bx	lr
 800b2dc:	b510      	push	{r4, lr}
 800b2de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2e6:	4291      	cmp	r1, r2
 800b2e8:	d1f9      	bne.n	800b2de <memcpy+0xe>
 800b2ea:	bd10      	pop	{r4, pc}

0800b2ec <_init>:
 800b2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ee:	bf00      	nop
 800b2f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2f2:	bc08      	pop	{r3}
 800b2f4:	469e      	mov	lr, r3
 800b2f6:	4770      	bx	lr

0800b2f8 <_fini>:
 800b2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fa:	bf00      	nop
 800b2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2fe:	bc08      	pop	{r3}
 800b300:	469e      	mov	lr, r3
 800b302:	4770      	bx	lr
